{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# COBOL ClarityEngine - Project Documentation\n\n## Overview\nA modern web application for analyzing and documenting legacy COBOL systems. The platform uses AI to transform complex COBOL code into clear, understandable documentation with visualizations and business rule extraction.\n\n## Project Architecture\n- **Frontend**: React with Vite, TypeScript, Tailwind CSS, shadcn/ui components\n- **Backend**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Design System**: Dark theme with green and white color scheme, inspired by modern developer tools\n- **AI Integration**: Anthropic Claude and Google Gemini for code analysis\n\n## Recent Changes\n- **2025-01-08**: Migrated from Replit Agent to standard Replit environment\n- **2025-01-08**: Completely redesigned UI with modern dark interface using green/white theme\n- **2025-01-08**: Implemented glass-card design system with backdrop blur effects\n- **2025-01-08**: Enhanced sidebar with 320px width and improved navigation\n- **2025-01-08**: Updated header with quick stats and search functionality\n- **2025-01-09**: Implemented comprehensive GitHub integration for repository management\n- **2025-01-09**: Added new database tables for repositories, code files, documentation, and dependencies\n- **2025-01-09**: Created repository connection and sync functionality\n- **2025-01-09**: Expanded schema to support business logic extraction and enhanced documentation\n\n## User Preferences\n- **Design Style**: Modern dark interface with green (#00D26A) and white color scheme\n- **UI Inspiration**: Autodocs-style interface with glass cards and subtle animations\n- **Layout**: Sidebar navigation with main content area\n- **Theme**: Always dark mode with consistent color variables\n\n## Technical Stack\n- **Node.js 20** with TypeScript\n- **React 18** with Wouter for routing\n- **TanStack Query** for data fetching\n- **Tailwind CSS** with custom design tokens\n- **Drizzle ORM** for database operations\n- **Express.js** for backend API\n\n## Key Features\n1. **GitHub Repository Integration**\n   - Connect to GitHub repositories\n   - Automatic COBOL file discovery\n   - Branch management\n   - Webhook support for auto-updates\n2. **COBOL File Upload & Analysis**\n3. **AI-Powered Code Documentation**\n   - Overview documentation\n   - Book-style extensive explanations\n   - Member file with decision trees\n   - Architecture analysis\n4. **Business Rules Extraction**\n   - Automated rule identification\n   - Decision tree generation\n   - Input/output mapping\n5. **Data Dictionary Generation**\n6. **System Visualizations (Mermaid diagrams)**\n   - Flowcharts\n   - Architecture diagrams\n   - Dependency graphs\n7. **Program Relationship Mapping**\n8. **Continuous Documentation Updates**\n\n## Database Schema\nCore entities: users, programs, dataElements, programRelationships, uploadSessions\nAll schemas defined in `shared/schema.ts` with proper TypeScript types.\n\n## Development Environment\n- Database: PostgreSQL (provisioned and configured)\n- Server runs on port 5000 with both API and frontend\n- Hot reload enabled for development\n- All dependencies properly installed and configured\n\n## Migration Status\n✅ Replit Agent → Standard Replit migration completed successfully\n✅ Database provisioned and schema deployed\n✅ Modern UI design implemented\n✅ Application running and functional","size_bytes":3341},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        success: \"hsl(var(--success))\",\n        warning: \"hsl(var(--warning))\",\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2867},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"attached_assets/COBOL_Documentation_Generator (copy).md":{"content":"# COBOL Documentation Generator\n\n## Overview\n\nThe COBOL Documentation Generator is an AI-powered web application designed to analyze COBOL source code and automatically generate comprehensive documentation with diagrams, flowcharts, and explanations. The application serves both technical and non-technical users by providing multiple documentation styles and language translation capabilities.\n\n![COBOL Documentation Generator](static/generated-icon.png)\n\n## Repository Structure\n\n### Core Files\n- **main.py**: Application entry point that imports app and starts the Flask server\n- **app.py**: Main Flask application configuration with routes, views, and handlers\n- **models.py**: Database models for users, projects, files, and documentation\n- **agent_fixed.py**: Implementation of the autonomous COBOL documentation agent\n\n### Directory Structure\n```\n/\n├── static/                 # Static assets for frontend\n│   ├── css/                # Stylesheet files\n│   │   └── style.css       # Main application styling (dark futuristic theme)\n│   ├── js/                 # JavaScript functionality\n│   │   ├── app.js          # Core application logic\n│   │   ├── document-generator.js  # COBOL document generation component\n│   │   ├── futuristic-tooltips.js # Custom tooltip implementation\n│   │   ├── ledger-dashboard.js    # Ledger management interface\n│   │   └── tooltip-config.js      # Tooltip configuration system\n│   ├── lib/                # Third-party JavaScript libraries\n│   └── img/                # Image assets\n├── templates/              # HTML templates\n│   ├── base.html           # Base template with common elements\n│   ├── index.html          # Homepage template\n│   ├── dashboard.html      # User dashboard template\n│   ├── login.html          # Authentication templates\n│   ├── register.html\n│   ├── components/         # Reusable UI components\n│   │   ├── document_generator.html  # Document generation form\n│   │   └── modal_init.html          # Modal initialization component\n│   └── ledger/             # Ledger system templates\n│       └── dashboard.html  # Ledger management dashboard\n├── utils/                  # Utility modules\n│   ├── agent_fixed.py      # COBOL documentation agent implementation\n│   ├── cobol_parser.py     # COBOL code parsing functionality\n│   ├── documentation_generator.py # Core documentation generation\n│   ├── groq_client.py      # Groq API integration\n│   ├── ledger_manager.py   # Ledger-based storage system\n│   ├── ledger_sql.py       # SQL operations for ledger\n│   ├── llm_selector.py     # LLM provider selection logic\n│   ├── mermaid_viewer.py   # Mermaid diagram integration\n│   ├── observability.py    # System monitoring and tracing\n│   ├── perplexity_client.py # Perplexity API integration\n│   └── prompt_manager.py   # LLM prompt management system\n├── .env                    # Environment variables configuration\n├── PRODUCTION_DEPLOYMENT.md # Deployment documentation\n├── README.md               # Project overview\n└── pyproject.toml          # Python project dependencies\n```\n\n## Component Hierarchy\n\n1. **Core Application Layer**\n   - Flask Application (app.py)\n     - Route Definitions\n     - Request Handlers\n     - View Functions\n     - Authentication (Flask-Login)\n   - Database Models (models.py)\n     - User Model\n     - Project Model\n     - COBOL File Model\n     - Documentation Model\n     - Source and Doc Queue Models\n\n2. **AI Processing Layer**\n   - COBOLDocumentationAgent (agent_fixed.py)\n     - COBOL Analysis Components\n     - Memory Management\n     - Decision-making System\n     - Documentation Planning\n     - Quality Evaluation\n   - LLM Provider Integration\n     - Groq Client\n     - Perplexity Client\n     - Provider Selection Logic\n   - Prompt Management System\n     - System Prompts\n     - User-customizable Prompts\n     - Prompt Templates\n\n3. **Storage Layer**\n   - PostgreSQL Database\n   - Ledger Management System\n     - Source Code Queue\n     - Documentation Queue\n     - SQL Query Interface\n\n4. **Frontend Layer**\n   - Base Template\n   - Component Templates\n     - Document Generator\n     - Modal System\n     - Tooltip System\n   - JavaScript Functionality\n     - Core Application Logic\n     - Document Generation Interface\n     - Ledger Dashboard Management\n     - Tooltip Configuration\n   - Styling\n     - Futuristic Black Theme\n     - IBM Plex Sans Condensed Font\n     - Custom CSS Components\n\n## Features\n\n### Core Functionality\n\n- **Automated Documentation Generation**: Transform complex COBOL code into clear, well-structured documentation\n- **Intelligent Code Analysis**: Identify program structure, divisions, sections, and flow patterns\n- **Interactive Diagrams**: Generate visual representations of code flow and data structures using Mermaid\n- **Multiple Documentation Formats**: Technical documentation for developers and simplified explanations for non-technical stakeholders\n- **Translation Support**: Generate documentation in multiple languages\n\n### Advanced Capabilities\n\n```mermaid\nsequenceDiagram\n    participant User as User\n    participant WebApp as Web Interface\n    participant Agent as Documentation Agent\n    participant LLM as LLM Provider\n    participant Parser as COBOL Parser\n    participant DB as Database\n    \n    User->>WebApp: Upload COBOL code\n    WebApp->>Agent: Process code\n    Agent->>Parser: Parse structure\n    Parser-->>Agent: Return structured data\n    \n    Agent->>LLM: Send for analysis\n    Note over LLM: Process with context\n    LLM-->>Agent: Return analysis\n    \n    Agent->>Agent: Generate diagrams\n    Agent->>Agent: Format documentation\n    \n    Agent-->>WebApp: Return documentation\n    WebApp-->>User: Display documentation\n    Agent->>DB: Store in ledger\n    \n    User->>WebApp: Request modifications\n    WebApp->>Agent: Modify documentation\n    Agent->>LLM: Refine content\n    LLM-->>Agent: Return refined content\n    Agent-->>WebApp: Return updated docs\n    WebApp-->>User: Display updated docs\n```\n\n- **Autonomous Agent System**: Uses advanced LLM capabilities to make intelligent decisions during code analysis\n- **Ledger-based Storage**: Efficient database storage system for managing large documents\n- **Observability Integration**: Monitors AI operations with traceable decision-making processes\n- **Model Context Protocol (MCP)**: Provides enriched explanations with external knowledge\n- **Multi-LLM Provider Support**: Integrates with Perplexity and Groq for AI-powered analysis\n\n### User Interface\n\n- **Futuristic Black Theme**: Modern dark UI with IBM Plex Sans Condensed font\n- **Interactive Components**: Tooltips, modals, and dynamic content loading\n- **Responsive Design**: Works on desktop and mobile devices\n- **Database Status Indicators**: Real-time connection status monitoring\n\n## System Architecture\n\nThe application follows a traditional web application architecture with the following components:\n\n- **Backend**: Flask-based Python application handling requests, processing COBOL code, and managing user data\n- **Database**: PostgreSQL for storing user accounts, projects, source code, and generated documentation \n- **LLM Integration**: Multiple LLM providers integrated for AI-powered code analysis\n- **Frontend**: Client-side interface using vanilla JavaScript, HTML, CSS with Bootstrap\n- **Observability**: Integration with monitoring and tracing tools\n\n```mermaid\ngraph TD\n    A[Web Interface] <--> B[Flask Backend]\n    B <--> C[PostgreSQL Database]\n    B --> D[Autonomous AI Agent]\n    D --> E[LLM Providers]\n    \n    classDef frontend fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef backend fill:#bbf,stroke:#333,stroke-width:2px;\n    classDef database fill:#bfb,stroke:#333,stroke-width:2px;\n    classDef agent fill:#fbf,stroke:#333,stroke-width:2px;\n    classDef external fill:#fbb,stroke:#333,stroke-width:2px;\n    \n    class A frontend;\n    class B backend;\n    class C database;\n    class D agent;\n    class E external;\n```\n\n## Key Components\n\n### Backend Components\n\n- **Flask Application**: Core application setup, routing, authentication, and API management\n- **COBOL Processor**: Parses COBOL code to identify divisions, sections, paragraphs and other structures\n- **Documentation Generator**: Converts structured COBOL analysis into comprehensive documentation\n- **Autonomous Agent**: Manages complex documentation tasks with observability and memory capabilities\n- **LLM Integration**: Provider-agnostic interface with specific clients for Perplexity and Groq\n- **Prompt Management**: System for managing and customizing prompts for LLM interactions\n- **Ledger System**: Database-efficient storage system for tracking source code and documentation\n\n### Database Models\n\n- **User Model**: Stores user authentication information and links to projects\n- **Project Model**: Represents a documentation project containing multiple COBOL files\n- **CobolFile Model**: Stores information about a COBOL file and links to documentation\n- **Documentation Model**: Stores generated documentation with markdown content\n- **Source and Doc Queue Models**: Manage the ledger system for efficient storage\n\n#### Data Model Relationship Diagram\n\n```mermaid\nerDiagram\n    User ||--o{ Project : owns\n    User ||--o{ SourceCodeQueue : uploads\n    User ||--o{ DocGenerated : accesses\n    \n    Project ||--o{ CobolFile : contains\n    CobolFile ||--o| Documentation : generates\n    \n    SourceCodeQueue ||--|| SourceCodeContent : stores\n    SourceCodeQueue ||--o{ DocGenerated : produces\n    \n    User {\n        int id PK\n        string username\n        string email\n        string password_hash\n        datetime created_at\n    }\n    \n    Project {\n        int id PK\n        string name\n        text description\n        datetime created_at\n        datetime updated_at\n        int user_id FK\n    }\n    \n    CobolFile {\n        int id PK\n        string filename\n        text content\n        string program_id\n        datetime created_at\n        datetime updated_at\n        int project_id FK\n    }\n    \n    Documentation {\n        int id PK\n        text content\n        string language\n        datetime created_at\n        datetime updated_at\n        int cobol_file_id FK\n    }\n    \n    SourceCodeQueue {\n        int id PK\n        string source_id UK\n        string timestamp\n        string source_language\n        string input_source\n        string source_name\n        string status\n        int user_id FK\n        datetime created_at\n    }\n    \n    SourceCodeContent {\n        int id PK\n        string source_id FK\n        text content\n    }\n    \n    DocGenerated {\n        int id PK\n        string result_doc_id UK\n        string result_doc_status\n        string doc_timestamp\n        string doc_source_code_id FK\n        string status\n        text doc_content\n        int user_id FK\n        string in_language\n        datetime created_at\n    }\n```\n\n### Frontend Components\n\n- **Document Generator Component**: Reusable interface for submitting COBOL code\n- **Ledger Dashboard**: Management interface for tracking source code and documentation\n- **Modal System**: Dynamic content loading for interactive user experience\n- **Tooltip System**: Contextual help throughout the application\n- **Markdown and Mermaid Rendering**: Interactive documentation display with diagrams\n\n## User Workflow\n\n```mermaid\ngraph LR\n    A[Authentication] --> B[Source Code Input]\n    B --> C[Configuration]\n    C --> D[Processing]\n    D --> E[Review]\n    E --> F[Management]\n    F --> B\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#fbf,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px\n    style E fill:#bfb,stroke:#333,stroke-width:2px\n    style F fill:#ffb,stroke:#333,stroke-width:2px\n```\n\n1. **Authentication**: Register or log in to access the system\n2. **Source Code Input**: Upload a COBOL file or paste code directly\n3. **Configuration**: Select LLM provider, model, and documentation options\n4. **Processing**: Submit code for analysis and wait for processing to complete\n5. **Review**: View generated documentation with interactive diagrams\n6. **Management**: Access previously generated documentation from the ledger system\n\n## Technical Implementation\n\n### COBOL Analysis Process\n\n```mermaid\ngraph TD\n    %% Main Input\n    input[COBOL Source Code] --> parser\n    \n    %% Parsing Subgraph\n    subgraph parsing[Parsing & Structure Identification]\n        parser[COBOL Parser] --> divisions\n        divisions[Division Detector] --> sections\n        sections[Section Analyzer] --> paragraphs\n        paragraphs[Paragraph Extractor] --> procedures\n        procedures[Procedure Mapping]\n    end\n    \n    %% Data Analysis Subgraph\n    subgraph data_analysis[Data Division Analysis]\n        procedures --> variables\n        variables[Variable Extraction] --> data_types\n        data_types[Data Type Analysis] --> relationships\n        relationships[Data Relationships]\n    end\n    \n    %% Procedural Analysis Subgraph\n    subgraph proc_analysis[Procedure Division Analysis]\n        procedures --> control_flow\n        control_flow[Control Flow Analysis] --> calls\n        calls[CALL Statement Analysis] --> conditionals\n        conditionals[Conditional Logic Mapping]\n    end\n    \n    %% Diagram Generation\n    data_analysis --> diagram_gen\n    proc_analysis --> diagram_gen\n    diagram_gen[Diagram Generator] --> visualization\n    \n    %% Output\n    visualization[Visualizations] --> structured_result\n    structured_result[Structured Analysis Result]\n    \n    %% Styles\n    classDef input fill:#f9f,stroke:#333,stroke-width:2px\n    classDef process fill:#bbf,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    classDef subgraph_style fill:#f0f0f0,stroke:#999,stroke-width:1px\n    \n    class input input\n    class parser,divisions,sections,paragraphs,procedures,variables,data_types,relationships,control_flow,calls,conditionals,diagram_gen,visualization process\n    class structured_result output\n    class parsing,data_analysis,proc_analysis subgraph_style\n```\n\n1. **Parsing**: Extract structure from raw COBOL code\n2. **Division Identification**: Locate and categorize code divisions\n3. **Procedural Analysis**: Map program flow and dependencies\n4. **Data Structure Mapping**: Identify and document data elements\n5. **Diagram Generation**: Create visual representations with Mermaid\n\n### Documentation Generation\n\n```mermaid\nflowchart TD\n    A[Structured Analysis] --> B[Initial Structure Creation]\n    B --> C[Technical Content Generation]\n    C --> D[Non-Technical Translation]\n    D --> E[Diagram Integration]\n    E --> F[MCP Enhancement]\n    F --> G[Complete Documentation]\n    \n    classDef input fill:#f9f,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    classDef process fill:#bbf,stroke:#333,stroke-width:2px\n    \n    class A input\n    class B,C,D,E,F process\n    class G output\n```\n\n1. **Initial Structure Creation**: Organize documentation sections based on code structure\n2. **Technical Content Generation**: Produce developer-focused explanations\n3. **Non-Technical Translation**: Create business-user friendly documentation\n4. **Diagram Integration**: Embed interactive diagrams in appropriate sections\n5. **MCP Enhancement**: Add enriched explanations with external knowledge\n\n### Database Management\n\n1. **Source Queue**: Efficiently store and manage uploaded code\n2. **Documentation Queue**: Store and track generated documentation\n3. **User Association**: Link documents to specific users and projects\n4. **Status Tracking**: Monitor processing state of documents\n5. **SQL Interface**: Built-in tools for database query and management\n\n## System Requirements\n\n- **Python 3.8+**: Core runtime environment\n- **PostgreSQL**: Database for persistent storage\n- **Flask Framework**: Web application framework\n- **Gunicorn**: WSGI HTTP server for production\n- **External API Keys**: Access to LLM provider services (Perplexity, Groq)\n\n## Security Considerations\n\n- **Authentication**: User account management with secure password handling\n- **API Key Management**: Secure storage of external service credentials\n- **CSRF Protection**: Prevention of cross-site request forgery attacks\n- **Database Security**: Parameterized queries and input validation\n- **Error Handling**: Secure error reporting without sensitive information disclosure\n\n## System Variables and Environment Configuration\n\n### Environment Variables\n| Variable | Purpose | Used By |\n|----------|---------|---------|\n| `DATABASE_URL` | PostgreSQL connection string | app.py, utils/ledger_sql.py |\n| `PERPLEXITY_API_KEY` | Authentication for Perplexity API | utils/perplexity_client.py |\n| `GROQ_API_KEY` | Authentication for Groq API | utils/groq_client.py |\n| `PGDATABASE` | PostgreSQL database name | utils/ledger_sql.py |\n| `PGUSER` | PostgreSQL username | utils/ledger_sql.py |\n| `PGPASSWORD` | PostgreSQL password | utils/ledger_sql.py |\n| `PGHOST` | PostgreSQL host | utils/ledger_sql.py |\n| `PGPORT` | PostgreSQL port | utils/ledger_sql.py |\n| `SESSION_SECRET` | Flask session encryption key | app.py |\n| `FLASK_ENV` | Flask environment (development/production) | app.py |\n| `FLASK_DEBUG` | Flask debug mode enablement | app.py |\n\n### User Settings\n| Setting | Purpose | Default |\n|---------|---------|---------|\n| `llm_provider` | LLM provider selection (groq/perplexity) | \"groq\" |\n| `llm_model` | Model name for selected provider | \"llama-3.3-70b-versatile\" |\n| `audience` | Target audience for documentation | \"technical\" |\n| `detail_level` | Documentation detail level | \"high\" |\n| `documentation_style` | Style of documentation | \"academic\" |\n| `tooltip_delay` | Tooltip display delay in ms | 1000 |\n| `tooltip_opacity` | Tooltip background opacity | 0.9 |\n| `tooltip_font_size` | Tooltip text size | 6 |\n| `tooltip_x_offset` | Tooltip horizontal offset | 10 |\n| `tooltip_y_offset` | Tooltip vertical offset | 10 |\n\n## Detailed Component Architecture\n\n```mermaid\ngraph TD\n    %% Main Application Components\n    app[Flask Application]\n    models[Database Models]\n    agent[COBOL Documentation Agent]\n    db[(PostgreSQL Database)]\n    \n    %% LLM Provider Components\n    llm_selector{LLM Provider Selector}\n    perplexity[Perplexity API]\n    groq[Groq API]\n    \n    %% Processing Components\n    cobol_parser[COBOL Parser]\n    doc_gen[Documentation Generator]\n    mermaid[Mermaid Diagrams]\n    \n    %% Storage Components\n    ledger[Ledger Management]\n    ledger_sql[SQL Operations]\n    \n    %% Services\n    prompt_mgr[Prompt Management]\n    observability[Observability System]\n    \n    %% UI Components\n    ui_base[Base UI Template]\n    ui_docgen[Document Generator UI]\n    ui_ledger[Ledger Dashboard UI]\n    \n    %% JS Components\n    js_app[Core JavaScript]\n    js_docgen[Document Generator JS]\n    js_tooltips[Tooltip System]\n    js_ledger[Ledger Dashboard JS]\n    \n    %% Component Relationships\n    app --> models\n    app --> agent\n    app --> db\n    app --> ledger\n    app --> ui_base\n    app --> observability\n    \n    agent --> llm_selector\n    agent --> cobol_parser\n    agent --> doc_gen\n    agent --> prompt_mgr\n    \n    llm_selector --> perplexity\n    llm_selector --> groq\n    \n    doc_gen --> mermaid\n    \n    ledger --> ledger_sql\n    ledger --> models\n    ledger_sql --> db\n    models --> db\n    \n    ui_base --> ui_docgen\n    ui_base --> ui_ledger\n    ui_base --> js_app\n    \n    ui_docgen --> js_docgen\n    ui_ledger --> js_ledger\n    \n    js_app --> js_tooltips\n    js_docgen --> app\n    js_ledger --> app\n    \n    %% Styles\n    classDef application fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef database fill:#bfb,stroke:#333,stroke-width:2px;\n    classDef service fill:#bbf,stroke:#333,stroke-width:2px;\n    classDef ui fill:#fbf,stroke:#333,stroke-width:2px;\n    classDef code fill:#ffb,stroke:#333,stroke-width:2px;\n    classDef api fill:#fbb,stroke:#333,stroke-width:2px;\n    \n    class app,agent application;\n    class db,models,ledger database;\n    class llm_selector,prompt_mgr,observability,ledger_sql service;\n    class ui_base,ui_docgen,ui_ledger ui;\n    class js_app,js_docgen,js_tooltips,js_ledger code;\n    class perplexity,groq,cobol_parser,doc_gen,mermaid api;\n```\n\n### LLM Provider Selection Flow\n\n```mermaid\nflowchart TD\n    start[Start] --> check_pref{Check User Preference}\n    check_pref -->|Perplexity| check_perp{Perplexity API Key?}\n    check_pref -->|Groq| check_groq{Groq API Key?}\n    check_perp -->|Yes| use_perp[Use Perplexity]\n    check_perp -->|No| fallback{Check Fallback}\n    check_groq -->|Yes| use_groq[Use Groq]\n    check_groq -->|No| fallback\n    fallback -->|Groq API Available| use_groq\n    fallback -->|Neither Available| error[Show API Key Error]\n    \n    use_perp --> model_perp{Select Model}\n    use_groq --> model_groq{Select Model}\n    \n    model_perp -->|User Selection| perp_models[Perplexity Models:<br/>llama-3.1-sonar-small-128k-online<br/>llama-3.1-sonar-large-128k-online<br/>llama-3.1-sonar-huge-128k-online]\n    model_groq -->|User Selection| groq_models[Groq Models:<br/>llama-3.3-70b-versatile<br/>llama3-8b-8192<br/>llama3-70b-8192<br/> and others]\n    \n    perp_models --> call_api[Call LLM API]\n    groq_models --> call_api\n    \n    style start fill:#f9f,stroke:#333,stroke-width:2px\n    style use_perp,use_groq fill:#bfb,stroke:#333,stroke-width:2px\n    style error fill:#fbb,stroke:#333,stroke-width:2px\n    style check_pref,check_perp,check_groq,fallback,model_perp,model_groq fill:#bbf,stroke:#333,stroke-width:2px\n    style perp_models,groq_models fill:#fbf,stroke:#333,stroke-width:1px\n    style call_api fill:#ffb,stroke:#333,stroke-width:2px\n```\n\n## Recent Bugfixes and Improvements\n\n### Form Validation in Document Generator\n\nThe document generator component had an issue with form validation where it would incorrectly show an error message \"Please provide COBOL code either by pasting it or uploading a file\" even when a file was actually uploaded. This was fixed by:\n\n1. Improving the validation logic in `document-generator.js` to properly check for file input elements\n2. Adding direct DOM access to verify file uploads when FormData API doesn't report them correctly\n3. Adding additional logging to help diagnose validation issues in the future\n\n```javascript\n// Enhanced file validation in document-generator.js\nvalidateForm(formData) {\n    // Check if any code is provided\n    const code = formData.get('cobolCode') || formData.get('code');\n    const file = formData.get('cobolFile') || formData.get('file');\n    \n    // Check if we have a file input element\n    const fileInputId = `cobolFile_${this.formId}` || `file_${this.formId}`;\n    const fileInput = document.getElementById(fileInputId);\n    \n    // If file input has files, consider it valid regardless of formData\n    if (fileInput && fileInput.files && fileInput.files.length > 0) {\n        console.log('File validation: Valid file found in input element', fileInput.files[0].name);\n        return true;\n    }\n    \n    // Otherwise check formData\n    if (!code && (!file || file.size === 0)) {\n        console.log('Form validation failed: No code or file provided');\n        // Show error message...\n        return false;\n    }\n    \n    return true;\n}\n```\n\n### Code Analysis and Transformation Flow\n\n```mermaid\ngraph TB\n    subgraph input[Input Phase]\n        cobol[COBOL Code] --> parse[Parse Code]\n    end\n    \n    subgraph analysis[Analysis Phase]\n        parse --> structure[Identify Structure]\n        structure --> divisions[Extract Divisions]\n        divisions --> sections[Identify Sections]\n        sections --> paragraphs[Map Paragraphs]\n        paragraphs --> dataItems[Extract Data Items]\n        paragraphs --> controlFlow[Map Control Flow]\n    end\n    \n    subgraph llm[LLM Processing]\n        controlFlow --> prompt[Create LLM Prompt]\n        dataItems --> prompt\n        prompt --> llmProcess[Process with LLM]\n        llmProcess --> explanation[Generate Explanations]\n        explanation --> technical[Technical Documentation]\n        explanation --> business[Business Documentation]\n    end\n    \n    subgraph visualization[Visualization]\n        technical --> diagrams[Generate Diagrams]\n        business --> diagrams\n        diagrams --> mermaid[Mermaid Diagrams]\n        diagrams --> flowcharts[Flow Charts]\n        diagrams --> dataModels[Data Models]\n    end\n    \n    subgraph output[Final Output]\n        technical --> markdown[Markdown Document]\n        business --> markdown\n        mermaid --> markdown\n        flowcharts --> markdown\n        dataModels --> markdown\n        markdown --> result[Complete Documentation]\n    end\n    \n    classDef inputPhase fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef analysisPhase fill:#bbf,stroke:#333,stroke-width:2px;\n    classDef llmPhase fill:#fbf,stroke:#333,stroke-width:2px;\n    classDef vizPhase fill:#ffb,stroke:#333,stroke-width:2px;\n    classDef outputPhase fill:#bfb,stroke:#333,stroke-width:2px;\n    \n    class input,cobol,parse inputPhase;\n    class analysis,structure,divisions,sections,paragraphs,dataItems,controlFlow analysisPhase;\n    class llm,prompt,llmProcess,explanation,technical,business llmPhase;\n    class visualization,diagrams,mermaid,flowcharts,dataModels vizPhase;\n    class output,markdown,result outputPhase;\n```\n\n### Duplicate Component Import in Ledger Dashboard\n\nThe ledger dashboard had an issue with duplicate imports of the document_generator component, causing a floating form to appear on the page. This was fixed by:\n\n1. Removing the duplicate import in `templates/ledger/dashboard.html`\n2. Updating the import to use `with context` to ensure proper variable passing\n3. Streamlining the template structure for better maintainability\n\n```html\n<!-- Before: Duplicate imports -->\n{% from \"components/document_generator.html\" import document_generator %}\n<!-- Later in the file -->\n{% from \"components/document_generator.html\" import document_generator with context %}\n\n<!-- After: Single import with context -->\n{% from \"components/document_generator.html\" import document_generator with context %}\n```\n\n### Tooltip Configuration Error Handling\n\nThe tooltip system was experiencing errors when configuration settings were undefined, leading to JavaScript console errors. This was fixed by:\n\n1. Adding default settings for tooltips in case configuration is missing\n2. Implementing better error handling throughout the tooltip system\n3. Adding fallback behavior to prevent \"Cannot read properties of undefined\" errors\n\n## Code-Coupled Documentation System\n\nThe documentation system implements Swimm's advanced approach to code-coupled documentation, ensuring technical documentation remains synchronized with code changes through intelligent linking and version control integration.\n\n```mermaid\ngraph TD\n    subgraph static_analysis[Static Analysis Foundation]\n        code[COBOL Code] --> parser[Tree-sitter Parser]\n        parser --> ast[Abstract Syntax Tree]\n        ast --> mapper[Code Mapper]\n        mapper --> deps[Dependency Analysis]\n        mapper --> rules[Business Rule Extraction]\n        mapper --> context[Context Retrieval System]\n    end\n    \n    subgraph code_coupling[Code-Coupling Implementation]\n        deps --> references[Live Code References]\n        rules --> tokens[Smart Tokens]\n        context --> format[.swm File Format]\n        references --> git[Git Integration]\n        tokens --> git\n        format --> git\n    end\n    \n    subgraph ai_generation[AI Documentation Generation]\n        git --> pipeline[Three-Stage Pipeline]\n        pipeline --> analysis[Analysis Stage]\n        pipeline --> retrieval[Retrieval Stage]\n        pipeline --> generation[Generation Stage]\n        analysis --> anchoring[Code Anchoring]\n        retrieval --> anchoring\n        anchoring --> pr2doc[PR2Doc Feature]\n        anchoring --> snippets[Snippets2Doc Feature]\n    end\n    \n    subgraph auto_sync[Auto-Sync System]\n        pr2doc --> diff[Diff Analysis]\n        snippets --> diff\n        diff --> cicd[CI/CD Integration]\n        diff --> notify[Developer Notifications]\n        cicd --> status[Documentation Status]\n        notify --> status\n    end\n    \n    classDef analysis fill:#f9f,stroke:#333,stroke-width:2px\n    classDef coupling fill:#bbf,stroke:#333,stroke-width:2px\n    classDef generation fill:#fbf,stroke:#333,stroke-width:2px\n    classDef sync fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class static_analysis,code,parser,ast,mapper,deps,rules,context analysis\n    class code_coupling,references,tokens,format,git coupling\n    class ai_generation,pipeline,analysis,retrieval,generation,anchoring,pr2doc,snippets generation\n    class auto_sync,diff,cicd,notify,status sync\n```\n\n### Static Analysis Foundation\n\nThe system builds upon a robust static analysis engine that provides the foundational understanding of code structure:\n\n- **Code Mapping**: Utilizes Tree-sitter with custom queries to create a comprehensive map of the codebase\n- **Dependency Analysis**: Identifies relationships between programs, copybooks, and external systems\n- **Business Rule Extraction**: Automatically identifies and extracts business logic, especially from legacy systems\n- **Context-Aware Retrieval**: Implements an intelligent system for retrieving relevant code context\n\n```python\nclass CodeAnalyzer:\n    def extract_business_rules(self, codebase_path):\n        \"\"\"\n        Extract business rules from COBOL codebase\n        \n        Args:\n            codebase_path: Path to COBOL source files\n            \n        Returns:\n            JSON structure with rule locations and descriptions\n        \"\"\"\n        # Legacy system pattern matching\n        rules = []\n        \n        # Look for code comments indicating business rules\n        # Example: # 1987 FDIC guideline\n        \n        # Detect conditional logic patterns\n        # Example: IF LOAN-AMT > 500000 MOVE 'HIGH' TO RISK-RATING\n        \n        return rules\n```\n\n### Code-Coupling Implementation\n\nDocumentation is tightly coupled to code through a sophisticated token system:\n\n- **Live Code References**: Smart references that update when code changes\n- **Markdown-Based Format**: Documentation stored in `.swm` files compatible with standard Markdown\n- **Version Control Integration**: Seamless integration with Git for tracking documentation alongside code\n\n```markdown\n## Risk Assessment Process\n\nThe system implements the following risk assessment rules:\n\n<!-- SWIMM-REF: programs/risk.cbl:42-58 -->\n```cobol\nIF LOAN-AMT > 500000\n   MOVE 'HIGH' TO RISK-RATING  *> 1987 FDIC guideline\nELSE IF LOAN-AMT > 100000\n   MOVE 'MEDIUM' TO RISK-RATING\nELSE\n   MOVE 'LOW' TO RISK-RATING\nEND-IF\n```\n\nThis risk classification follows FDIC guidelines established in 1987.\n```\n\n### AI Documentation Generation\n\nThe system employs a sophisticated AI pipeline for generating high-quality documentation:\n\n- **Three-Stage Pipeline**: Analysis → Retrieval → Generation\n- **Hallucination Prevention**: Code anchoring ensures all documentation is grounded in actual code\n- **PR2Doc Feature**: Automatically generates documentation from pull requests\n- **Snippets2Doc Feature**: Creates comprehensive documentation from code snippets\n\n```python\nclass DocGenerator:\n    def generate_doc(self, code_context, user_query):\n        \"\"\"\n        Generate documentation based on code context and user query\n        \n        Args:\n            code_context: Extracted code context from static analysis\n            user_query: Natural language query about the code\n            \n        Returns:\n            Markdown documentation with embedded code references\n        \"\"\"\n        # Analysis stage - understand the code structure\n        structure = self.analyze_structure(code_context)\n        \n        # Retrieval stage - get relevant context\n        context = self.retrieve_context(structure, user_query)\n        \n        # Generation stage - create documentation\n        documentation = self.generate_with_llm(context, user_query)\n        \n        # Validate against code to prevent hallucinations\n        validated_doc = self.validate_response(documentation, code_context)\n        \n        return validated_doc\n```\n\n### Auto-Sync System\n\nThe system ensures documentation stays in sync with code changes:\n\n- **Diff Analysis**: Automatically analyzes code changes to identify affected documentation\n- **CI/CD Integration**: Integrates with CI/CD pipelines to validate documentation during builds\n- **Developer Notifications**: Alerts developers about documentation that needs updates\n\n```yaml\n# CI/CD Integration Example\nname: Documentation Validation\non: [push, pull_request]\njobs:\n  doc-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check Documentation Sync\n        run: swimm verify\n      - name: Notify on Outdated Docs\n        if: ${{ failure() }}\n        uses: actions/github-script@v6\n        with:\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: '⚠️ Documentation is out of sync with code changes. Please update!'\n            })\n```\n\n## Advanced Enterprise COBOL Analysis Suite\n\nThe Advanced COBOL Analysis functionality extends the system with powerful capabilities for analyzing large-scale COBOL codebases, tracking data lineage, and providing comprehensive documentation for mission-critical mainframe applications.\n\n### Modular Code Analysis Engine\n\n```mermaid\ngraph TB\n    subgraph parsing[Code Parsing]\n        input[Monolithic COBOL] --> parser[Parser Engine]\n        jcl[Embedded JCL] --> parser\n        copybook[Copybook Dependencies] --> parser\n        parser --> structure[Program Structure]\n    end\n    \n    subgraph analysis[Advanced Analysis]\n        structure --> perform[PERFORM Range Analysis] \n        structure --> vars[Global Variable Tracking]\n        structure --> calls[Call Tree Generation]\n        \n        perform --> nest[Nested Control Flow]\n        vars --> prop[Variable Propagation]\n        calls --> exec[EXEC CICS/DB2 Analysis]\n    end\n    \n    subgraph visualization[Visualization]\n        nest --> viz[Visualization Engine]\n        prop --> viz\n        exec --> viz\n        \n        viz --> flow[Control Flow Graphs]\n        viz --> heat[Variable Heatmaps]\n        viz --> matrix[Dependency Matrices]\n    end\n    \n    classDef parsing fill:#f9f,stroke:#333,stroke-width:2px\n    classDef analysis fill:#bbf,stroke:#333,stroke-width:2px\n    classDef visualization fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class parsing parsing\n    class analysis analysis\n    class visualization visualization\n```\n\nThe Modular Code Analysis Engine can process monolithic COBOL codebases exceeding 1 million lines of code, with capabilities to:\n\n- Detect PERFORM range boundaries and nested control flows with up to 5 levels of nesting\n- Map global variable propagation across programs using working-storage sections\n- Auto-generate call trees for programs with embedded EXEC CICS and DB2 SQL statements\n- Process 100,000 lines of code per minute on modern hardware\n\n### Data Lineage Tracker\n\n```mermaid\ngraph LR\n    subgraph sources[Data Sources]\n        vsam[(VSAM Files)]\n        db2[(DB2 Tables)]\n        ims[(IMS Databases)]\n    end\n    \n    subgraph analysis[Lineage Analysis]\n        fd[FD Entries]\n        copybook[Copybooks]\n        \n        vsam --> fd\n        db2 --> copybook\n        ims --> fd\n        \n        fd --> entity[Entity Extraction]\n        copybook --> entity\n        \n        entity --> relations[Relationship Mapping]\n        entity --> usage[Variable Usage Tracking]\n    end\n    \n    subgraph output[Output]\n        relations --> er[ER Diagrams]\n        usage --> flow[Data Flow Maps]\n        \n        er --> doc[Documentation]\n        flow --> doc\n    end\n    \n    classDef sources fill:#f9f,stroke:#333,stroke-width:2px\n    classDef analysis fill:#bbf,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class sources sources\n    class analysis analysis\n    class output output\n```\n\nThe Data Lineage Tracker allows comprehensive mapping of data flows through complex COBOL applications:\n\n- Reverse-engineers relationships from VSAM, DB2, and IMS data sources\n- Automatically generates entity-relationship diagrams from COBOL data divisions\n- Tracks variable usage from input files through computational logic to output reports\n- Flags variables modified in more than three different programs\n\n### AI-Powered Annotation System\n\n```mermaid\nsequenceDiagram\n    participant COBOL as COBOL Program\n    participant Parser as Parser Engine\n    participant AI as Neural Network\n    participant Doc as Documentation\n    \n    COBOL->>Parser: Program Source\n    Parser->>AI: COBOL Paragraphs\n    AI->>AI: Apply Transformer Models\n    AI->>Doc: Business Rule Summaries\n    \n    Parser->>AI: Control Flow Structure\n    AI->>AI: Analyze PERFORM Complexity\n    AI->>Doc: Flag Complex Nesting (>5 levels)\n    \n    Parser->>AI: Variable Modification Data\n    AI->>AI: Analyze Cross-Program Impact\n    AI->>Doc: Generate Warning Annotations\n```\n\nThe AI-Powered Annotation System uses advanced neural networks to enhance documentation:\n\n- Converts COBOL paragraphs into business rule summaries using transformer models\n- Detects and flags undocumented PERFORM cycles exceeding 5 nesting levels\n- Generates warning annotations for variables with complex modification patterns\n- Creates machine-readable JSON schema for program metadata\n\n### Enterprise Integration\n\nThe system seamlessly integrates with enterprise mainframe environments:\n\n- **Mainframe-Native Module**: z/OS-compliant with batch interface for processing PDS libraries\n- **IDE Plugins**: Extensions for VS Code and Eclipse with real-time documentation overlay\n- **Legacy System Adapters**: Support for IMS transaction flows, CICS BMS maps, and DB2 plan binding\n\n### Advanced Visualization\n\n```mermaid\ngraph TD\n    subgraph input[Analysis Input]\n        code[COBOL Code] --> engine[Analysis Engine]\n        jcl[JCL] --> engine\n        db[Database Schemas] --> engine\n    end\n    \n    subgraph visual[Visualization Types]\n        engine --> flow[Control Flow]\n        engine --> heat[Variable Heatmaps]\n        engine --> dep[Dependency Matrices]\n        engine --> er[ER Diagrams]\n    end\n    \n    subgraph output[Interactive Features]\n        flow --> highlight[Path Highlighting]\n        heat --> hotspot[Modification Hotspots]\n        dep --> navigate[Click-through Navigation]\n        er --> drill[Schema Drill-Down]\n        \n        highlight --> export[Export Options]\n        hotspot --> export\n        navigate --> export\n        drill --> export\n        \n        export --> pdf[PDF]\n        export --> json[JSON]\n        export --> html[HTML]\n    end\n    \n    classDef input fill:#f9f,stroke:#333,stroke-width:2px\n    classDef visual fill:#bbf,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class input input\n    class visual visual\n    class output output\n```\n\nThe Advanced Visualization Engine provides interactive diagrams for complex code exploration:\n\n- Dynamic control flow graphs with PERFORM/CALL path highlighting\n- Heatmaps of variable modification points across programs\n- Cross-program dependency matrices with click-through navigation\n- PDF reports with clickable cross-program references\n\n### System Requirements\n\n- **Performance**: Process 100K lines of code per minute on z15 hardware\n- **Rendering**: Generate complex dependency graphs in under 3 seconds (500+ nodes)\n- **Compliance**: Support for IBM Enterprise COBOL 6.3 syntax variants\n\n### Advanced COBOL Metadata Schema\n\n```mermaid\nerDiagram\n    PROGRAM ||--o{ DIVISION : contains\n    DIVISION ||--o{ SECTION : contains\n    SECTION ||--o{ PARAGRAPH : contains\n    PARAGRAPH ||--o{ STATEMENT : contains\n    \n    PROGRAM ||--o{ COPYBOOK : uses\n    COPYBOOK ||--o{ COPYBOOK : inherits\n    \n    PROGRAM ||--o{ VARIABLE : defines\n    VARIABLE ||--o{ MODIFICATION : undergoes\n    VARIABLE ||--o{ REFERENCE : has\n    \n    PROGRAM {\n        string program_id PK\n        string type\n        date last_modified\n        int complexity_score\n        string jcl_job\n    }\n    \n    DIVISION {\n        int division_id PK\n        string name\n        int program_id FK\n    }\n    \n    SECTION {\n        int section_id PK\n        string name\n        int division_id FK\n    }\n    \n    PARAGRAPH {\n        int paragraph_id PK\n        string name\n        int section_id FK\n        int nesting_level\n        int complexity\n    }\n    \n    STATEMENT {\n        int statement_id PK\n        string type\n        string content\n        int paragraph_id FK\n    }\n    \n    COPYBOOK {\n        int copybook_id PK\n        string name\n        string version\n        int parent_id FK\n    }\n    \n    VARIABLE {\n        int variable_id PK\n        string name\n        string data_type\n        int level_number\n        string picture\n        int program_id FK\n        string lifecycle_state\n    }\n    \n    MODIFICATION {\n        int modification_id PK\n        int variable_id FK\n        int program_id FK\n        int paragraph_id FK\n        string operation\n    }\n    \n    REFERENCE {\n        int reference_id PK\n        int variable_id FK\n        int program_id FK\n        int paragraph_id FK\n        string context\n    }\n```\n\nThis comprehensive metadata schema captures the complete structure of COBOL programs including:\n\n- Program structure with divisions, sections, paragraphs, and statements hierarchy\n- Copybook version inheritance relationships to track dependencies\n- Variable lifecycle states (DEFINED/MODIFIED/REFERENCED) across programs\n- Cross-program variable usage and modification patterns\n\n### Validation and Compliance Framework\n\n```mermaid\nflowchart TD\n    subgraph input[Legacy Systems]\n        claims[Claims Processing<br/>40-year-old system]\n        circular[Circular Dependencies<br/>Multi-program chain]\n        mismatch[Schema Mismatch<br/>COBOL vs DB2 DDL]\n    end\n    \n    subgraph validation[Validation Process]\n        claims --> rules[Business Rule<br/>Extraction]\n        circular --> cycle[Circular Dependency<br/>Detection]\n        mismatch --> schema[Schema<br/>Validation]\n        \n        rules --> doc[Documentation<br/>Generation]\n        cycle --> warning[Warning<br/>Annotation]\n        schema --> alert[DDL Mismatch<br/>Alerts]\n    end\n    \n    subgraph output[Compliance Output]\n        doc --> json[JSON Schema<br/>Program Metadata]\n        warning --> pdf[PDF Reports]\n        alert --> html[HTML Reports]\n        \n        json --> ci[CI/CD<br/>Integration]\n        pdf --> ci\n        html --> ci\n    end\n    \n    classDef input fill:#f9f,stroke:#333,stroke-width:2px\n    classDef validation fill:#bbf,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class input,claims,circular,mismatch input\n    class validation,rules,cycle,schema,doc,warning,alert validation\n    class output,json,pdf,html,ci output\n```\n\nThe system includes robust validation capabilities for legacy COBOL systems:\n\n- **Business Rule Extraction**: Identifies and documents undocumented business rules in legacy systems\n- **Circular Dependency Detection**: Finds and visualizes multi-program update chains with circular PERFORM dependencies\n- **Schema Validation**: Detects mismatches between COBOL copybooks and actual DB2 DDL specifications\n- **CI/CD Integration**: Produces machine-readable outputs compatible with modern DevOps pipelines\n\n## AI Prompt Engineering for Documentation Generation\n\nThe system uses carefully crafted prompts to generate high-quality, code-anchored documentation:\n\n```mermaid\nsequenceDiagram\n    participant User\n    participant System\n    participant StaticAnalysis\n    participant VectorStore\n    participant LLM\n    \n    User->>System: Request documentation\n    System->>StaticAnalysis: Extract code context\n    StaticAnalysis-->>System: Return analyzed code artifacts\n    System->>VectorStore: Retrieve relevant context\n    VectorStore-->>System: Return matched context\n    \n    System->>LLM: Send structured prompt\n    Note over System,LLM: Documentation Generation Prompt Format\n    LLM-->>System: Generated documentation\n    System->>System: Validate code references\n    System-->>User: Return validated documentation\n```\n\n### Prompt Structure\n\nAll documentation generation uses a consistent prompt structure:\n\n```markdown\n# Documentation Generation Prompt\n\n[Code Context]\n<analyzed_code_artifacts>\n\n[User Request]\n{natural_language_query}\n\n[Response Requirements]\n1. Base response on static analysis context\n2. Cite exact code references using [file:line] notation\n3. Generate markdown with embedded code snippets\n4. Include mermaid diagrams for complex flows\n```\n\nThis structured prompt format ensures:\n\n- **Contextual Awareness**: Documentation is based on actual code analysis\n- **Reference Accuracy**: All citations point to actual code locations\n- **Format Consistency**: Documentation follows standardized Markdown format\n- **Visual Clarity**: Complex relationships are visualized with diagrams\n\n### Verification and Testing\n\n```mermaid\nflowchart TD\n    subgraph testing[Verification Process]\n        unit[Unit Tests] --> coverage[90% Code Coverage]\n        integration[Integration Tests] --> cicd[CI/CD Pipeline]\n        cicd --> checks[Documentation Checks]\n        \n        benchmark[Accuracy Benchmark] --> manual[Manual Documentation]\n        benchmark --> auto[Auto-Generated Docs]\n        \n        security[Security Validation] --> soc2[SOC2 Compliance]\n    end\n    \n    subgraph example[Example Test Cases]\n        test1[Legacy Code Test] --> risk[Risk Algorithm]\n        test2[Sync Test] --> changes[Code Changes]\n        test3[Citation Test] --> accuracy[Reference Accuracy]\n    end\n    \n    classDef testing fill:#f9f,stroke:#333,stroke-width:2px\n    classDef examples fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class testing,unit,integration,cicd,checks,benchmark,manual,auto,security,soc2 testing\n    class example,test1,test2,test3,risk,changes,accuracy examples\n```\n\nThe system includes comprehensive testing and verification:\n\n- **Unit Tests**: Coverage of 90% of code paths\n- **CI/CD Pipeline**: Integrated documentation checks\n- **Accuracy Benchmarks**: Comparison against manual documentation\n- **Security Validation**: SOC2 compliance checks\n\nExample verification test:\n\n```python\ndef test_auto_sync():\n    # Arrange\n    test_code = \"def legacy_calculation(x):\\n    return x * 2.5  # Risk factor\"\n    original_doc = \"Implements legacy risk algorithm [file:calc.py:15]\"\n    modified_code = \"def updated_calculation(x):\\n    return x * 3.0  # Updated risk factor\"\n    \n    # Act\n    sync_status = documentation_sync.check(original_doc, modified_code)\n    \n    # Assert\n    assert sync_status == \"OUTDATED\"\n    assert \"risk factor change\" in documentation_sync.get_reason()\n```\n\n## Future Enhancements\n\n- **Additional Language Support**: Expand beyond COBOL to Assembler, PL/I, and other mainframe languages\n- **Collaborative Features**: Team-based documentation review and editing workflows\n- **Enhanced Diagrams**: More sophisticated visualizations of complex code structures and relationships\n- **Documentation Export**: Additional export formats including PDF, HTML, and interactive web formats\n- **Advanced Integration**: Deeper connections with code repositories, CI/CD pipelines, and IDE environments\n- **Real-time Collaboration**: Simultaneous editing and commenting on documentation with presence awareness","size_bytes":47972},"attached_assets/COBOL_Documentation_Generator.md":{"content":"# COBOL Documentation Generator\n\n## Overview\n\nThe COBOL Documentation Generator is an AI-powered web application designed to analyze COBOL source code and automatically generate comprehensive documentation with diagrams, flowcharts, and explanations. The application serves both technical and non-technical users by providing multiple documentation styles and language translation capabilities.\n\n![COBOL Documentation Generator](static/generated-icon.png)\n\n## Repository Structure\n\n### Core Files\n- **main.py**: Application entry point that imports app and starts the Flask server\n- **app.py**: Main Flask application configuration with routes, views, and handlers\n- **models.py**: Database models for users, projects, files, and documentation\n- **agent_fixed.py**: Implementation of the autonomous COBOL documentation agent\n\n### Directory Structure\n```\n/\n├── static/                 # Static assets for frontend\n│   ├── css/                # Stylesheet files\n│   │   └── style.css       # Main application styling (dark futuristic theme)\n│   ├── js/                 # JavaScript functionality\n│   │   ├── app.js          # Core application logic\n│   │   ├── document-generator.js  # COBOL document generation component\n│   │   ├── futuristic-tooltips.js # Custom tooltip implementation\n│   │   ├── ledger-dashboard.js    # Ledger management interface\n│   │   └── tooltip-config.js      # Tooltip configuration system\n│   ├── lib/                # Third-party JavaScript libraries\n│   └── img/                # Image assets\n├── templates/              # HTML templates\n│   ├── base.html           # Base template with common elements\n│   ├── index.html          # Homepage template\n│   ├── dashboard.html      # User dashboard template\n│   ├── login.html          # Authentication templates\n│   ├── register.html\n│   ├── components/         # Reusable UI components\n│   │   ├── document_generator.html  # Document generation form\n│   │   └── modal_init.html          # Modal initialization component\n│   └── ledger/             # Ledger system templates\n│       └── dashboard.html  # Ledger management dashboard\n├── utils/                  # Utility modules\n│   ├── agent_fixed.py      # COBOL documentation agent implementation\n│   ├── cobol_parser.py     # COBOL code parsing functionality\n│   ├── documentation_generator.py # Core documentation generation\n│   ├── groq_client.py      # Groq API integration\n│   ├── ledger_manager.py   # Ledger-based storage system\n│   ├── ledger_sql.py       # SQL operations for ledger\n│   ├── llm_selector.py     # LLM provider selection logic\n│   ├── mermaid_viewer.py   # Mermaid diagram integration\n│   ├── observability.py    # System monitoring and tracing\n│   ├── perplexity_client.py # Perplexity API integration\n│   └── prompt_manager.py   # LLM prompt management system\n├── .env                    # Environment variables configuration\n├── PRODUCTION_DEPLOYMENT.md # Deployment documentation\n├── README.md               # Project overview\n└── pyproject.toml          # Python project dependencies\n```\n\n## Component Hierarchy\n\n1. **Core Application Layer**\n   - Flask Application (app.py)\n     - Route Definitions\n     - Request Handlers\n     - View Functions\n     - Authentication (Flask-Login)\n   - Database Models (models.py)\n     - User Model\n     - Project Model\n     - COBOL File Model\n     - Documentation Model\n     - Source and Doc Queue Models\n\n2. **AI Processing Layer**\n   - COBOLDocumentationAgent (agent_fixed.py)\n     - COBOL Analysis Components\n     - Memory Management\n     - Decision-making System\n     - Documentation Planning\n     - Quality Evaluation\n   - LLM Provider Integration\n     - Groq Client\n     - Perplexity Client\n     - Provider Selection Logic\n   - Prompt Management System\n     - System Prompts\n     - User-customizable Prompts\n     - Prompt Templates\n\n3. **Storage Layer**\n   - PostgreSQL Database\n   - Ledger Management System\n     - Source Code Queue\n     - Documentation Queue\n     - SQL Query Interface\n\n4. **Frontend Layer**\n   - Base Template\n   - Component Templates\n     - Document Generator\n     - Modal System\n     - Tooltip System\n   - JavaScript Functionality\n     - Core Application Logic\n     - Document Generation Interface\n     - Ledger Dashboard Management\n     - Tooltip Configuration\n   - Styling\n     - Futuristic Black Theme\n     - IBM Plex Sans Condensed Font\n     - Custom CSS Components\n\n## Features\n\n### Core Functionality\n\n- **Automated Documentation Generation**: Transform complex COBOL code into clear, well-structured documentation\n- **Intelligent Code Analysis**: Identify program structure, divisions, sections, and flow patterns\n- **Interactive Diagrams**: Generate visual representations of code flow and data structures using Mermaid\n- **Multiple Documentation Formats**: Technical documentation for developers and simplified explanations for non-technical stakeholders\n- **Translation Support**: Generate documentation in multiple languages\n\n### Advanced Capabilities\n\n```mermaid\nsequenceDiagram\n    participant User as User\n    participant WebApp as Web Interface\n    participant Agent as Documentation Agent\n    participant LLM as LLM Provider\n    participant Parser as COBOL Parser\n    participant DB as Database\n    \n    User->>WebApp: Upload COBOL code\n    WebApp->>Agent: Process code\n    Agent->>Parser: Parse structure\n    Parser-->>Agent: Return structured data\n    \n    Agent->>LLM: Send for analysis\n    Note over LLM: Process with context\n    LLM-->>Agent: Return analysis\n    \n    Agent->>Agent: Generate diagrams\n    Agent->>Agent: Format documentation\n    \n    Agent-->>WebApp: Return documentation\n    WebApp-->>User: Display documentation\n    Agent->>DB: Store in ledger\n    \n    User->>WebApp: Request modifications\n    WebApp->>Agent: Modify documentation\n    Agent->>LLM: Refine content\n    LLM-->>Agent: Return refined content\n    Agent-->>WebApp: Return updated docs\n    WebApp-->>User: Display updated docs\n```\n\n- **Autonomous Agent System**: Uses advanced LLM capabilities to make intelligent decisions during code analysis\n- **Ledger-based Storage**: Efficient database storage system for managing large documents\n- **Observability Integration**: Monitors AI operations with traceable decision-making processes\n- **Model Context Protocol (MCP)**: Provides enriched explanations with external knowledge\n- **Multi-LLM Provider Support**: Integrates with Perplexity and Groq for AI-powered analysis\n\n### User Interface\n\n- **Futuristic Black Theme**: Modern dark UI with IBM Plex Sans Condensed font\n- **Interactive Components**: Tooltips, modals, and dynamic content loading\n- **Responsive Design**: Works on desktop and mobile devices\n- **Database Status Indicators**: Real-time connection status monitoring\n\n## System Architecture\n\nThe application follows a traditional web application architecture with the following components:\n\n- **Backend**: Flask-based Python application handling requests, processing COBOL code, and managing user data\n- **Database**: PostgreSQL for storing user accounts, projects, source code, and generated documentation \n- **LLM Integration**: Multiple LLM providers integrated for AI-powered code analysis\n- **Frontend**: Client-side interface using vanilla JavaScript, HTML, CSS with Bootstrap\n- **Observability**: Integration with monitoring and tracing tools\n\n```mermaid\ngraph TD\n    A[Web Interface] <--> B[Flask Backend]\n    B <--> C[PostgreSQL Database]\n    B --> D[Autonomous AI Agent]\n    D --> E[LLM Providers]\n    \n    classDef frontend fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef backend fill:#bbf,stroke:#333,stroke-width:2px;\n    classDef database fill:#bfb,stroke:#333,stroke-width:2px;\n    classDef agent fill:#fbf,stroke:#333,stroke-width:2px;\n    classDef external fill:#fbb,stroke:#333,stroke-width:2px;\n    \n    class A frontend;\n    class B backend;\n    class C database;\n    class D agent;\n    class E external;\n```\n\n## Key Components\n\n### Backend Components\n\n- **Flask Application**: Core application setup, routing, authentication, and API management\n- **COBOL Processor**: Parses COBOL code to identify divisions, sections, paragraphs and other structures\n- **Documentation Generator**: Converts structured COBOL analysis into comprehensive documentation\n- **Autonomous Agent**: Manages complex documentation tasks with observability and memory capabilities\n- **LLM Integration**: Provider-agnostic interface with specific clients for Perplexity and Groq\n- **Prompt Management**: System for managing and customizing prompts for LLM interactions\n- **Ledger System**: Database-efficient storage system for tracking source code and documentation\n\n### Database Models\n\n- **User Model**: Stores user authentication information and links to projects\n- **Project Model**: Represents a documentation project containing multiple COBOL files\n- **CobolFile Model**: Stores information about a COBOL file and links to documentation\n- **Documentation Model**: Stores generated documentation with markdown content\n- **Source and Doc Queue Models**: Manage the ledger system for efficient storage\n\n#### Data Model Relationship Diagram\n\n```mermaid\nerDiagram\n    User ||--o{ Project : owns\n    User ||--o{ SourceCodeQueue : uploads\n    User ||--o{ DocGenerated : accesses\n    \n    Project ||--o{ CobolFile : contains\n    CobolFile ||--o| Documentation : generates\n    \n    SourceCodeQueue ||--|| SourceCodeContent : stores\n    SourceCodeQueue ||--o{ DocGenerated : produces\n    \n    User {\n        int id PK\n        string username\n        string email\n        string password_hash\n        datetime created_at\n    }\n    \n    Project {\n        int id PK\n        string name\n        text description\n        datetime created_at\n        datetime updated_at\n        int user_id FK\n    }\n    \n    CobolFile {\n        int id PK\n        string filename\n        text content\n        string program_id\n        datetime created_at\n        datetime updated_at\n        int project_id FK\n    }\n    \n    Documentation {\n        int id PK\n        text content\n        string language\n        datetime created_at\n        datetime updated_at\n        int cobol_file_id FK\n    }\n    \n    SourceCodeQueue {\n        int id PK\n        string source_id UK\n        string timestamp\n        string source_language\n        string input_source\n        string source_name\n        string status\n        int user_id FK\n        datetime created_at\n    }\n    \n    SourceCodeContent {\n        int id PK\n        string source_id FK\n        text content\n    }\n    \n    DocGenerated {\n        int id PK\n        string result_doc_id UK\n        string result_doc_status\n        string doc_timestamp\n        string doc_source_code_id FK\n        string status\n        text doc_content\n        int user_id FK\n        string in_language\n        datetime created_at\n    }\n```\n\n### Frontend Components\n\n- **Document Generator Component**: Reusable interface for submitting COBOL code\n- **Ledger Dashboard**: Management interface for tracking source code and documentation\n- **Modal System**: Dynamic content loading for interactive user experience\n- **Tooltip System**: Contextual help throughout the application\n- **Markdown and Mermaid Rendering**: Interactive documentation display with diagrams\n\n## User Workflow\n\n```mermaid\ngraph LR\n    A[Authentication] --> B[Source Code Input]\n    B --> C[Configuration]\n    C --> D[Processing]\n    D --> E[Review]\n    E --> F[Management]\n    F --> B\n    \n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#bbf,stroke:#333,stroke-width:2px\n    style C fill:#fbf,stroke:#333,stroke-width:2px\n    style D fill:#fbb,stroke:#333,stroke-width:2px\n    style E fill:#bfb,stroke:#333,stroke-width:2px\n    style F fill:#ffb,stroke:#333,stroke-width:2px\n```\n\n1. **Authentication**: Register or log in to access the system\n2. **Source Code Input**: Upload a COBOL file or paste code directly\n3. **Configuration**: Select LLM provider, model, and documentation options\n4. **Processing**: Submit code for analysis and wait for processing to complete\n5. **Review**: View generated documentation with interactive diagrams\n6. **Management**: Access previously generated documentation from the ledger system\n\n## Technical Implementation\n\n### COBOL Analysis Process\n\n```mermaid\ngraph TD\n    %% Main Input\n    input[COBOL Source Code] --> parser\n    \n    %% Parsing Subgraph\n    subgraph parsing[Parsing & Structure Identification]\n        parser[COBOL Parser] --> divisions\n        divisions[Division Detector] --> sections\n        sections[Section Analyzer] --> paragraphs\n        paragraphs[Paragraph Extractor] --> procedures\n        procedures[Procedure Mapping]\n    end\n    \n    %% Data Analysis Subgraph\n    subgraph data_analysis[Data Division Analysis]\n        procedures --> variables\n        variables[Variable Extraction] --> data_types\n        data_types[Data Type Analysis] --> relationships\n        relationships[Data Relationships]\n    end\n    \n    %% Procedural Analysis Subgraph\n    subgraph proc_analysis[Procedure Division Analysis]\n        procedures --> control_flow\n        control_flow[Control Flow Analysis] --> calls\n        calls[CALL Statement Analysis] --> conditionals\n        conditionals[Conditional Logic Mapping]\n    end\n    \n    %% Diagram Generation\n    data_analysis --> diagram_gen\n    proc_analysis --> diagram_gen\n    diagram_gen[Diagram Generator] --> visualization\n    \n    %% Output\n    visualization[Visualizations] --> structured_result\n    structured_result[Structured Analysis Result]\n    \n    %% Styles\n    classDef input fill:#f9f,stroke:#333,stroke-width:2px\n    classDef process fill:#bbf,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    classDef subgraph_style fill:#f0f0f0,stroke:#999,stroke-width:1px\n    \n    class input input\n    class parser,divisions,sections,paragraphs,procedures,variables,data_types,relationships,control_flow,calls,conditionals,diagram_gen,visualization process\n    class structured_result output\n    class parsing,data_analysis,proc_analysis subgraph_style\n```\n\n1. **Parsing**: Extract structure from raw COBOL code\n2. **Division Identification**: Locate and categorize code divisions\n3. **Procedural Analysis**: Map program flow and dependencies\n4. **Data Structure Mapping**: Identify and document data elements\n5. **Diagram Generation**: Create visual representations with Mermaid\n\n### Documentation Generation\n\n```mermaid\nflowchart TD\n    A[Structured Analysis] --> B[Initial Structure Creation]\n    B --> C[Technical Content Generation]\n    C --> D[Non-Technical Translation]\n    D --> E[Diagram Integration]\n    E --> F[MCP Enhancement]\n    F --> G[Complete Documentation]\n    \n    classDef input fill:#f9f,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    classDef process fill:#bbf,stroke:#333,stroke-width:2px\n    \n    class A input\n    class B,C,D,E,F process\n    class G output\n```\n\n1. **Initial Structure Creation**: Organize documentation sections based on code structure\n2. **Technical Content Generation**: Produce developer-focused explanations\n3. **Non-Technical Translation**: Create business-user friendly documentation\n4. **Diagram Integration**: Embed interactive diagrams in appropriate sections\n5. **MCP Enhancement**: Add enriched explanations with external knowledge\n\n### Database Management\n\n1. **Source Queue**: Efficiently store and manage uploaded code\n2. **Documentation Queue**: Store and track generated documentation\n3. **User Association**: Link documents to specific users and projects\n4. **Status Tracking**: Monitor processing state of documents\n5. **SQL Interface**: Built-in tools for database query and management\n\n## System Requirements\n\n- **Python 3.8+**: Core runtime environment\n- **PostgreSQL**: Database for persistent storage\n- **Flask Framework**: Web application framework\n- **Gunicorn**: WSGI HTTP server for production\n- **External API Keys**: Access to LLM provider services (Perplexity, Groq)\n\n## Security Considerations\n\n- **Authentication**: User account management with secure password handling\n- **API Key Management**: Secure storage of external service credentials\n- **CSRF Protection**: Prevention of cross-site request forgery attacks\n- **Database Security**: Parameterized queries and input validation\n- **Error Handling**: Secure error reporting without sensitive information disclosure\n\n## System Variables and Environment Configuration\n\n### Environment Variables\n| Variable | Purpose | Used By |\n|----------|---------|---------|\n| `DATABASE_URL` | PostgreSQL connection string | app.py, utils/ledger_sql.py |\n| `PERPLEXITY_API_KEY` | Authentication for Perplexity API | utils/perplexity_client.py |\n| `GROQ_API_KEY` | Authentication for Groq API | utils/groq_client.py |\n| `PGDATABASE` | PostgreSQL database name | utils/ledger_sql.py |\n| `PGUSER` | PostgreSQL username | utils/ledger_sql.py |\n| `PGPASSWORD` | PostgreSQL password | utils/ledger_sql.py |\n| `PGHOST` | PostgreSQL host | utils/ledger_sql.py |\n| `PGPORT` | PostgreSQL port | utils/ledger_sql.py |\n| `SESSION_SECRET` | Flask session encryption key | app.py |\n| `FLASK_ENV` | Flask environment (development/production) | app.py |\n| `FLASK_DEBUG` | Flask debug mode enablement | app.py |\n\n### User Settings\n| Setting | Purpose | Default |\n|---------|---------|---------|\n| `llm_provider` | LLM provider selection (groq/perplexity) | \"groq\" |\n| `llm_model` | Model name for selected provider | \"llama-3.3-70b-versatile\" |\n| `audience` | Target audience for documentation | \"technical\" |\n| `detail_level` | Documentation detail level | \"high\" |\n| `documentation_style` | Style of documentation | \"academic\" |\n| `tooltip_delay` | Tooltip display delay in ms | 1000 |\n| `tooltip_opacity` | Tooltip background opacity | 0.9 |\n| `tooltip_font_size` | Tooltip text size | 6 |\n| `tooltip_x_offset` | Tooltip horizontal offset | 10 |\n| `tooltip_y_offset` | Tooltip vertical offset | 10 |\n\n## Detailed Component Architecture\n\n```mermaid\ngraph TD\n    %% Main Application Components\n    app[Flask Application]\n    models[Database Models]\n    agent[COBOL Documentation Agent]\n    db[(PostgreSQL Database)]\n    \n    %% LLM Provider Components\n    llm_selector{LLM Provider Selector}\n    perplexity[Perplexity API]\n    groq[Groq API]\n    \n    %% Processing Components\n    cobol_parser[COBOL Parser]\n    doc_gen[Documentation Generator]\n    mermaid[Mermaid Diagrams]\n    \n    %% Storage Components\n    ledger[Ledger Management]\n    ledger_sql[SQL Operations]\n    \n    %% Services\n    prompt_mgr[Prompt Management]\n    observability[Observability System]\n    \n    %% UI Components\n    ui_base[Base UI Template]\n    ui_docgen[Document Generator UI]\n    ui_ledger[Ledger Dashboard UI]\n    \n    %% JS Components\n    js_app[Core JavaScript]\n    js_docgen[Document Generator JS]\n    js_tooltips[Tooltip System]\n    js_ledger[Ledger Dashboard JS]\n    \n    %% Component Relationships\n    app --> models\n    app --> agent\n    app --> db\n    app --> ledger\n    app --> ui_base\n    app --> observability\n    \n    agent --> llm_selector\n    agent --> cobol_parser\n    agent --> doc_gen\n    agent --> prompt_mgr\n    \n    llm_selector --> perplexity\n    llm_selector --> groq\n    \n    doc_gen --> mermaid\n    \n    ledger --> ledger_sql\n    ledger --> models\n    ledger_sql --> db\n    models --> db\n    \n    ui_base --> ui_docgen\n    ui_base --> ui_ledger\n    ui_base --> js_app\n    \n    ui_docgen --> js_docgen\n    ui_ledger --> js_ledger\n    \n    js_app --> js_tooltips\n    js_docgen --> app\n    js_ledger --> app\n    \n    %% Styles\n    classDef application fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef database fill:#bfb,stroke:#333,stroke-width:2px;\n    classDef service fill:#bbf,stroke:#333,stroke-width:2px;\n    classDef ui fill:#fbf,stroke:#333,stroke-width:2px;\n    classDef code fill:#ffb,stroke:#333,stroke-width:2px;\n    classDef api fill:#fbb,stroke:#333,stroke-width:2px;\n    \n    class app,agent application;\n    class db,models,ledger database;\n    class llm_selector,prompt_mgr,observability,ledger_sql service;\n    class ui_base,ui_docgen,ui_ledger ui;\n    class js_app,js_docgen,js_tooltips,js_ledger code;\n    class perplexity,groq,cobol_parser,doc_gen,mermaid api;\n```\n\n### LLM Provider Selection Flow\n\n```mermaid\nflowchart TD\n    start[Start] --> check_pref{Check User Preference}\n    check_pref -->|Perplexity| check_perp{Perplexity API Key?}\n    check_pref -->|Groq| check_groq{Groq API Key?}\n    check_perp -->|Yes| use_perp[Use Perplexity]\n    check_perp -->|No| fallback{Check Fallback}\n    check_groq -->|Yes| use_groq[Use Groq]\n    check_groq -->|No| fallback\n    fallback -->|Groq API Available| use_groq\n    fallback -->|Neither Available| error[Show API Key Error]\n    \n    use_perp --> model_perp{Select Model}\n    use_groq --> model_groq{Select Model}\n    \n    model_perp -->|User Selection| perp_models[Perplexity Models:<br/>llama-3.1-sonar-small-128k-online<br/>llama-3.1-sonar-large-128k-online<br/>llama-3.1-sonar-huge-128k-online]\n    model_groq -->|User Selection| groq_models[Groq Models:<br/>llama-3.3-70b-versatile<br/>llama3-8b-8192<br/>llama3-70b-8192<br/> and others]\n    \n    perp_models --> call_api[Call LLM API]\n    groq_models --> call_api\n    \n    style start fill:#f9f,stroke:#333,stroke-width:2px\n    style use_perp,use_groq fill:#bfb,stroke:#333,stroke-width:2px\n    style error fill:#fbb,stroke:#333,stroke-width:2px\n    style check_pref,check_perp,check_groq,fallback,model_perp,model_groq fill:#bbf,stroke:#333,stroke-width:2px\n    style perp_models,groq_models fill:#fbf,stroke:#333,stroke-width:1px\n    style call_api fill:#ffb,stroke:#333,stroke-width:2px\n```\n\n## Recent Bugfixes and Improvements\n\n### Form Validation in Document Generator\n\nThe document generator component had an issue with form validation where it would incorrectly show an error message \"Please provide COBOL code either by pasting it or uploading a file\" even when a file was actually uploaded. This was fixed by:\n\n1. Improving the validation logic in `document-generator.js` to properly check for file input elements\n2. Adding direct DOM access to verify file uploads when FormData API doesn't report them correctly\n3. Adding additional logging to help diagnose validation issues in the future\n\n```javascript\n// Enhanced file validation in document-generator.js\nvalidateForm(formData) {\n    // Check if any code is provided\n    const code = formData.get('cobolCode') || formData.get('code');\n    const file = formData.get('cobolFile') || formData.get('file');\n    \n    // Check if we have a file input element\n    const fileInputId = `cobolFile_${this.formId}` || `file_${this.formId}`;\n    const fileInput = document.getElementById(fileInputId);\n    \n    // If file input has files, consider it valid regardless of formData\n    if (fileInput && fileInput.files && fileInput.files.length > 0) {\n        console.log('File validation: Valid file found in input element', fileInput.files[0].name);\n        return true;\n    }\n    \n    // Otherwise check formData\n    if (!code && (!file || file.size === 0)) {\n        console.log('Form validation failed: No code or file provided');\n        // Show error message...\n        return false;\n    }\n    \n    return true;\n}\n```\n\n### Code Analysis and Transformation Flow\n\n```mermaid\ngraph TB\n    subgraph input[Input Phase]\n        cobol[COBOL Code] --> parse[Parse Code]\n    end\n    \n    subgraph analysis[Analysis Phase]\n        parse --> structure[Identify Structure]\n        structure --> divisions[Extract Divisions]\n        divisions --> sections[Identify Sections]\n        sections --> paragraphs[Map Paragraphs]\n        paragraphs --> dataItems[Extract Data Items]\n        paragraphs --> controlFlow[Map Control Flow]\n    end\n    \n    subgraph llm[LLM Processing]\n        controlFlow --> prompt[Create LLM Prompt]\n        dataItems --> prompt\n        prompt --> llmProcess[Process with LLM]\n        llmProcess --> explanation[Generate Explanations]\n        explanation --> technical[Technical Documentation]\n        explanation --> business[Business Documentation]\n    end\n    \n    subgraph visualization[Visualization]\n        technical --> diagrams[Generate Diagrams]\n        business --> diagrams\n        diagrams --> mermaid[Mermaid Diagrams]\n        diagrams --> flowcharts[Flow Charts]\n        diagrams --> dataModels[Data Models]\n    end\n    \n    subgraph output[Final Output]\n        technical --> markdown[Markdown Document]\n        business --> markdown\n        mermaid --> markdown\n        flowcharts --> markdown\n        dataModels --> markdown\n        markdown --> result[Complete Documentation]\n    end\n    \n    classDef inputPhase fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef analysisPhase fill:#bbf,stroke:#333,stroke-width:2px;\n    classDef llmPhase fill:#fbf,stroke:#333,stroke-width:2px;\n    classDef vizPhase fill:#ffb,stroke:#333,stroke-width:2px;\n    classDef outputPhase fill:#bfb,stroke:#333,stroke-width:2px;\n    \n    class input,cobol,parse inputPhase;\n    class analysis,structure,divisions,sections,paragraphs,dataItems,controlFlow analysisPhase;\n    class llm,prompt,llmProcess,explanation,technical,business llmPhase;\n    class visualization,diagrams,mermaid,flowcharts,dataModels vizPhase;\n    class output,markdown,result outputPhase;\n```\n\n### Duplicate Component Import in Ledger Dashboard\n\nThe ledger dashboard had an issue with duplicate imports of the document_generator component, causing a floating form to appear on the page. This was fixed by:\n\n1. Removing the duplicate import in `templates/ledger/dashboard.html`\n2. Updating the import to use `with context` to ensure proper variable passing\n3. Streamlining the template structure for better maintainability\n\n```html\n<!-- Before: Duplicate imports -->\n{% from \"components/document_generator.html\" import document_generator %}\n<!-- Later in the file -->\n{% from \"components/document_generator.html\" import document_generator with context %}\n\n<!-- After: Single import with context -->\n{% from \"components/document_generator.html\" import document_generator with context %}\n```\n\n### Tooltip Configuration Error Handling\n\nThe tooltip system was experiencing errors when configuration settings were undefined, leading to JavaScript console errors. This was fixed by:\n\n1. Adding default settings for tooltips in case configuration is missing\n2. Implementing better error handling throughout the tooltip system\n3. Adding fallback behavior to prevent \"Cannot read properties of undefined\" errors\n\n## Code-Coupled Documentation System\n\nThe documentation system implements Swimm's advanced approach to code-coupled documentation, ensuring technical documentation remains synchronized with code changes through intelligent linking and version control integration.\n\n```mermaid\ngraph TD\n    subgraph static_analysis[Static Analysis Foundation]\n        code[COBOL Code] --> parser[Tree-sitter Parser]\n        parser --> ast[Abstract Syntax Tree]\n        ast --> mapper[Code Mapper]\n        mapper --> deps[Dependency Analysis]\n        mapper --> rules[Business Rule Extraction]\n        mapper --> context[Context Retrieval System]\n    end\n    \n    subgraph code_coupling[Code-Coupling Implementation]\n        deps --> references[Live Code References]\n        rules --> tokens[Smart Tokens]\n        context --> format[.swm File Format]\n        references --> git[Git Integration]\n        tokens --> git\n        format --> git\n    end\n    \n    subgraph ai_generation[AI Documentation Generation]\n        git --> pipeline[Three-Stage Pipeline]\n        pipeline --> analysis[Analysis Stage]\n        pipeline --> retrieval[Retrieval Stage]\n        pipeline --> generation[Generation Stage]\n        analysis --> anchoring[Code Anchoring]\n        retrieval --> anchoring\n        anchoring --> pr2doc[PR2Doc Feature]\n        anchoring --> snippets[Snippets2Doc Feature]\n    end\n    \n    subgraph auto_sync[Auto-Sync System]\n        pr2doc --> diff[Diff Analysis]\n        snippets --> diff\n        diff --> cicd[CI/CD Integration]\n        diff --> notify[Developer Notifications]\n        cicd --> status[Documentation Status]\n        notify --> status\n    end\n    \n    classDef analysis fill:#f9f,stroke:#333,stroke-width:2px\n    classDef coupling fill:#bbf,stroke:#333,stroke-width:2px\n    classDef generation fill:#fbf,stroke:#333,stroke-width:2px\n    classDef sync fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class static_analysis,code,parser,ast,mapper,deps,rules,context analysis\n    class code_coupling,references,tokens,format,git coupling\n    class ai_generation,pipeline,analysis,retrieval,generation,anchoring,pr2doc,snippets generation\n    class auto_sync,diff,cicd,notify,status sync\n```\n\n### Static Analysis Foundation\n\nThe system builds upon a robust static analysis engine that provides the foundational understanding of code structure:\n\n- **Code Mapping**: Utilizes Tree-sitter with custom queries to create a comprehensive map of the codebase\n- **Dependency Analysis**: Identifies relationships between programs, copybooks, and external systems\n- **Business Rule Extraction**: Automatically identifies and extracts business logic, especially from legacy systems\n- **Context-Aware Retrieval**: Implements an intelligent system for retrieving relevant code context\n\n```python\nclass CodeAnalyzer:\n    def extract_business_rules(self, codebase_path):\n        \"\"\"\n        Extract business rules from COBOL codebase\n        \n        Args:\n            codebase_path: Path to COBOL source files\n            \n        Returns:\n            JSON structure with rule locations and descriptions\n        \"\"\"\n        # Legacy system pattern matching\n        rules = []\n        \n        # Look for code comments indicating business rules\n        # Example: # 1987 FDIC guideline\n        \n        # Detect conditional logic patterns\n        # Example: IF LOAN-AMT > 500000 MOVE 'HIGH' TO RISK-RATING\n        \n        return rules\n```\n\n### Code-Coupling Implementation\n\nDocumentation is tightly coupled to code through a sophisticated token system:\n\n- **Live Code References**: Smart references that update when code changes\n- **Markdown-Based Format**: Documentation stored in `.swm` files compatible with standard Markdown\n- **Version Control Integration**: Seamless integration with Git for tracking documentation alongside code\n\n```markdown\n## Risk Assessment Process\n\nThe system implements the following risk assessment rules:\n\n<!-- SWIMM-REF: programs/risk.cbl:42-58 -->\n```cobol\nIF LOAN-AMT > 500000\n   MOVE 'HIGH' TO RISK-RATING  *> 1987 FDIC guideline\nELSE IF LOAN-AMT > 100000\n   MOVE 'MEDIUM' TO RISK-RATING\nELSE\n   MOVE 'LOW' TO RISK-RATING\nEND-IF\n```\n\nThis risk classification follows FDIC guidelines established in 1987.\n```\n\n### AI Documentation Generation\n\nThe system employs a sophisticated AI pipeline for generating high-quality documentation:\n\n- **Three-Stage Pipeline**: Analysis → Retrieval → Generation\n- **Hallucination Prevention**: Code anchoring ensures all documentation is grounded in actual code\n- **PR2Doc Feature**: Automatically generates documentation from pull requests\n- **Snippets2Doc Feature**: Creates comprehensive documentation from code snippets\n\n```python\nclass DocGenerator:\n    def generate_doc(self, code_context, user_query):\n        \"\"\"\n        Generate documentation based on code context and user query\n        \n        Args:\n            code_context: Extracted code context from static analysis\n            user_query: Natural language query about the code\n            \n        Returns:\n            Markdown documentation with embedded code references\n        \"\"\"\n        # Analysis stage - understand the code structure\n        structure = self.analyze_structure(code_context)\n        \n        # Retrieval stage - get relevant context\n        context = self.retrieve_context(structure, user_query)\n        \n        # Generation stage - create documentation\n        documentation = self.generate_with_llm(context, user_query)\n        \n        # Validate against code to prevent hallucinations\n        validated_doc = self.validate_response(documentation, code_context)\n        \n        return validated_doc\n```\n\n### Auto-Sync System\n\nThe system ensures documentation stays in sync with code changes:\n\n- **Diff Analysis**: Automatically analyzes code changes to identify affected documentation\n- **CI/CD Integration**: Integrates with CI/CD pipelines to validate documentation during builds\n- **Developer Notifications**: Alerts developers about documentation that needs updates\n\n```yaml\n# CI/CD Integration Example\nname: Documentation Validation\non: [push, pull_request]\njobs:\n  doc-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check Documentation Sync\n        run: swimm verify\n      - name: Notify on Outdated Docs\n        if: ${{ failure() }}\n        uses: actions/github-script@v6\n        with:\n          script: |\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: '⚠️ Documentation is out of sync with code changes. Please update!'\n            })\n```\n\n## Advanced Enterprise COBOL Analysis Suite\n\nThe Advanced COBOL Analysis functionality extends the system with powerful capabilities for analyzing large-scale COBOL codebases, tracking data lineage, and providing comprehensive documentation for mission-critical mainframe applications.\n\n### Modular Code Analysis Engine\n\n```mermaid\ngraph TB\n    subgraph parsing[Code Parsing]\n        input[Monolithic COBOL] --> parser[Parser Engine]\n        jcl[Embedded JCL] --> parser\n        copybook[Copybook Dependencies] --> parser\n        parser --> structure[Program Structure]\n    end\n    \n    subgraph analysis[Advanced Analysis]\n        structure --> perform[PERFORM Range Analysis] \n        structure --> vars[Global Variable Tracking]\n        structure --> calls[Call Tree Generation]\n        \n        perform --> nest[Nested Control Flow]\n        vars --> prop[Variable Propagation]\n        calls --> exec[EXEC CICS/DB2 Analysis]\n    end\n    \n    subgraph visualization[Visualization]\n        nest --> viz[Visualization Engine]\n        prop --> viz\n        exec --> viz\n        \n        viz --> flow[Control Flow Graphs]\n        viz --> heat[Variable Heatmaps]\n        viz --> matrix[Dependency Matrices]\n    end\n    \n    classDef parsing fill:#f9f,stroke:#333,stroke-width:2px\n    classDef analysis fill:#bbf,stroke:#333,stroke-width:2px\n    classDef visualization fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class parsing parsing\n    class analysis analysis\n    class visualization visualization\n```\n\nThe Modular Code Analysis Engine can process monolithic COBOL codebases exceeding 1 million lines of code, with capabilities to:\n\n- Detect PERFORM range boundaries and nested control flows with up to 5 levels of nesting\n- Map global variable propagation across programs using working-storage sections\n- Auto-generate call trees for programs with embedded EXEC CICS and DB2 SQL statements\n- Process 100,000 lines of code per minute on modern hardware\n\n### Data Lineage Tracker\n\n```mermaid\ngraph LR\n    subgraph sources[Data Sources]\n        vsam[(VSAM Files)]\n        db2[(DB2 Tables)]\n        ims[(IMS Databases)]\n    end\n    \n    subgraph analysis[Lineage Analysis]\n        fd[FD Entries]\n        copybook[Copybooks]\n        \n        vsam --> fd\n        db2 --> copybook\n        ims --> fd\n        \n        fd --> entity[Entity Extraction]\n        copybook --> entity\n        \n        entity --> relations[Relationship Mapping]\n        entity --> usage[Variable Usage Tracking]\n    end\n    \n    subgraph output[Output]\n        relations --> er[ER Diagrams]\n        usage --> flow[Data Flow Maps]\n        \n        er --> doc[Documentation]\n        flow --> doc\n    end\n    \n    classDef sources fill:#f9f,stroke:#333,stroke-width:2px\n    classDef analysis fill:#bbf,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class sources sources\n    class analysis analysis\n    class output output\n```\n\nThe Data Lineage Tracker allows comprehensive mapping of data flows through complex COBOL applications:\n\n- Reverse-engineers relationships from VSAM, DB2, and IMS data sources\n- Automatically generates entity-relationship diagrams from COBOL data divisions\n- Tracks variable usage from input files through computational logic to output reports\n- Flags variables modified in more than three different programs\n\n### AI-Powered Annotation System\n\n```mermaid\nsequenceDiagram\n    participant COBOL as COBOL Program\n    participant Parser as Parser Engine\n    participant AI as Neural Network\n    participant Doc as Documentation\n    \n    COBOL->>Parser: Program Source\n    Parser->>AI: COBOL Paragraphs\n    AI->>AI: Apply Transformer Models\n    AI->>Doc: Business Rule Summaries\n    \n    Parser->>AI: Control Flow Structure\n    AI->>AI: Analyze PERFORM Complexity\n    AI->>Doc: Flag Complex Nesting (>5 levels)\n    \n    Parser->>AI: Variable Modification Data\n    AI->>AI: Analyze Cross-Program Impact\n    AI->>Doc: Generate Warning Annotations\n```\n\nThe AI-Powered Annotation System uses advanced neural networks to enhance documentation:\n\n- Converts COBOL paragraphs into business rule summaries using transformer models\n- Detects and flags undocumented PERFORM cycles exceeding 5 nesting levels\n- Generates warning annotations for variables with complex modification patterns\n- Creates machine-readable JSON schema for program metadata\n\n### Enterprise Integration\n\nThe system seamlessly integrates with enterprise mainframe environments:\n\n- **Mainframe-Native Module**: z/OS-compliant with batch interface for processing PDS libraries\n- **IDE Plugins**: Extensions for VS Code and Eclipse with real-time documentation overlay\n- **Legacy System Adapters**: Support for IMS transaction flows, CICS BMS maps, and DB2 plan binding\n\n### Advanced Visualization\n\n```mermaid\ngraph TD\n    subgraph input[Analysis Input]\n        code[COBOL Code] --> engine[Analysis Engine]\n        jcl[JCL] --> engine\n        db[Database Schemas] --> engine\n    end\n    \n    subgraph visual[Visualization Types]\n        engine --> flow[Control Flow]\n        engine --> heat[Variable Heatmaps]\n        engine --> dep[Dependency Matrices]\n        engine --> er[ER Diagrams]\n    end\n    \n    subgraph output[Interactive Features]\n        flow --> highlight[Path Highlighting]\n        heat --> hotspot[Modification Hotspots]\n        dep --> navigate[Click-through Navigation]\n        er --> drill[Schema Drill-Down]\n        \n        highlight --> export[Export Options]\n        hotspot --> export\n        navigate --> export\n        drill --> export\n        \n        export --> pdf[PDF]\n        export --> json[JSON]\n        export --> html[HTML]\n    end\n    \n    classDef input fill:#f9f,stroke:#333,stroke-width:2px\n    classDef visual fill:#bbf,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class input input\n    class visual visual\n    class output output\n```\n\nThe Advanced Visualization Engine provides interactive diagrams for complex code exploration:\n\n- Dynamic control flow graphs with PERFORM/CALL path highlighting\n- Heatmaps of variable modification points across programs\n- Cross-program dependency matrices with click-through navigation\n- PDF reports with clickable cross-program references\n\n### System Requirements\n\n- **Performance**: Process 100K lines of code per minute on z15 hardware\n- **Rendering**: Generate complex dependency graphs in under 3 seconds (500+ nodes)\n- **Compliance**: Support for IBM Enterprise COBOL 6.3 syntax variants\n\n### Advanced COBOL Metadata Schema\n\n```mermaid\nerDiagram\n    PROGRAM ||--o{ DIVISION : contains\n    DIVISION ||--o{ SECTION : contains\n    SECTION ||--o{ PARAGRAPH : contains\n    PARAGRAPH ||--o{ STATEMENT : contains\n    \n    PROGRAM ||--o{ COPYBOOK : uses\n    COPYBOOK ||--o{ COPYBOOK : inherits\n    \n    PROGRAM ||--o{ VARIABLE : defines\n    VARIABLE ||--o{ MODIFICATION : undergoes\n    VARIABLE ||--o{ REFERENCE : has\n    \n    PROGRAM {\n        string program_id PK\n        string type\n        date last_modified\n        int complexity_score\n        string jcl_job\n    }\n    \n    DIVISION {\n        int division_id PK\n        string name\n        int program_id FK\n    }\n    \n    SECTION {\n        int section_id PK\n        string name\n        int division_id FK\n    }\n    \n    PARAGRAPH {\n        int paragraph_id PK\n        string name\n        int section_id FK\n        int nesting_level\n        int complexity\n    }\n    \n    STATEMENT {\n        int statement_id PK\n        string type\n        string content\n        int paragraph_id FK\n    }\n    \n    COPYBOOK {\n        int copybook_id PK\n        string name\n        string version\n        int parent_id FK\n    }\n    \n    VARIABLE {\n        int variable_id PK\n        string name\n        string data_type\n        int level_number\n        string picture\n        int program_id FK\n        string lifecycle_state\n    }\n    \n    MODIFICATION {\n        int modification_id PK\n        int variable_id FK\n        int program_id FK\n        int paragraph_id FK\n        string operation\n    }\n    \n    REFERENCE {\n        int reference_id PK\n        int variable_id FK\n        int program_id FK\n        int paragraph_id FK\n        string context\n    }\n```\n\nThis comprehensive metadata schema captures the complete structure of COBOL programs including:\n\n- Program structure with divisions, sections, paragraphs, and statements hierarchy\n- Copybook version inheritance relationships to track dependencies\n- Variable lifecycle states (DEFINED/MODIFIED/REFERENCED) across programs\n- Cross-program variable usage and modification patterns\n\n### Validation and Compliance Framework\n\n```mermaid\nflowchart TD\n    subgraph input[Legacy Systems]\n        claims[Claims Processing<br/>40-year-old system]\n        circular[Circular Dependencies<br/>Multi-program chain]\n        mismatch[Schema Mismatch<br/>COBOL vs DB2 DDL]\n    end\n    \n    subgraph validation[Validation Process]\n        claims --> rules[Business Rule<br/>Extraction]\n        circular --> cycle[Circular Dependency<br/>Detection]\n        mismatch --> schema[Schema<br/>Validation]\n        \n        rules --> doc[Documentation<br/>Generation]\n        cycle --> warning[Warning<br/>Annotation]\n        schema --> alert[DDL Mismatch<br/>Alerts]\n    end\n    \n    subgraph output[Compliance Output]\n        doc --> json[JSON Schema<br/>Program Metadata]\n        warning --> pdf[PDF Reports]\n        alert --> html[HTML Reports]\n        \n        json --> ci[CI/CD<br/>Integration]\n        pdf --> ci\n        html --> ci\n    end\n    \n    classDef input fill:#f9f,stroke:#333,stroke-width:2px\n    classDef validation fill:#bbf,stroke:#333,stroke-width:2px\n    classDef output fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class input,claims,circular,mismatch input\n    class validation,rules,cycle,schema,doc,warning,alert validation\n    class output,json,pdf,html,ci output\n```\n\nThe system includes robust validation capabilities for legacy COBOL systems:\n\n- **Business Rule Extraction**: Identifies and documents undocumented business rules in legacy systems\n- **Circular Dependency Detection**: Finds and visualizes multi-program update chains with circular PERFORM dependencies\n- **Schema Validation**: Detects mismatches between COBOL copybooks and actual DB2 DDL specifications\n- **CI/CD Integration**: Produces machine-readable outputs compatible with modern DevOps pipelines\n\n## AI Prompt Engineering for Documentation Generation\n\nThe system uses carefully crafted prompts to generate high-quality, code-anchored documentation:\n\n```mermaid\nsequenceDiagram\n    participant User\n    participant System\n    participant StaticAnalysis\n    participant VectorStore\n    participant LLM\n    \n    User->>System: Request documentation\n    System->>StaticAnalysis: Extract code context\n    StaticAnalysis-->>System: Return analyzed code artifacts\n    System->>VectorStore: Retrieve relevant context\n    VectorStore-->>System: Return matched context\n    \n    System->>LLM: Send structured prompt\n    Note over System,LLM: Documentation Generation Prompt Format\n    LLM-->>System: Generated documentation\n    System->>System: Validate code references\n    System-->>User: Return validated documentation\n```\n\n### Prompt Structure\n\nAll documentation generation uses a consistent prompt structure:\n\n```markdown\n# Documentation Generation Prompt\n\n[Code Context]\n<analyzed_code_artifacts>\n\n[User Request]\n{natural_language_query}\n\n[Response Requirements]\n1. Base response on static analysis context\n2. Cite exact code references using [file:line] notation\n3. Generate markdown with embedded code snippets\n4. Include mermaid diagrams for complex flows\n```\n\nThis structured prompt format ensures:\n\n- **Contextual Awareness**: Documentation is based on actual code analysis\n- **Reference Accuracy**: All citations point to actual code locations\n- **Format Consistency**: Documentation follows standardized Markdown format\n- **Visual Clarity**: Complex relationships are visualized with diagrams\n\n### Verification and Testing\n\n```mermaid\nflowchart TD\n    subgraph testing[Verification Process]\n        unit[Unit Tests] --> coverage[90% Code Coverage]\n        integration[Integration Tests] --> cicd[CI/CD Pipeline]\n        cicd --> checks[Documentation Checks]\n        \n        benchmark[Accuracy Benchmark] --> manual[Manual Documentation]\n        benchmark --> auto[Auto-Generated Docs]\n        \n        security[Security Validation] --> soc2[SOC2 Compliance]\n    end\n    \n    subgraph example[Example Test Cases]\n        test1[Legacy Code Test] --> risk[Risk Algorithm]\n        test2[Sync Test] --> changes[Code Changes]\n        test3[Citation Test] --> accuracy[Reference Accuracy]\n    end\n    \n    classDef testing fill:#f9f,stroke:#333,stroke-width:2px\n    classDef examples fill:#bfb,stroke:#333,stroke-width:2px\n    \n    class testing,unit,integration,cicd,checks,benchmark,manual,auto,security,soc2 testing\n    class example,test1,test2,test3,risk,changes,accuracy examples\n```\n\nThe system includes comprehensive testing and verification:\n\n- **Unit Tests**: Coverage of 90% of code paths\n- **CI/CD Pipeline**: Integrated documentation checks\n- **Accuracy Benchmarks**: Comparison against manual documentation\n- **Security Validation**: SOC2 compliance checks\n\nExample verification test:\n\n```python\ndef test_auto_sync():\n    # Arrange\n    test_code = \"def legacy_calculation(x):\\n    return x * 2.5  # Risk factor\"\n    original_doc = \"Implements legacy risk algorithm [file:calc.py:15]\"\n    modified_code = \"def updated_calculation(x):\\n    return x * 3.0  # Updated risk factor\"\n    \n    # Act\n    sync_status = documentation_sync.check(original_doc, modified_code)\n    \n    # Assert\n    assert sync_status == \"OUTDATED\"\n    assert \"risk factor change\" in documentation_sync.get_reason()\n```\n\n## Future Enhancements\n\n- **Additional Language Support**: Expand beyond COBOL to Assembler, PL/I, and other mainframe languages\n- **Collaborative Features**: Team-based documentation review and editing workflows\n- **Enhanced Diagrams**: More sophisticated visualizations of complex code structures and relationships\n- **Documentation Export**: Additional export formats including PDF, HTML, and interactive web formats\n- **Advanced Integration**: Deeper connections with code repositories, CI/CD pipelines, and IDE environments\n- **Real-time Collaboration**: Simultaneous editing and commenting on documentation with presence awareness","size_bytes":47972},"attached_assets/PRODUCTION_DEPLOYMENT.md":{"content":"# COBOL Documentation Generator - Production Deployment Guide\n\nThis guide provides step-by-step instructions for deploying the COBOL Documentation Generator in a production environment.\n\n## System Requirements\n\n- Linux-based server (Ubuntu 20.04 LTS or newer recommended)\n- Python 3.8+ \n- PostgreSQL 12+ database\n- Nginx (for reverse proxy)\n- Supervisor or systemd (for process management)\n- 2GB RAM minimum, 4GB recommended\n- 20GB disk space minimum\n\n## Step 1: Prepare the Server\n\n1. Update the system packages:\n   ```bash\n   sudo apt update && sudo apt upgrade -y\n   ```\n\n2. Install required dependencies:\n   ```bash\n   sudo apt install -y python3 python3-pip python3-venv postgresql nginx supervisor\n   ```\n\n3. Create a dedicated user for the application:\n   ```bash\n   sudo useradd -m -s /bin/bash cobol_docs\n   ```\n\n## Step 2: Set Up PostgreSQL Database\n\n1. Create a database and user:\n   ```bash\n   sudo -u postgres psql\n   ```\n\n2. Inside the PostgreSQL shell:\n   ```sql\n   CREATE DATABASE cobol_docs;\n   CREATE USER cobol_user WITH ENCRYPTED PASSWORD 'secure_password';\n   GRANT ALL PRIVILEGES ON DATABASE cobol_docs TO cobol_user;\n   \\q\n   ```\n\n## Step 3: Clone and Configure Application\n\n1. Clone the repository:\n   ```bash\n   sudo -u cobol_docs git clone https://github.com/your-repo/cobol-documentation-generator.git /home/cobol_docs/app\n   ```\n\n2. Set up a virtual environment:\n   ```bash\n   sudo -u cobol_docs bash -c 'cd /home/cobol_docs/app && python3 -m venv venv'\n   ```\n\n3. Install dependencies:\n   ```bash\n   sudo -u cobol_docs bash -c 'cd /home/cobol_docs/app && source venv/bin/activate && pip install -r requirements.txt'\n   ```\n\n4. Create environment file:\n   ```bash\n   sudo -u cobol_docs bash -c 'cat > /home/cobol_docs/app/.env << EOL\n   DATABASE_URL=postgresql://cobol_user:secure_password@localhost/cobol_docs\n   FLASK_SECRET_KEY=your_secure_secret_key\n   MCP_API_KEY=your_mcp_api_key\n   PERPLEXITY_API_KEY=your_perplexity_api_key\n   EOL'\n   ```\n\n## Step 4: Configure Gunicorn\n\n1. Create a Gunicorn configuration file:\n   ```bash\n   sudo -u cobol_docs bash -c 'cat > /home/cobol_docs/app/gunicorn_config.py << EOL\n   bind = \"127.0.0.1:8000\"\n   workers = 4\n   timeout = 120\n   preload_app = True\n   accesslog = \"/home/cobol_docs/app/logs/access.log\"\n   errorlog = \"/home/cobol_docs/app/logs/error.log\"\n   loglevel = \"info\"\n   EOL'\n   ```\n\n2. Create log directory:\n   ```bash\n   sudo -u cobol_docs mkdir -p /home/cobol_docs/app/logs\n   ```\n\n## Step 5: Configure Supervisor\n\n1. Create a Supervisor configuration file:\n   ```bash\n   sudo bash -c 'cat > /etc/supervisor/conf.d/cobol-docs.conf << EOL\n   [program:cobol-docs]\n   command=/home/cobol_docs/app/venv/bin/gunicorn -c /home/cobol_docs/app/gunicorn_config.py main:app\n   directory=/home/cobol_docs/app\n   user=cobol_docs\n   autostart=true\n   autorestart=true\n   stdout_logfile=/home/cobol_docs/app/logs/supervisor_stdout.log\n   stderr_logfile=/home/cobol_docs/app/logs/supervisor_stderr.log\n   environment=PYTHONPATH=\"/home/cobol_docs/app\"\n   EOL'\n   ```\n\n2. Update Supervisor:\n   ```bash\n   sudo supervisorctl reread\n   sudo supervisorctl update\n   sudo supervisorctl start cobol-docs\n   ```\n\n## Step 6: Configure Nginx\n\n1. Create an Nginx configuration file:\n   ```bash\n   sudo bash -c 'cat > /etc/nginx/sites-available/cobol-docs << EOL\n   server {\n       listen 80;\n       server_name your-domain.com;\n   \n       location / {\n           proxy_pass http://127.0.0.1:8000;\n           proxy_set_header Host \\$host;\n           proxy_set_header X-Real-IP \\$remote_addr;\n           proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n           proxy_set_header X-Forwarded-Proto \\$scheme;\n       }\n   }\n   EOL'\n   ```\n\n2. Enable the site and restart Nginx:\n   ```bash\n   sudo ln -s /etc/nginx/sites-available/cobol-docs /etc/nginx/sites-enabled/\n   sudo nginx -t\n   sudo systemctl restart nginx\n   ```\n\n## Step 7: Set Up SSL with Let's Encrypt\n\n1. Install Certbot:\n   ```bash\n   sudo apt install -y certbot python3-certbot-nginx\n   ```\n\n2. Obtain and configure SSL certificate:\n   ```bash\n   sudo certbot --nginx -d your-domain.com\n   ```\n\n## Step 8: Database Backup Configuration\n\n1. Create a backup script:\n   ```bash\n   sudo -u cobol_docs bash -c 'cat > /home/cobol_docs/backup.sh << EOL\n   #!/bin/bash\n   TIMESTAMP=\\$(date +\"%Y%m%d_%H%M%S\")\n   BACKUP_DIR=\"/home/cobol_docs/backups\"\n   mkdir -p \\$BACKUP_DIR\n   \n   # Database backup\n   pg_dump -U cobol_user cobol_docs > \\$BACKUP_DIR/cobol_docs_\\$TIMESTAMP.sql\n   \n   # Compress the backup\n   gzip \\$BACKUP_DIR/cobol_docs_\\$TIMESTAMP.sql\n   \n   # Remove backups older than 30 days\n   find \\$BACKUP_DIR -name \"cobol_docs_*.sql.gz\" -type f -mtime +30 -delete\n   EOL'\n   ```\n\n2. Make the script executable:\n   ```bash\n   sudo chmod +x /home/cobol_docs/backup.sh\n   ```\n\n3. Set up a cron job for daily backups:\n   ```bash\n   sudo -u cobol_docs bash -c '(crontab -l 2>/dev/null; echo \"0 2 * * * /home/cobol_docs/backup.sh\") | crontab -'\n   ```\n\n## Step 9: Monitoring and Logging\n\n1. Install and configure a monitoring tool like Prometheus or Datadog:\n   ```bash\n   # Example for Prometheus Node Exporter\n   sudo apt install -y prometheus-node-exporter\n   sudo systemctl enable prometheus-node-exporter\n   sudo systemctl start prometheus-node-exporter\n   ```\n\n2. Set up log rotation:\n   ```bash\n   sudo bash -c 'cat > /etc/logrotate.d/cobol-docs << EOL\n   /home/cobol_docs/app/logs/*.log {\n       daily\n       missingok\n       rotate 14\n       compress\n       delaycompress\n       notifempty\n       create 0640 cobol_docs cobol_docs\n       sharedscripts\n       postrotate\n           supervisorctl restart cobol-docs\n       endscript\n   }\n   EOL'\n   ```\n\n## Step 10: Security Hardening\n\n1. Configure firewall:\n   ```bash\n   sudo ufw allow ssh\n   sudo ufw allow http\n   sudo ufw allow https\n   sudo ufw enable\n   ```\n\n2. Set up fail2ban:\n   ```bash\n   sudo apt install -y fail2ban\n   sudo systemctl enable fail2ban\n   sudo systemctl start fail2ban\n   ```\n\n## Routine Maintenance Tasks\n\n### Application Updates\n\n1. Pull latest code:\n   ```bash\n   sudo -u cobol_docs bash -c 'cd /home/cobol_docs/app && git pull'\n   ```\n\n2. Update dependencies:\n   ```bash\n   sudo -u cobol_docs bash -c 'cd /home/cobol_docs/app && source venv/bin/activate && pip install -r requirements.txt'\n   ```\n\n3. Restart the application:\n   ```bash\n   sudo supervisorctl restart cobol-docs\n   ```\n\n### Database Maintenance\n\n1. Run regular vacuum operations:\n   ```bash\n   sudo -u postgres psql -d cobol_docs -c \"VACUUM ANALYZE;\"\n   ```\n\n### SSL Certificate Renewal\n\nLet's Encrypt certificates automatically renew via a cron job installed by Certbot.","size_bytes":6656},"attached_assets/QUICK_START.md":{"content":"# COBOL Documentation Generator - Quick Start Guide for Replit\n\n## Quick Start Guide\n\n### Step 1: Fork/Clone the Replit Project\n- Fork this Replit project to your account to get started immediately\n\n### Step 2: Set Up Environment Secrets\n1. Click on the \"Secrets\" tool in the Replit sidebar (lock icon)\n2. Add the following required secrets:\n   - `MCP_API_KEY` - Your Model Context Protocol API key\n   - `PERPLEXITY_API_KEY` - Your Perplexity API key\n   - `FLASK_SECRET_KEY` - A secure random string for Flask sessions\n   - (Optional) `OPENAI_API_KEY` - If using OpenAI as a backup provider\n\n### Step 3: Start the Application\n1. The application is configured to start automatically on Replit\n2. If needed, restart the application by clicking the Run button at the top\n3. The application will automatically connect to the provided PostgreSQL database\n\n### Step 4: Access the Web Interface\n1. Click on the \"Webview\" tab to access the web interface\n2. Register a new user account via the registration form\n3. Log in with your newly created credentials\n\n### Step 5: Start Using the Application\n1. Create a new COBOL documentation project\n2. Upload COBOL files or paste COBOL code directly\n3. Generate comprehensive documentation with the built-in AI tools\n4. Translate or download the documentation as needed\n\n## Troubleshooting Replit-Specific Issues\n\n### Database Connection\n- The application automatically uses the Replit-provided PostgreSQL database\n- No additional configuration is needed for database connectivity\n\n### API Integration\n- If you see API errors, verify that you've correctly added the required secrets\n- Ensure the API keys have the necessary permissions and are not expired\n\n### Application Performance\n- If the application seems slow, consider:\n  1. Reducing the size of COBOL files being processed\n  2. Processing files one at a time\n  3. Using the \"Technical\" documentation mode for faster generation\n\n## Additional Resources\n\n- For detailed instructions, refer to the STEP_BY_STEP_GUIDE.md file\n- For complete setup information, see the SETUP_GUIDE.md file\n- For API integration details, consult the source code in the `utils` directory","size_bytes":2157},"attached_assets/README.md":{"content":"# COBOL Documentation Generator\n\n## Overview\n\nThis project is an AI-powered COBOL code documentation generator that automatically analyzes COBOL source code and produces comprehensive, structured documentation with diagrams and plain-English explanations. It features an agentic system with observability capabilities and uses the Model Context Protocol (MCP) to enrich documentation with external knowledge.\n\n![COBOL Documentation Generator](static/img/preview.png)\n\n## Key Features\n\n- **Automated COBOL Analysis**: Parses and analyzes COBOL code structure, identifying divisions, sections, and key elements\n- **AI-Powered Documentation**: Generates comprehensive documentation using Perplexity API\n- **Visual Elements**: Creates diagrams and flowcharts to visualize program flow and relationships\n- **Multi-Context Prompting**: Uses MCP to provide context-rich explanations for technical and non-technical users\n- **Agentic System**: Employs an autonomous agent with observability to optimize documentation quality\n- **Multiple Languages**: Supports translation of documentation to various languages\n- **Modern UI**: Features a black futuristic theme with IBM Plex Sans font\n\n## Technology Stack\n\n- **Backend**: Flask (Python)\n- **Database**: PostgreSQL\n- **AI Integration**: Perplexity API, OpenAI API (optional)\n- **Observability**: Arize Phoenix, Senso API\n- **External Knowledge**: Model Context Protocol (MCP)\n- **Frontend**: Vanilla JavaScript, HTML, CSS\n\n## Documentation\n\nFor detailed information on setting up and using this application, please refer to:\n\n- [Quick Start Guide](QUICK_START.md) - Get started quickly on Replit\n- [Step-by-Step Guide](STEP_BY_STEP_GUIDE.md) - Detailed instructions for using the application\n- [Setup Guide](SETUP_GUIDE.md) - Complete setup instructions for local development\n\n## Prerequisites\n\n- Python 3.8 or higher\n- PostgreSQL database\n- Required API keys:\n  - MCP_API_KEY\n  - PERPLEXITY_API_KEY\n  - (Optional) OPENAI_API_KEY\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.","size_bytes":2066},"attached_assets/SETUP_GUIDE.md":{"content":"# COBOL Documentation Generator - Setup Guide\n\n## Prerequisites\n\n- Python 3.8 or higher\n- PostgreSQL database\n- Required API keys:\n  - MCP_API_KEY (for Model Context Protocol integration)\n  - PERPLEXITY_API_KEY (for AI-powered documentation generation)\n  - Optional: OPENAI_API_KEY (alternative AI provider)\n\n## Environment Setup\n\n1. Clone the repository to your local machine or start a new Replit project\n\n2. Create a `.env` file in the root directory with the following variables:\n   ```\n   DATABASE_URL=postgresql://username:password@localhost:5432/cobol_docs\n   FLASK_SECRET_KEY=your_secret_key\n   MCP_API_KEY=your_mcp_api_key\n   PERPLEXITY_API_KEY=your_perplexity_api_key\n   ```\n\n3. Install the required Python packages:\n   ```\n   pip install flask flask-sqlalchemy gunicorn email-validator markdown openai psycopg2-binary python-dotenv requests werkzeug\n   ```\n\n## Database Setup\n\n1. Create a PostgreSQL database\n   ```\n   createdb cobol_docs\n   ```\n\n2. The application will automatically create the necessary tables when it's first run\n\n## Running the Application\n\n1. Start the application server:\n   ```\n   gunicorn --bind 0.0.0.0:5000 --reuse-port --reload main:app\n   ```\n\n2. Access the application in your web browser at `http://localhost:5000`\n\n## Using the Application\n\n1. Register a new user account or log in with existing credentials\n\n2. Create a new project and upload COBOL files for documentation\n\n3. The system will automatically analyze the COBOL structure and generate comprehensive documentation\n\n4. You can translate the documentation to different languages or download it in various formats\n\n## Troubleshooting\n\n- If you encounter errors with the Perplexity API, ensure your API key is correct\n- For database connection issues, verify the DATABASE_URL environment variable\n- Check if JavaScript is enabled in your browser for the best user experience\n\n## Additional Resources\n\n- COBOL Programming Guide\n- Perplexity API Documentation\n- Model Context Protocol Documentation","size_bytes":1998},"attached_assets/STEP_BY_STEP_GUIDE.md":{"content":"# COBOL Documentation Generator - Step-by-Step Guide\n\nThis guide provides detailed step-by-step instructions for setting up and using the COBOL Documentation Generator application.\n\n## Step 1: Environment Setup\n\n1. Ensure you have the following installed:\n   - Python 3.8+\n   - PostgreSQL database\n   - Git (for cloning the repository)\n\n2. Set up your environment variables by creating a `.env` file with:\n   ```\n   DATABASE_URL=postgresql://username:password@localhost:5432/cobol_docs\n   FLASK_SECRET_KEY=your_secret_key\n   MCP_API_KEY=your_mcp_api_key\n   PERPLEXITY_API_KEY=your_perplexity_api_key\n   ```\n\n## Step 2: Database Initialization\n\n1. Ensure your PostgreSQL server is running\n2. Create a new database:\n   ```\n   createdb cobol_docs\n   ```\n3. The application will automatically create the necessary tables on startup\n\n## Step 3: Starting the Application\n\n1. Start the application server using gunicorn:\n   ```\n   gunicorn --bind 0.0.0.0:5000 --reuse-port --reload main:app\n   ```\n2. Access the web interface by navigating to `http://localhost:5000` in your browser\n\n## Step 4: User Registration and Login\n\n1. Click the \"Register\" button on the homepage\n2. Fill in your username, email, and password\n3. Submit the registration form\n4. Log in with your newly created credentials\n\n## Step 5: Creating a New Project\n\n1. Navigate to the dashboard\n2. Click \"Create New Project\"\n3. Enter a project name and description\n4. Click \"Create\" to initialize your project\n\n## Step 6: Uploading COBOL Files\n\n1. Select your project from the dashboard\n2. Click \"Upload COBOL File\"\n3. Select a COBOL file from your computer or paste the code directly\n4. Click \"Upload\" to add the file to your project\n\n## Step 7: Generating Documentation\n\n1. From the project view, select the COBOL file you want to document\n2. Click \"Generate Documentation\"\n3. Wait for the AI to analyze the code and generate comprehensive documentation\n4. Review the generated documentation with diagrams and explanations\n\n## Step 8: Translating Documentation (Optional)\n\n1. View the documentation for a COBOL file\n2. Select the target language from the dropdown menu\n3. Click \"Translate\" to generate documentation in the selected language\n4. The translated documentation will be displayed\n\n## Step 9: Downloading Documentation\n\n1. View the documentation for a COBOL file\n2. Click \"Download\" to save the documentation\n3. Choose your preferred format (Markdown, PDF, HTML)\n4. Save the file to your computer\n\n## Step 10: Managing Projects\n\n1. Return to the dashboard to see all your projects\n2. Use the \"Edit\" button to modify project details\n3. Use the \"Delete\" button to remove projects you no longer need\n\n## Troubleshooting\n\n- **API Error**: Check that your API keys are correctly set in the `.env` file\n- **Database Connection Error**: Verify your PostgreSQL server is running and the DATABASE_URL is correct\n- **File Upload Issues**: Ensure your COBOL files are properly formatted and not too large\n\nFor additional help, refer to the SETUP_GUIDE.md file or contact support.","size_bytes":3038},"attached_assets/agent_fixed.py":{"content":"import os\nimport json\nimport logging\nimport requests\nfrom datetime import datetime\nfrom utils.observability import agent_monitor, observability_tracker\nfrom utils.mcp_client import mcp_client\nfrom utils.llm_selector import llm_selector\nfrom utils.groq_client import mk_groq_client, get_groq_models, analyze_cobol_with_groq\n\n# Initialize logger\nlogger = logging.getLogger(__name__)\n\nclass COBOLDocumentationAgent:\n    \"\"\"Autonomous agent for generating and managing COBOL documentation\"\"\"\n    \n    def __init__(self, session_id=None, user_id=None):\n        self.session_id = agent_monitor.start_session(\n            session_id=session_id,\n            user_id=user_id,\n            context={\"agent_type\": \"cobol_documentation\"}\n        )\n        self.memory = []\n        self.user_preferences = {}\n        self.max_memory_items = 10\n        \n        # Set up LLM provider preference\n        self.llm_provider = self.get_user_preference(\"llm_provider\", \"groq\")\n        self.llm_model = self.get_user_preference(\"llm_model\", \"llama-3.3-70b-versatile\")\n        \n        # Initialize LLM selector\n        if llm_selector.get_providers():\n            # Use the preferred provider if available\n            if self.llm_provider in llm_selector.get_providers():\n                llm_selector.set_provider(self.llm_provider)\n            # If model preference exists, try to set it\n            if self.llm_model:\n                llm_selector.set_model(self.llm_model)\n                \n        logger.info(f\"Initialized COBOL Documentation Agent with session {self.session_id} using LLM provider: {self.llm_provider}\")\n    \n    def __del__(self):\n        \"\"\"Cleanup when object is destroyed\"\"\"\n        try:\n            if hasattr(self, 'session_id'):\n                agent_monitor.end_session()\n        except:\n            pass\n    \n    def set_user_preference(self, key, value):\n        \"\"\"Set a user preference\"\"\"\n        self.user_preferences[key] = value\n        logger.debug(f\"Set user preference: {key} = {value}\")\n    \n    def get_user_preference(self, key, default=None):\n        \"\"\"Get a user preference\"\"\"\n        return self.user_preferences.get(key, default)\n    \n    def remember(self, item_type, content):\n        \"\"\"Add an item to agent memory\"\"\"\n        memory_item = {\n            \"type\": item_type,\n            \"content\": content,\n            \"timestamp\": datetime.utcnow().isoformat()\n        }\n        \n        self.memory.append(memory_item)\n        \n        # Limit memory size\n        if len(self.memory) > self.max_memory_items:\n            self.memory.pop(0)\n            \n        logger.debug(f\"Added memory item: {item_type}\")\n        return memory_item\n    \n    def analyze_cobol_structure(self, cobol_code, parsed_structure=None):\n        \"\"\"Analyze COBOL code structure autonomously\"\"\"\n        operation_span = observability_tracker.start_span(\n            \"analyze_cobol_structure\", \n            metadata={\"code_length\": len(cobol_code)}\n        )\n        \n        try:\n            # Agent decision: determine what parsing approach to use\n            parsing_decision = agent_monitor.log_decision(\n                \"parsing_approach_selection\",\n                inputs={\"code_sample\": cobol_code[:200] + \"...\"},\n                reasoning=\"Determining the optimal parsing strategy based on code complexity and structure\"\n            )\n            \n            # If no parsed structure provided, use a simplified one\n            if not parsed_structure:\n                parsed_structure = {\n                    \"program_id\": self._extract_program_id(cobol_code),\n                    \"divisions\": self._identify_divisions(cobol_code)\n                }\n                \n            # Agent decision: identify key code aspects to focus on\n            focus_decision = agent_monitor.log_decision(\n                \"code_focus_identification\",\n                inputs={\"parsed_structure\": parsed_structure},\n                reasoning=\"Identifying the most important aspects of the code to focus documentation on\",\n                output={\"focus_areas\": self._identify_focus_areas(parsed_structure)}\n            )\n            \n            # Prepare custom instructions based on user preferences\n            custom_instructions = \"\"\n            if self.get_user_preference(\"detail_level\") == \"high\":\n                custom_instructions += \"Provide highly detailed analysis with comprehensive breakdown of all code elements. \"\n            elif self.get_user_preference(\"detail_level\") == \"low\":\n                custom_instructions += \"Provide a simplified overview focusing only on key program elements. \"\n                \n            if self.get_user_preference(\"audience\") == \"technical\":\n                custom_instructions += \"Target audience is technical developers with COBOL expertise. \"\n            elif self.get_user_preference(\"audience\") == \"business\":\n                custom_instructions += \"Target audience is business stakeholders with limited technical knowledge. \"\n            \n            # Determine which LLM provider to use based on user preference\n            current_provider = self.get_user_preference(\"llm_provider\", \"groq\")\n            current_model = self.get_user_preference(\"llm_model\", \"llama-3.3-70b-versatile\")\n            \n            # Prepare the prompt/messages for the LLM\n            prompt = f\"\"\"\n            You are an expert COBOL analyst. Analyze the following COBOL code and extract its structure,\n            including program flow, variables, and logic. Format your response as JSON and include:\n            \n            1. program_id: The program identifier\n            2. description: A concise overview of what the program does\n            3. divisions: An object containing each division with:\n               - description: What this division does\n               - sections: An object of sections within the division, each with:\n                 - description: What this section does\n                 - paragraphs: An object of paragraphs, each with code and description\n            4. variables: Key variables and their purpose\n            5. flow_diagram: A simple Mermaid flowchart diagram of the program flow\n            \n            Use this initial parsed structure as reference: {json.dumps(parsed_structure, indent=2)}\n            \n            COBOL CODE:\n            ```cobol\n            {cobol_code}\n            ```\n            \n            {custom_instructions}\n            \n            Respond with only valid JSON that represents the structured analysis of this code.\n            \"\"\"\n            \n            # Try using the LLM selector first\n            if current_provider in llm_selector.get_providers():\n                logger.info(f\"Using LLM selector with provider {current_provider}\")\n                result = llm_selector.generate_text(\n                    prompt=prompt,\n                    provider=current_provider,\n                    model=current_model,\n                    temperature=0.2,\n                    max_tokens=4000\n                )\n            # Fallback to using Groq directly if it's requested but not in selector\n            elif current_provider == \"groq\" and os.environ.get(\"GROQ_API_KEY\"):\n                logger.info(\"Using Groq client directly\")\n                structured_data = analyze_cobol_with_groq(cobol_code, current_model)\n                # Skip the JSON parsing since Groq already returns parsed JSON\n                observability_tracker.end_span(operation_span, result=structured_data)\n                return structured_data\n            # Use Groq as only fallback option\n            else:\n                # Try direct GROQ access if API key exists\n                if os.environ.get(\"GROQ_API_KEY\"):\n                    logger.info(\"GROQ API key exists, using direct Groq client\")\n                    structured_data = analyze_cobol_with_groq(cobol_code, \"llama-3.3-70b-versatile\")\n                    # Skip the JSON parsing since Groq already returns parsed JSON\n                    observability_tracker.end_span(operation_span, result=structured_data)\n                    return structured_data\n                else:\n                    # No API keys available\n                    logger.error(\"No GROQ API key available for documentation generation\")\n                    structured_data = {\n                        \"program_id\": self._extract_program_id(cobol_code),\n                        \"description\": \"Error: No API keys available for any LLM provider\",\n                        \"divisions\": self._identify_divisions(cobol_code),\n                        \"variables\": {},\n                        \"flow_diagram\": \"flowchart TD\\n    Error[Error: No API Keys] --> Action[Please configure API keys]\"\n                    }\n                    observability_tracker.end_span(operation_span, result=structured_data)\n                    return structured_data\n            \n            # Clean up the result to make sure it's valid JSON\n            # Remove any non-JSON content like markdown formatting\n            try:\n                # Try to find JSON content within triple backticks if present\n                import re\n                json_match = re.search(r'```(?:json)?\\s*([\\s\\S]*?)\\s*```', result)\n                if json_match:\n                    result = json_match.group(1).strip()\n                else:\n                    # If not in code blocks, just try to parse it directly\n                    result = result.strip()\n                    \n                # Parse the JSON\n                structured_data = json.loads(result)\n                \n                logger.debug(f\"Successfully parsed structured data from LLM API response\")\n            except Exception as json_error:\n                logger.error(f\"Error parsing JSON from LLM response: {json_error}\")\n                logger.debug(f\"Response content: {result[:500]}...\")\n                \n                # Fallback to basic structure\n                structured_data = {\n                    \"program_id\": self._extract_program_id(cobol_code),\n                    \"description\": \"Could not automatically extract program description.\",\n                    \"divisions\": self._identify_divisions(cobol_code)\n                }\n            \n            # Store analysis in memory\n            self.remember(\"cobol_analysis\", {\n                \"program_id\": structured_data.get(\"program_id\", \"Unknown\"),\n                \"description\": structured_data.get(\"description\", \"No description available\"),\n                \"timestamp\": datetime.utcnow().isoformat()\n            })\n            \n            # Agent decision: evaluate analysis quality\n            quality_decision = agent_monitor.log_decision(\n                \"analysis_quality_evaluation\",\n                reasoning=\"Evaluating the completeness and accuracy of the code analysis\",\n                output=self._evaluate_analysis_quality(structured_data)\n            )\n            \n            observability_tracker.end_span(operation_span, result=structured_data)\n            return structured_data\n            \n        except Exception as e:\n            logger.error(f\"Error analyzing COBOL structure: {str(e)}\")\n            observability_tracker.end_span(operation_span, error=e)\n            raise\n    \n    def generate_documentation(self, structured_data):\n        \"\"\"Generate documentation from structured COBOL data\"\"\"\n        operation_span = observability_tracker.start_span(\n            \"generate_documentation\", \n            metadata={\"program_id\": structured_data.get(\"program_id\", \"Unknown\")}\n        )\n        \n        try:\n            # Agent decision: determine documentation structure\n            doc_structure_decision = agent_monitor.log_decision(\n                \"documentation_structure_planning\",\n                inputs={\"structured_data_keys\": list(structured_data.keys())},\n                reasoning=\"Planning the optimal documentation structure based on available information\",\n                output={\"planned_sections\": self._plan_documentation_sections(structured_data)}\n            )\n            \n            # Prepare custom instructions based on user preferences\n            custom_instructions = \"\"\n            audience_type = self.get_user_preference(\"audience\", \"technical\")\n            \n            if self.get_user_preference(\"documentation_style\") == \"academic\":\n                custom_instructions += \"Use a formal, academic style with precise terminology. \"\n            elif self.get_user_preference(\"documentation_style\") == \"conversational\":\n                custom_instructions += \"Use a conversational style with accessible explanations. \"\n                \n            if self.get_user_preference(\"include_examples\") == True:\n                custom_instructions += \"Include practical examples for important code sections. \"\n                \n            if self.get_user_preference(\"diagrams\") == \"detailed\":\n                custom_instructions += \"Create detailed diagrams explaining program flow and structure. \"\n            \n            # Enrich structured data with MCP\n            agent_monitor.log_decision(\n                \"mcp_enrichment\",\n                reasoning=\"Enriching COBOL documentation with external knowledge and explanations using Model Context Protocol\",\n                output={\"audience_type\": audience_type}\n            )\n            \n            try:\n                enriched_data = mcp_client.enrich_cobol_documentation(structured_data, audience_type)\n                \n                # Log what was enriched\n                agent_monitor.log_decision(\n                    \"mcp_enrichment_analysis\",\n                    reasoning=\"Analyzing MCP enrichment results\",\n                    output={\n                        \"enriched_fields\": list(set(enriched_data.keys()) - set(structured_data.keys()))\n                    }\n                )\n                \n                # Use the enriched data for documentation\n                structured_data = enriched_data\n            except Exception as mcp_error:\n                logger.warning(f\"MCP enrichment failed, continuing with original data: {str(mcp_error)}\")\n                # Continue with the original structured data\n            \n            # Determine which LLM provider to use based on user preference\n            current_provider = self.get_user_preference(\"llm_provider\", \"groq\")\n            current_model = self.get_user_preference(\"llm_model\", \"llama-3.3-70b-versatile\")\n            \n            # Prepare MCP context if available\n            mcp_context = \"\"\n            if \"mcp_explanation\" in structured_data:\n                mcp_context = f\"\\n\\nExternal knowledge about this COBOL program:\\n{structured_data['mcp_explanation'].get('explanation', '')}\\n\"\n            \n            # Prepare the documentation prompt\n            doc_prompt = f\"\"\"\n            You are a technical documentation expert specializing in legacy COBOL systems. \n            Create detailed, well-organized documentation for the following COBOL code structure.\n            \n            Follow these guidelines:\n            1. Start with a clear title and overview of the program's purpose\n            2. Create sections for each division with clear descriptions\n            3. Include detailed explanations of the program flow and logic\n            4. Embed Mermaid diagrams to visualize the program flow\n            5. Add code examples for important sections\n            6. Format your response as Markdown with proper headings, code blocks, and diagrams\n            7. DO NOT include any HTML tags (no <pre>, <code>, <span>, <div>, etc.)\n            8. Follow the documentation style shown in the Swimm documentation example\n            \n            {custom_instructions}\n            \n            Use this structured data: {json.dumps(structured_data, indent=2)}{mcp_context}\n            \n            Your documentation should be comprehensive, clear, and professional, suitable for both developers and non-technical stakeholders.\n            \"\"\"\n            \n            # Try using the LLM selector first\n            if current_provider in llm_selector.get_providers():\n                logger.info(f\"Using LLM selector with provider {current_provider} for documentation generation\")\n                documentation = llm_selector.generate_text(\n                    prompt=doc_prompt,\n                    provider=current_provider,\n                    model=current_model,\n                    temperature=0.3,\n                    max_tokens=4000\n                )\n            # Fallback to using Groq directly if it's requested but not in selector\n            elif current_provider == \"groq\" and os.environ.get(\"GROQ_API_KEY\"):\n                logger.info(\"Using Groq client directly for documentation generation\")\n                try:\n                    from utils.groq_client import generate_with_groq\n                    documentation = generate_with_groq(\n                        prompt=doc_prompt,\n                        model=current_model or \"llama-3.1-8b-versatile\",\n                        temperature=0.3,\n                        max_tokens=4000\n                    )\n                except Exception as groq_error:\n                    logger.error(f\"Error using Groq directly: {str(groq_error)}\")\n                    # Fallback to Groq\n                    documentation = self._fallback_to_groq_for_documentation(doc_prompt, custom_instructions)\n            # Default approach - use GROQ exclusively\n            else:\n                # Use GROQ exclusively\n                logger.info(\"Using GROQ for documentation generation\")\n                documentation = self._fallback_to_groq_for_documentation(doc_prompt, custom_instructions)\n            \n            # Agent decision: evaluate documentation quality\n            quality_decision = agent_monitor.log_decision(\n                \"documentation_quality_evaluation\",\n                reasoning=\"Evaluating the quality, completeness, and clarity of the generated documentation\",\n                output=self._evaluate_documentation_quality(documentation)\n            )\n            \n            # Generate diagrams if needed\n            if \"```mermaid\" not in documentation or self.get_user_preference(\"enhanced_diagrams\", False):\n                documentation = self._enhance_with_diagrams(documentation, structured_data)\n            \n            # Add MCP explanations for non-technical users if available\n            if audience_type != \"technical\" and \"construct_explanations\" in structured_data:\n                documentation = self._add_mcp_explanations(documentation, structured_data)\n                \n            # Extract thinking process and format as separate section\n            try:\n                documentation = self._separate_thinking_process(documentation)\n                logger.debug(\"Separated thinking process from main documentation\")\n            except Exception as e:\n                logger.warning(f\"Could not separate thinking process: {str(e)}\")\n                \n            # Enhance documentation with tabbed diagram views\n            try:\n                from utils.mermaid_viewer import enhance_markdown_with_tabs\n                documentation = enhance_markdown_with_tabs(documentation)\n                logger.debug(\"Enhanced documentation with tabbed diagram views\")\n            except Exception as e:\n                logger.warning(f\"Could not enhance documentation with tabbed diagram views: {str(e)}\")\n            \n            # Store in memory\n            self.remember(\"documentation\", {\n                \"program_id\": structured_data.get(\"program_id\", \"Unknown\"),\n                \"doc_preview\": documentation[:200] + \"...\"\n            })\n            \n            observability_tracker.end_span(operation_span, result={\"doc_length\": len(documentation)})\n            return documentation\n            \n        except Exception as e:\n            logger.error(f\"Error generating documentation: {str(e)}\")\n            observability_tracker.end_span(operation_span, error=e)\n            raise\n    \n    def _extract_program_id(self, cobol_code):\n        \"\"\"Extract program ID from COBOL code\"\"\"\n        import re\n        program_id_match = re.search(r'PROGRAM-ID\\s*\\.\\s*([\\w-]+)', cobol_code, re.IGNORECASE)\n        if program_id_match:\n            return program_id_match.group(1).strip()\n        return \"Unknown\"\n    \n    def _identify_divisions(self, cobol_code):\n        \"\"\"Identify divisions in COBOL code\"\"\"\n        import re\n        divisions = []\n        division_matches = re.finditer(r'([\\w-]+)\\s+DIVISION', cobol_code, re.IGNORECASE)\n        \n        for match in division_matches:\n            divisions.append(match.group(1).strip())\n            \n        return divisions\n    \n    def _identify_focus_areas(self, parsed_structure):\n        \"\"\"Identify key areas to focus on in the code\"\"\"\n        focus_areas = []\n        \n        # Identify data division for variables\n        if \"divisions\" in parsed_structure and \"DATA\" in parsed_structure[\"divisions\"]:\n            focus_areas.append(\"data_structures\")\n            \n        # Identify procedure division for logic\n        if \"divisions\" in parsed_structure and \"PROCEDURE\" in parsed_structure[\"divisions\"]:\n            focus_areas.append(\"business_logic\")\n            \n        # Always focus on program purpose\n        focus_areas.append(\"program_purpose\")\n        \n        return focus_areas\n    \n    def _evaluate_analysis_quality(self, structured_data):\n        \"\"\"Evaluate the quality of the code analysis\"\"\"\n        quality_score = 0\n        quality_notes = []\n        \n        # Check for required sections\n        if \"program_id\" in structured_data and structured_data[\"program_id\"] != \"Unknown\":\n            quality_score += 1\n        else:\n            quality_notes.append(\"Missing program ID\")\n            \n        if \"description\" in structured_data and len(structured_data.get(\"description\", \"\")) > 20:\n            quality_score += 1\n        else:\n            quality_notes.append(\"Description missing or too short\")\n            \n        if \"divisions\" in structured_data and len(structured_data.get(\"divisions\", {})) > 0:\n            quality_score += 1\n        else:\n            quality_notes.append(\"No divisions identified\")\n            \n        if \"variables\" in structured_data and len(structured_data.get(\"variables\", {})) > 0:\n            quality_score += 1\n        else:\n            quality_notes.append(\"No variables identified\")\n            \n        if \"flow_diagram\" in structured_data and len(structured_data.get(\"flow_diagram\", \"\")) > 50:\n            quality_score += 1\n        else:\n            quality_notes.append(\"Flow diagram missing or incomplete\")\n            \n        quality_level = \"low\" if quality_score < 2 else \"medium\" if quality_score < 4 else \"high\"\n        \n        return {\n            \"quality_score\": quality_score,\n            \"quality_level\": quality_level,\n            \"quality_notes\": quality_notes\n        }\n    \n    def _plan_documentation_sections(self, structured_data):\n        \"\"\"Plan the sections for documentation\"\"\"\n        sections = [\"Introduction\", \"Program Overview\"]\n        \n        # Add divisions as sections\n        if \"divisions\" in structured_data:\n            for division in structured_data.get(\"divisions\", {}):\n                sections.append(f\"{division} Division\")\n        \n        # Add special sections based on content\n        if \"variables\" in structured_data and len(structured_data.get(\"variables\", {})) > 0:\n            sections.append(\"Variables and Data Structures\")\n            \n        if \"flow_diagram\" in structured_data:\n            sections.append(\"Program Flow\")\n            \n        sections.append(\"Summary\")\n        \n        return sections\n    \n    def _evaluate_documentation_quality(self, documentation):\n        \"\"\"Evaluate the quality of generated documentation\"\"\"\n        quality_score = 0\n        quality_notes = []\n        \n        # Check length\n        if len(documentation) > 1000:\n            quality_score += 1\n        else:\n            quality_notes.append(\"Documentation is too short\")\n            \n        # Check for headings (Markdown format)\n        if documentation.count(\"#\") > 3:\n            quality_score += 1\n        else:\n            quality_notes.append(\"Too few section headings\")\n            \n        # Check for code blocks\n        if documentation.count(\"```\") >= 2:  # At least one code block\n            quality_score += 1\n        else:\n            quality_notes.append(\"No code examples included\")\n            \n        # Check for Mermaid diagrams\n        if \"```mermaid\" in documentation:\n            quality_score += 1\n        else:\n            quality_notes.append(\"No diagrams included\")\n            \n        # Check for explanation text\n        if len(documentation.split()) > 300:  # More than 300 words\n            quality_score += 1\n        else:\n            quality_notes.append(\"Insufficient explanation text\")\n            \n        quality_level = \"low\" if quality_score < 2 else \"medium\" if quality_score < 4 else \"high\"\n        \n        return {\n            \"quality_score\": quality_score,\n            \"quality_level\": quality_level,\n            \"quality_notes\": quality_notes\n        }\n    \n    def _enhance_with_diagrams(self, documentation, structured_data):\n        \"\"\"Enhance documentation with additional diagrams\"\"\"\n        operation_span = observability_tracker.start_span(\"enhance_with_diagrams\")\n        \n        try:\n            # Import validator from mermaid_validator\n            from utils.mermaid_validator import validate_mermaid_syntax\n            import re\n            \n            # Make sure we have at least one valid diagram\n            has_valid_diagrams = False\n            \n            # First, validate any existing diagrams\n            if \"```mermaid\" in documentation:\n                logger.info(f\"Found existing Mermaid diagrams in documentation. Validating and fixing if needed.\")\n                \n                def validate_diagram(match):\n                    nonlocal has_valid_diagrams\n                    mermaid_code = match.group(1).strip()\n                    \n                    # Skip empty diagrams\n                    if not mermaid_code:\n                        logger.warning(\"Found empty Mermaid diagram, replacing with placeholder\")\n                        default_diagram = \"flowchart TD\\n    Empty[Empty Diagram] --> Placeholder[Placeholder]\"\n                        return f\"```mermaid\\n{default_diagram}\\n```\"\n                    \n                    # Validate and correct the diagram syntax\n                    is_valid, corrected_code, message = validate_mermaid_syntax(mermaid_code)\n                    \n                    # Always consider it corrected, even if only validation happened\n                    logger.debug(f\"Mermaid diagram validation: {message}\")\n                    agent_monitor.log_decision(\n                        \"mermaid_syntax_correction\",\n                        reasoning=f\"Validating/fixing Mermaid diagram syntax: {message}\",\n                        output={\"original\": mermaid_code, \"corrected\": corrected_code}\n                    )\n                    \n                    # Mark as having valid diagrams now that we've fixed it\n                    has_valid_diagrams = True\n                    return f\"```mermaid\\n{corrected_code}\\n```\"\n                \n                # Extract and validate each mermaid diagram\n                pattern = r'```mermaid\\s*([\\s\\S]*?)\\s*```'\n                documentation = re.sub(pattern, validate_diagram, documentation)\n            \n            # Add fallback diagram if none exist or all were invalid\n            if not has_valid_diagrams and \"```mermaid\" not in documentation:\n                logger.info(\"No valid Mermaid diagrams found, adding a basic program flow diagram\")\n                \n                # Create a basic diagram based on structured data\n                program_id = structured_data.get(\"program_id\", \"Program\")\n                description = structured_data.get(\"description\", \"COBOL Program\")\n                \n                # Generate a simple flowchart based on available data\n                basic_flowchart = \"\"\"```mermaid\nflowchart TD\n    Start([Start Program]) --> Init[Initialize Variables]\n    Init --> Process[Process Data]\n    Process --> Decision{Decision Point}\n    Decision -->|Yes| Success[Success Path]\n    Decision -->|No| Failure[Failure Path]\n    Success --> End([End Program])\n    Failure --> End\n```\"\"\"\n                \n                # Add the basic diagram to the documentation\n                documentation += f\"\\n\\n## Program Flow Diagram\\n\\n{basic_flowchart}\\n\"\n                has_valid_diagrams = True\n                \n                agent_monitor.log_decision(\n                    \"added_basic_diagram\",\n                    reasoning=\"Added a basic flow diagram as none were present\",\n                    output={\"diagram_type\": \"flowchart\"}\n                )\n            \n            # Only try to generate enhanced diagrams if requested and we have an LLM provider\n            provider_preference = self.get_user_preference(\"llm_provider\", \"groq\")\n            if self.get_user_preference(\"enhanced_diagrams\", True) and provider_preference:\n                logger.info(f\"Attempting to generate enhanced diagrams using {provider_preference}\")\n                \n                # Prepare detailed instructions for diagram generation\n                diagram_instructions = \"\"\"\nYou are a technical documentation expert who specializes in creating valid, error-free Mermaid diagrams.\nFollow these STRICT Mermaid syntax rules to ensure all diagrams will render correctly:\n\n1. Always start flowcharts with 'flowchart TD' (preferred) or direction (TB, LR, RL, BT)\n2. All node IDs must be alphanumeric with NO spaces or special characters (except underscores)\n3. Use proper arrow syntax (-->, --->, ==>, etc.) with NO spaces between dashes\n4. Put quotes around any text with spaces\n5. Balance all brackets, quotes, and parentheses\n6. Each connection should follow this pattern: nodeA --> nodeB\n7. For labels on connections, use: nodeA -->|\"label text\"| nodeB\n8. Test each diagram carefully before returning it\n\nGOOD EXAMPLE:\n```mermaid\nflowchart TD\n    Start([Start]) --> Init[Initialize]\n    Init --> Process[Process Data]\n    Process --> Decision{Decision?}\n    Decision -->|Yes| Success[Success]\n    Decision -->|No| Failure[Failure]\n    Success --> End([End])\n    Failure --> End\n```\n\nBAD EXAMPLE (DON'T DO THIS):\n```mermaid\nflowchart\n    start --> process data\n    process data -> decision point\n    decision point -- Yes --> Success route\n    decision point -- No --> failure\n```\n\"\"\"\n                \n                # Try to use the selected LLM provider\n                try:\n                    enhanced_documentation = None\n                    \n                    # Use Groq exclusively\n                    # Use Groq API to generate diagrams\n                    from utils.groq_client import generate_with_groq\n                    \n                    # Use more concise prompt for Groq\n                    enhanced_documentation = generate_with_groq(\n                        prompt=f\"\"\"\nEnhance this COBOL documentation with syntactically correct Mermaid diagrams:\n\n{documentation}\n\nEnsure all diagrams use valid syntax following these rules:\n- Start flowcharts with 'flowchart TD'\n- Use only alphanumeric IDs without spaces\n- Use proper arrow syntax (-->)\n- Put text with spaces in quotes\n\nReturn the complete enhanced documentation.\n\"\"\",\n                        model=self.llm_model,\n                        temperature=0.2\n                    )\n                    \n                    # If we successfully generated enhanced documentation\n                    if enhanced_documentation:\n                        # Validate all diagrams in the enhanced documentation\n                        max_attempts = 2\n                        attempts = 0\n                        has_issues = True\n                        \n                        while has_issues and attempts < max_attempts:\n                            has_issues = False\n                            \n                            def check_and_fix_diagram(match):\n                                nonlocal has_issues\n                                mermaid_code = match.group(1).strip()\n                                \n                                # Skip empty diagrams\n                                if not mermaid_code:\n                                    has_issues = True\n                                    default_diagram = \"flowchart TD\\n    Empty[Empty Diagram] --> Placeholder[Placeholder]\"\n                                    return f\"```mermaid\\n{default_diagram}\\n```\"\n                                \n                                # Always validate and correct\n                                is_valid, corrected_code, message = validate_mermaid_syntax(mermaid_code)\n                                \n                                if corrected_code != mermaid_code:\n                                    has_issues = True\n                                    logger.debug(f\"Fixed Mermaid syntax: {message}\")\n                                \n                                return f\"```mermaid\\n{corrected_code}\\n```\"\n                            \n                            # Find and fix all diagrams\n                            pattern = r'```mermaid\\s*([\\s\\S]*?)\\s*```'\n                            enhanced_documentation = re.sub(pattern, check_and_fix_diagram, enhanced_documentation)\n                            attempts += 1\n                        \n                        # Count diagrams in original and enhanced documentation\n                        original_count = documentation.count(\"```mermaid\")\n                        enhanced_count = enhanced_documentation.count(\"```mermaid\")\n                        \n                        # Only use enhanced documentation if it actually contains diagrams\n                        if enhanced_count > 0:\n                            logger.info(f\"Successfully enhanced documentation with {enhanced_count} diagrams (had {original_count} originally)\")\n                            documentation = enhanced_documentation\n                        else:\n                            logger.warning(\"Enhanced documentation didn't contain valid diagrams, keeping original\")\n                \n                except Exception as api_error:\n                    logger.error(f\"Error generating enhanced diagrams: {str(api_error)}\")\n                    # Continue with the current documentation if enhancement fails\n            \n            # Log the completion of diagram enhancement\n            agent_monitor.log_decision(\n                \"documentation_diagram_enhancement\",\n                reasoning=\"Enhanced documentation with validated Mermaid diagrams\",\n                output={\"diagram_count\": documentation.count(\"```mermaid\")}\n            )\n            \n            observability_tracker.end_span(operation_span)\n            return documentation\n                \n        except Exception as e:\n            logger.error(f\"Error enhancing documentation with diagrams: {str(e)}\")\n            observability_tracker.end_span(operation_span, error=e)\n            # Make sure we don't lose the original documentation if something goes wrong\n            return documentation\n\n    def _separate_thinking_process(self, documentation):\n        \"\"\"Separate AI thinking process from the main documentation and put it in its own section\n        \n        Args:\n            documentation (str): The original documentation with thinking process mixed in\n            \n        Returns:\n            str: Documentation with thinking process in a separate section\n        \"\"\"\n        import re\n        \n        # First, identify the main documentation title using patterns like \"# PROGRAM_NAME Documentation\"\n        # or \"# Documentation for PROGRAM_NAME\"\n        doc_title_pattern = r'(^|\\n)#\\s+(.*?Documentation|Documentation for.*?)(\\n|$)'\n        title_match = re.search(doc_title_pattern, documentation, re.IGNORECASE)\n        \n        if title_match:\n            # Title exists, extract content before it as thinking process\n            title_pos = title_match.start()\n            thinking_process = documentation[:title_pos].strip()\n            main_documentation = documentation[title_pos:].strip()\n            \n            # Only add thinking process section if there's actually content\n            if thinking_process:\n                return f\"{main_documentation}\\n\\n# Thinking Process\\n\\n{thinking_process}\"\n            else:\n                return main_documentation\n        \n        # Check if there's any text before the first heading \n        first_heading_pattern = r'(^|\\n)#\\s+'\n        first_heading_match = re.search(first_heading_pattern, documentation)\n        \n        if first_heading_match:\n            # Extract content before first heading as thinking process\n            heading_pos = first_heading_match.start()\n            thinking_process = documentation[:heading_pos].strip()\n            main_documentation = documentation[heading_pos:].strip()\n            \n            # Only add thinking process section if there's actually content\n            if thinking_process:\n                return f\"{main_documentation}\\n\\n# Thinking Process\\n\\n{thinking_process}\"\n            else:\n                return main_documentation\n                \n        # If no clear demarcation, leave as is\n        return documentation\n    \n    def _fallback_to_groq_for_documentation(self, doc_prompt, custom_instructions):\n        \"\"\"Fallback to Groq API for documentation generation\n        \n        Args:\n            doc_prompt (str): The documentation prompt\n            custom_instructions (str): Custom instructions for the model\n            \n        Returns:\n            str: Generated documentation\n        \"\"\"\n        if not os.environ.get(\"GROQ_API_KEY\"):\n            logger.error(\"No Groq API key available\")\n            # Return minimal documentation when no API key is available\n            return f\"\"\"\n# COBOL Program Documentation\n\n## Error: API Key Missing\n\nDocumentation generation failed because no Groq API key is available.\n\nPlease configure a GROQ_API_KEY in your environment settings.\n\n```mermaid\nflowchart TD\n    Error[Error: No API Keys] --> Action[Please configure API keys]\n```\n\"\"\"\n        \n        logger.info(\"Using Groq API for documentation generation\")\n        try:\n            from utils.groq_client import generate_with_groq\n            documentation = generate_with_groq(\n                prompt=f\"You are a technical documentation expert who creates comprehensive, clear documentation for legacy COBOL systems. {custom_instructions}\\n\\n{doc_prompt}\",\n                model=\"llama-3.3-70b-versatile\",\n                temperature=0.3,\n                max_tokens=4000\n            )\n            return documentation\n        except Exception as groq_error:\n            logger.error(f\"Error using GROQ: {str(groq_error)}\")\n            return f\"\"\"\n# COBOL Program Documentation\n\n## Error: Groq API Error\n\nDocumentation generation failed due to an error with the Groq API: {str(groq_error)}\n\nPlease check your GROQ_API_KEY and try again.\n\"\"\"\n    \n    def _add_mcp_explanations(self, documentation, structured_data):\n        \"\"\"Add MCP explanations for non-technical users\n        \n        Args:\n            documentation (str): The original documentation\n            structured_data (dict): Structured data with MCP explanations\n            \n        Returns:\n            str: Documentation enhanced with MCP explanations\n        \"\"\"\n        operation_span = observability_tracker.start_span(\"add_mcp_explanations\")\n        \n        try:\n            # Create a new section for MCP explanations\n            mcp_section = \"\\n\\n## Simplified Explanations\\n\\n\"\n            mcp_section += \"*The following explanations are designed for non-technical readers:*\\n\\n\"\n            \n            # Add program explanation\n            if \"mcp_explanation\" in structured_data:\n                explanation = structured_data[\"mcp_explanation\"].get(\"explanation\", \"\")\n                if explanation:\n                    mcp_section += explanation + \"\\n\\n\"\n            \n            # Add explanations for complex constructs\n            if \"construct_explanations\" in structured_data:\n                for construct, explanation_data in structured_data[\"construct_explanations\"].items():\n                    explanation = explanation_data.get(\"explanation\", \"\")\n                    if explanation:\n                        mcp_section += f\"### {construct} Construct\\n\\n{explanation}\\n\\n\"\n            \n            # Add visual elements if available\n            if \"visual_elements\" in structured_data:\n                for element_name, element_data in structured_data[\"visual_elements\"].items():\n                    if \"visual_element\" in element_data:\n                        mcp_section += f\"### {element_data.get('explanation', element_name)}\\n\\n{element_data['visual_element']}\\n\\n\"\n            \n            # Add the MCP section to the documentation\n            enhanced_documentation = documentation + mcp_section\n            \n            # Log the enhancement\n            agent_monitor.log_decision(\n                \"mcp_explanation_addition\",\n                reasoning=\"Adding simplified explanations from MCP for non-technical users\",\n                output={\"mcp_section_length\": len(mcp_section)}\n            )\n            \n            observability_tracker.end_span(operation_span)\n            return enhanced_documentation\n        \n        except Exception as e:\n            logger.error(f\"Error adding MCP explanations: {str(e)}\")\n            observability_tracker.end_span(operation_span, error=e)\n            return documentation  # Return the original documentation if something goes wrong\n","size_bytes":41945},"attached_assets/app.py":{"content":"import os\nimport uuid\nimport re\nimport time\nimport json\nimport traceback\nfrom flask import Flask, render_template, request, jsonify, send_file, session, redirect, url_for, flash, make_response, Response\nimport logging\nfrom utils.cobol_parser import parse_cobol\nfrom utils.documentation_generator import generate_documentation\nfrom utils.perplexity_client import extract_structure, generate_diagrams, translate_documentation\nfrom utils.llm_selector import llm_selector\nfrom utils.groq_client import get_groq_models\nfrom models import db, User, Project, CobolFile, Documentation, SourceCodeQueue, SourceCodeContent, DocGenerated\nfrom datetime import datetime\nfrom dotenv import load_dotenv\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom flask_wtf.csrf import CSRFProtect\n\n# Load environment variables\nload_dotenv()\n\n# Create Flask app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"default_secret_key_for_development\")\n\n# Initialize CSRF protection but exempt API routes used by JavaScript\ncsrf = CSRFProtect(app)\n\n# List of API routes to exempt from CSRF protection\nexempt_routes = [\n    '/api/execute-sql',\n    '/api/ledger/get-source-queue',\n    '/api/ledger/get-doc-queue',\n    '/api/upload',\n    '/api/process',\n    '/api/agent/process',\n    '/api/translate',\n    '/api/download',\n    '/api/validate-mermaid',\n    '/api/llm-settings',\n    '/api/prompts/save', \n    '/api/prompts/reset',\n    '/api/prompts/reset-all',\n    '/api/prompts/set-active',\n    '/api/prompts/status',\n    '/api/check-api-keys',\n    '/api/save-api-keys',\n    '/api/get-models',\n    '/api/ledger/source-queue',\n    '/api/documentation',\n    '/api/ledger/doc-queue',\n    '/api/ledger/add-source',\n    '/api/ledger/update-source-status',\n    '/api/ledger/delete-source',\n    '/api/ledger/get-source',\n    '/api/ledger/process-source',\n    '/api/ledger/get-doc',\n    '/api/ledger/update-doc-status',\n    '/api/ledger/download-doc',\n]\n\n# Apply exemptions\nfor route in exempt_routes:\n    csrf.exempt(route)\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# Configure database connection\ndb_url = os.environ.get(\"DATABASE_URL\")\nif not db_url:\n    logger.error(\"DATABASE_URL environment variable is not set! Database functionality will be unavailable.\")\n\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = db_url\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n    \"pool_size\": 10,\n    \"max_overflow\": 20,\n    \"connect_args\": {\"connect_timeout\": 15}\n}\napp.config[\"SQLALCHEMY_ECHO\"] = True  # Echo SQL queries for debugging\n\n# Initialize database with app\ntry:\n    db.init_app(app)\n    with app.app_context():\n        # Test database connection\n        db.engine.connect()\n        logger.info(\"Database connection successful!\")\nexcept Exception as e:\n    logger.error(f\"Error connecting to database: {str(e)}\")\n    logger.error(traceback.format_exc())\n\n# Initialize Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message_category = 'info'\n\n# Add CORS headers to allow Authorization header\n@app.after_request\ndef after_request(response):\n    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization,X-CSRFToken')\n    response.headers.add('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE,OPTIONS')\n    response.headers.add('Access-Control-Allow-Credentials', 'true')\n    return response\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n# Create all tables in the database\nwith app.app_context():\n    try:\n        db.create_all()\n        logger.info(\"Database tables created successfully\")\n    except Exception as e:\n        logger.error(f\"Error creating database tables: {str(e)}\")\n        logger.error(traceback.format_exc())\n\n# Timestamp function\ndef timestamp(dt=None, timezone_offset=-5):\n    \"\"\"\n    Generate a formatted timestamp string in the format YYYYMMDD_HHMMSS GMT-n\n    \n    Args:\n        dt (datetime, optional): Datetime object to format. Defaults to current time.\n        timezone_offset (int, optional): Offset from GMT in hours. Defaults to -5 (GMT-5).\n        \n    Returns:\n        str: Formatted timestamp string with timezone\n    \"\"\"\n    if dt is None:\n        dt = datetime.now()\n    \n    # Calculate the time with offset\n    from datetime import timedelta\n    adjusted_dt = dt + timedelta(hours=timezone_offset)\n    \n    # Format the timestamp with timezone indicator\n    gmt_sign = \"+\" if timezone_offset >= 0 else \"-\"\n    gmt_value = abs(timezone_offset)\n    \n    return f\"{adjusted_dt.strftime('%Y%m%d_%H%M%S')} GMT{gmt_sign}{gmt_value}\"\n\n# Make the timestamp function available to all templates\n@app.context_processor\ndef utility_processor():\n    def check_db_connection():\n        \"\"\"Check if the database connection is working\"\"\"\n        try:\n            # Use our new LedgerSQL class to check connection and get DB info\n            from utils.ledger_sql import LedgerSQL\n            \n            db_info = LedgerSQL.get_database_info()\n            logging.debug(f\"Database info: {db_info}\")\n            return db_info.get('connected', False)\n        except Exception as e:\n            logging.error(f\"Database connection check error: {str(e)}\")\n            return False\n    \n    def get_db_url():\n        \"\"\"Get the database URL (masked for security)\"\"\"\n        db_url = os.environ.get(\"DATABASE_URL\", \"\")\n        if db_url and \"@\" in db_url:\n            # Mask the password in the URL for display\n            parts = db_url.split(\"@\")\n            prefix = parts[0].split(\":\")\n            # Keep only the first two parts (driver and user) and mask the password\n            safe_prefix = \":\".join(prefix[:2]) + \":********\"\n            return safe_prefix + \"@\" + parts[1]\n        return \"Database URL not configured\"\n    \n    return {\n        'timestamp': timestamp,\n        'now': datetime.now,\n        'check_db_connection': check_db_connection,\n        'get_db_url': get_db_url\n    }\n\n@app.route(\"/prompts\")\n@login_required\ndef prompts():\n    \"\"\"\n    Display the prompt management interface\n    \"\"\"\n    from utils.prompt_manager import get_default_prompts, get_prompt_list\n    \n    # Get all prompts for the current user\n    default_prompts = get_default_prompts()\n    prompt_list = get_prompt_list()\n    \n    # Check session for custom prompts\n    custom_prompts = session.get('custom_prompts', {})\n    \n    # Merge default and custom prompts\n    prompts = {}\n    for key, prompt_data in default_prompts.items():\n        if key in custom_prompts:\n            prompts[key] = custom_prompts[key]\n        else:\n            prompts[key] = prompt_data\n    \n    return render_template(\"prompts.html\", prompts=prompts, prompt_list=prompt_list)\n\n@app.route(\"/api/prompts/save\", methods=[\"POST\"])\n@login_required\ndef save_prompt():\n    \"\"\"\n    Save a custom prompt\n    \"\"\"\n    from utils.prompt_manager import save_custom_prompt\n    \n    data = request.json\n    prompt_key = data.get('prompt_key')\n    prompt_data = data.get('prompt_data')\n    \n    if not prompt_key or not prompt_data:\n        return jsonify({\"success\": False, \"message\": \"Missing prompt key or data\"}), 400\n    \n    success = save_custom_prompt(prompt_key, prompt_data, current_user.id)\n    \n    if success:\n        return jsonify({\"success\": True})\n    else:\n        return jsonify({\"success\": False, \"message\": \"Failed to save prompt\"}), 500\n\n@app.route(\"/api/prompts/reset\", methods=[\"POST\"])\n@login_required\ndef reset_prompt():\n    \"\"\"\n    Reset a prompt to its default value\n    \"\"\"\n    from utils.prompt_manager import reset_prompt as reset_prompt_func\n    \n    data = request.json\n    prompt_key = data.get('prompt_key')\n    \n    if not prompt_key:\n        return jsonify({\"success\": False, \"message\": \"Missing prompt key\"}), 400\n    \n    success = reset_prompt_func(prompt_key, current_user.id)\n    \n    if success:\n        return jsonify({\"success\": True})\n    else:\n        return jsonify({\"success\": False, \"message\": \"Failed to reset prompt or prompt was already default\"}), 500\n\n@app.route(\"/api/prompts/reset-all\", methods=[\"POST\"])\n@login_required\ndef reset_all_prompts():\n    \"\"\"\n    Reset all prompts to their default values\n    \"\"\"\n    from utils.prompt_manager import reset_all_prompts as reset_all_prompts_func\n    \n    reset_all_prompts_func(current_user.id)\n    \n    return jsonify({\"success\": True})\n\n\n@app.route(\"/api/prompts/set-active\", methods=[\"POST\"])\n@login_required\ndef set_active_prompt():\n    \"\"\"\n    Set the active prompt\n    \"\"\"\n    from utils.prompt_manager import set_active_prompt_key\n    \n    # Get prompt key from request\n    data = request.get_json()\n    prompt_key = data.get('prompt_key')\n    \n    if not prompt_key:\n        return jsonify({\"success\": False, \"message\": \"No prompt key provided\"}), 400\n    \n    # Set the active prompt\n    success = set_active_prompt_key(prompt_key)\n    \n    if success:\n        return jsonify({\"success\": True, \"active_prompt_key\": prompt_key})\n    else:\n        return jsonify({\"success\": False, \"message\": f\"Invalid prompt key: {prompt_key}\"}), 400\n\n@app.route(\"/api/prompts/status\")\n@login_required\ndef prompt_status():\n    \"\"\"\n    Get the status of prompts (custom or default, and which is active)\n    \"\"\"\n    from utils.prompt_manager import get_active_prompt_key\n    \n    # Get custom prompts from session\n    custom_prompts = session.get('custom_prompts', {})\n    \n    # Get active prompt key\n    active_prompt_key = get_active_prompt_key()\n    \n    return jsonify({\n        \"success\": True,\n        \"custom_prompts\": list(custom_prompts.keys()),\n        \"active_prompt_key\": active_prompt_key\n    })\n\n@app.route(\"/documentation\")\ndef view_documentation():\n    \"\"\"\n    Display the COBOL Documentation Generator markdown documentation with proper rendering\n    \"\"\"\n    try:\n        import markdown\n        \n        # Read the markdown file\n        with open('COBOL_Documentation_Generator.md', 'r') as f:\n            md_content = f.read()\n        \n        # Convert markdown to HTML\n        html_content = markdown.markdown(\n            md_content,\n            extensions=[\n                'markdown.extensions.tables',\n                'markdown.extensions.fenced_code',\n                'markdown.extensions.codehilite',\n                'markdown.extensions.toc'\n            ]\n        )\n        \n        # Process Mermaid diagrams\n        # Find mermaid code blocks and wrap them properly for client-side rendering\n        mermaid_pattern = r'```mermaid\\s+(.*?)\\s+```'\n        \n        def mermaid_replace(match):\n            diagram_code = match.group(1).strip()\n            return f'<div class=\"mermaid\">{diagram_code}</div>'\n        \n        html_content = re.sub(mermaid_pattern, mermaid_replace, html_content, flags=re.DOTALL)\n        \n        return render_template('documentation_viewer.html', doc_content=html_content)\n    except Exception as e:\n        logger = logging.getLogger(__name__)\n        logger.error(f\"Error rendering documentation: {str(e)}\")\n        return f\"<h1>Error rendering documentation</h1><p>{str(e)}</p><pre>{traceback.format_exc()}</pre>\"\n\n@app.route(\"/\")\ndef index():\n    # Get user settings from session\n    user_settings = {}\n    if hasattr(current_user, 'id'):\n        user_settings = session.get('user_settings', {})\n    \n    # Default settings if none exist\n    if not user_settings:\n        user_settings = {\n            'llm_provider': 'groq',          # Default to GROQ\n            'llm_model': None,               # Will be set to default for the provider\n            'detail_level': 'medium',        # medium detail level\n            'audience': 'technical',         # technical audience\n            'documentation_style': 'formal', # formal style\n            'tooltip_delay': 1000,           # 1000ms delay for tooltips\n            'tooltip_x_offset': 10,          # 10px right offset\n            'tooltip_y_offset': 10,          # 10px down offset\n            'tooltip_font_size': 6,          # 6px font size\n            'tooltip_opacity': 0.9           # 90% opacity\n        }\n        session['user_settings'] = user_settings\n    \n    return render_template(\"index.html\", user_settings=user_settings)\n\n@app.route(\"/register\", methods=[\"GET\", \"POST\"])\ndef register():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\")\n        email = request.form.get(\"email\")\n        password = request.form.get(\"password\")\n        \n        # Basic validation\n        if not username or not email or not password:\n            flash(\"All fields are required\", \"danger\")\n            return render_template(\"register.html\")\n        \n        # Check if user already exists\n        existing_user = User.query.filter_by(username=username).first()\n        if existing_user:\n            flash(\"Username already exists\", \"danger\")\n            return render_template(\"register.html\")\n        \n        existing_email = User.query.filter_by(email=email).first()\n        if existing_email:\n            flash(\"Email already registered\", \"danger\")\n            return render_template(\"register.html\")\n        \n        # Create new user\n        from werkzeug.security import generate_password_hash\n        new_user = User(\n            username=username,\n            email=email,\n            password_hash=generate_password_hash(password)\n        )\n        \n        db.session.add(new_user)\n        db.session.commit()\n        \n        flash(\"Account created successfully! Please log in.\", \"success\")\n        return redirect(url_for(\"login\"))\n    \n    return render_template(\"register.html\")\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\")\n        password = request.form.get(\"password\")\n        \n        # Basic validation\n        if not username or not password:\n            flash(\"Both username and password are required\", \"danger\")\n            return render_template(\"login.html\")\n        \n        # Verify user\n        from werkzeug.security import check_password_hash\n        user = User.query.filter_by(username=username).first()\n        \n        if not user or not check_password_hash(user.password_hash, password):\n            flash(\"Invalid credentials\", \"danger\")\n            return render_template(\"login.html\")\n        \n        # Log in user with Flask-Login\n        login_user(user, remember=True)\n        \n        # Set additional info in session if needed\n        session[\"username\"] = user.username\n        \n        flash(f\"Welcome back, {user.username}!\", \"success\")\n        return redirect(url_for(\"dashboard\"))\n    \n    return render_template(\"login.html\")\n\n@app.route(\"/logout\")\ndef logout():\n    logout_user()\n    session.pop(\"username\", None)\n    flash(\"You have been logged out\", \"info\")\n    return redirect(url_for(\"login\"))\n\n@app.route(\"/dashboard\")\n@login_required\ndef dashboard():\n    # Get user's projects\n    projects = Project.query.filter_by(user_id=current_user.id).all()\n    \n    return render_template(\"dashboard.html\", projects=projects)\n\n@app.route(\"/api/upload\", methods=[\"POST\"])\n@csrf.exempt\ndef upload_cobol():\n    try:\n        # Generate unique job ID\n        job_id = str(uuid.uuid4())\n        session['job_id'] = job_id\n        \n        cobol_code = \"\"\n        \n        # Debug the request format\n        logger.debug(f\"Request method: {request.method}\")\n        logger.debug(f\"Request content type: {request.content_type}\")\n        logger.debug(f\"Request form keys: {list(request.form.keys()) if request.form else 'None'}\")\n        logger.debug(f\"Request files keys: {list(request.files.keys()) if request.files else 'None'}\")\n        \n        # Check if code was uploaded as file\n        if 'file' in request.files and request.files['file'].filename:\n            file = request.files['file']\n            logger.debug(f\"File uploaded: {file.filename}\")\n            cobol_code = file.read().decode('utf-8')\n        # Check if code was pasted\n        elif 'code' in request.form:\n            logger.debug(\"Code found in form data\")\n            cobol_code = request.form['code']\n        else:\n            # Attempt to read raw data as a fallback\n            try:\n                raw_data = request.get_data(as_text=True)\n                logger.debug(f\"Trying to parse raw data: {raw_data[:100]}...\" if len(raw_data) > 100 else raw_data)\n                \n                # If it looks like URL-encoded form data\n                if \"code=\" in raw_data:\n                    import urllib.parse\n                    parsed = urllib.parse.parse_qs(raw_data)\n                    if 'code' in parsed:\n                        cobol_code = parsed['code'][0]\n                        logger.debug(\"Extracted code from raw URL-encoded data\")\n                else:\n                    # Try to parse as JSON\n                    try:\n                        json_data = json.loads(raw_data)\n                        if 'code' in json_data:\n                            cobol_code = json_data['code']\n                            logger.debug(\"Extracted code from raw JSON data\")\n                    except json.JSONDecodeError:\n                        logger.debug(\"Raw data is not valid JSON\")\n            except Exception as raw_error:\n                logger.error(f\"Error parsing raw request data: {str(raw_error)}\")\n                \n            if not cobol_code:\n                logger.error(\"No COBOL code found in request\")\n                return jsonify({\"error\": \"No COBOL code provided\"}), 400\n        \n        # Validate COBOL code\n        if not cobol_code.strip():\n            return jsonify({\"error\": \"Empty COBOL code provided\"}), 400\n        \n        # Store the COBOL code in session for later processing\n        session['cobol_code'] = cobol_code\n        \n        # Debug the session data\n        logger.debug(f\"Stored code in session, length: {len(cobol_code)}\")\n        logger.debug(f\"Session job_id: {job_id}\")\n        \n        return jsonify({\n            \"status\": \"success\", \n            \"message\": \"COBOL code received\", \n            \"job_id\": job_id\n        })\n        \n    except Exception as e:\n        logger.error(f\"Error uploading COBOL code: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/process\", methods=[\"POST\"])\n@csrf.exempt\ndef process_cobol():\n    try:\n        # Import the markdown conversion library\n        import markdown\n        \n        # Generate a unique job ID\n        job_id = str(uuid.uuid4())\n        \n        # Get the COBOL code from form (file upload or pasted code) or session\n        cobol_code = None\n        \n        # Check if code was uploaded as file\n        file_fields = ['cobolFile', 'file']  # Check multiple possible field names\n        for field_name in file_fields:\n            if field_name in request.files and request.files[field_name].filename:\n                file = request.files[field_name]\n                logger.debug(f\"File uploaded: {file.filename}\")\n                try:\n                    cobol_code = file.read().decode('utf-8')\n                    break\n                except Exception as e:\n                    logger.error(f\"Error reading file: {str(e)}\")\n        \n        # If no file, check for pasted code\n        if not cobol_code:\n            for field_name in ['cobolCode', 'code']:  # Check multiple possible field names\n                if field_name in request.form and request.form[field_name].strip():\n                    logger.debug(f\"Code found in form field: {field_name}\")\n                    cobol_code = request.form[field_name]\n                    break\n        \n        # If still no code, try session\n        if not cobol_code:\n            cobol_code = session.get('cobol_code', '')\n            if cobol_code:\n                logger.debug(f\"Retrieved code from session, length: {len(cobol_code)}\")\n            \n        if not cobol_code:\n            logger.error(\"No COBOL code found for processing\")\n            return jsonify({\"error\": \"No COBOL code found for processing\"}), 400\n            \n        # Store the code in session\n        session['cobol_code'] = cobol_code\n        session['job_id'] = job_id\n        \n        # Initialize job status in session\n        session['job_status'] = {\n            'status': 'processing',\n            'progress_percentage': 10,\n            'status_message': 'Parsing COBOL code...',\n            'started_at': datetime.utcnow().isoformat(),\n            'result': None,\n            'error': None\n        }\n        \n        # Step 1: Parse COBOL code\n        parsed_structure = parse_cobol(cobol_code)\n        \n        # Step 2: Extract structured information using Perplexity AI\n        structured_data = extract_structure(cobol_code, parsed_structure)\n        \n        # Step 3: Generate documentation with Perplexity AI\n        documentation = generate_documentation(structured_data)\n        \n        # Step 4: Generate diagrams for the documentation with Perplexity AI\n        final_documentation = generate_diagrams(documentation)\n        \n        # Step 5: Enhance with tabbed diagram views if needed\n        if '```mermaid' in final_documentation and '<div class=\"mermaid-container\">' not in final_documentation:\n            try:\n                from utils.mermaid_viewer import enhance_markdown_with_tabs\n                final_documentation = enhance_markdown_with_tabs(final_documentation)\n                logger.debug(\"Enhanced documentation with tabbed diagram views\")\n            except Exception as e:\n                logger.warning(f\"Could not enhance documentation with tabbed diagram views: {str(e)}\")\n        \n        # Store documentation in a temporary file rather than in the session\n        doc_id = str(uuid.uuid4())\n        session['doc_id'] = doc_id\n        tmp_path = f\"/tmp/{doc_id}.md\"\n        \n        # Write documentation to temporary file\n        with open(tmp_path, \"w\") as f:\n            f.write(final_documentation)\n            \n        # Store just basic metadata in session\n        doc_metadata = {\n            'length': len(final_documentation),\n            'timestamp': datetime.utcnow().isoformat(),\n        }\n        session['doc_metadata'] = doc_metadata\n        \n        # Store the documentation in the session as well for job status endpoint\n        session['documentation'] = final_documentation\n        \n        # Store program ID in session for the download filename\n        if structured_data and 'program_id' in structured_data:\n            session['program_id'] = structured_data.get('program_id')\n        \n        # Convert Markdown to HTML on server-side\n        # Define custom extensions for proper markdown processing\n        md = markdown.Markdown(\n            extensions=[\n                'markdown.extensions.extra',\n                'markdown.extensions.codehilite',\n                'markdown.extensions.tables',\n                'markdown.extensions.toc'\n            ]\n        )\n        \n        try:\n            # Replace mermaid code blocks with proper divs for mermaid.js\n            # This preserves mermaid blocks for client-side rendering\n            try:\n                mermaid_processed = final_documentation\n                mermaid_blocks = re.findall(r'```mermaid([\\s\\S]*?)```', mermaid_processed)\n                \n                for i, block in enumerate(mermaid_blocks):\n                    # Replace each mermaid code block with a div\n                    mermaid_processed = mermaid_processed.replace(\n                        f\"```mermaid{block}```\",\n                        f'<div class=\"mermaid\">{block.strip()}</div>',\n                        1  # Replace only the first occurrence each time\n                    )\n                logger.debug(f\"Processed {len(mermaid_blocks)} mermaid blocks\")\n            except Exception as mermaid_error:\n                logger.error(f\"Error processing mermaid blocks: {str(mermaid_error)}\")\n                # If mermaid processing fails, use original documentation\n                mermaid_processed = final_documentation\n            \n            # Process regular markdown after handling mermaid blocks\n            try:\n                html_content = md.convert(mermaid_processed)\n                logger.info(\"Successfully converted markdown to HTML on server-side\")\n                \n                # Additional step to fix code blocks and ensure HTML is valid for JSON\n                html_content = re.sub(\n                    r'<code>(.*?)</code>',\n                    lambda m: f'<code>{m.group(1).replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")}</code>',\n                    html_content,\n                    flags=re.DOTALL\n                )\n                \n                # Update the job status to completed\n                session['job_status'] = {\n                    'status': 'completed',\n                    'progress_percentage': 100,\n                    'status_message': 'Documentation generated successfully',\n                    'result': {\n                        'documentation': html_content,\n                        'format': 'html',\n                        'job_id': job_id\n                    }\n                }\n                \n                # Create a Response object with explicit content-type\n                from flask import Response\n                response_data = json.dumps({\n                    \"status\": \"success\",\n                    \"job_id\": job_id,\n                    \"documentation\": html_content,\n                    \"format\": \"html\"\n                })\n                \n                return Response(\n                    response=response_data,\n                    status=200,\n                    mimetype=\"application/json\"\n                )\n            except Exception as html_error:\n                logger.error(f\"Error during HTML conversion/escaping: {str(html_error)}\")\n                \n                # Update the job status to completed but with markdown format\n                session['job_status'] = {\n                    'status': 'completed',\n                    'progress_percentage': 100,\n                    'status_message': 'Documentation generated successfully (markdown format)',\n                    'result': {\n                        'documentation': final_documentation,\n                        'format': 'markdown',\n                        'job_id': job_id\n                    }\n                }\n                \n                # If HTML conversion fails, use original markdown as fallback\n                return jsonify({\n                    \"status\": \"success\",\n                    \"job_id\": job_id,\n                    \"documentation\": final_documentation,\n                    \"format\": \"markdown\"\n                })\n            \n        except Exception as md_error:\n            logger.error(f\"Error converting markdown to HTML: {str(md_error)}\")\n            # Fall back to sending raw markdown\n            return jsonify({\n                \"status\": \"success\",\n                \"job_id\": job_id,\n                \"documentation\": final_documentation,\n                \"format\": \"markdown\"\n            })\n        \n    except Exception as e:\n        logger.error(f\"Error processing COBOL code: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/agent/process\", methods=[\"POST\"])\n@csrf.exempt\ndef agent_process_cobol():\n    try:\n        # Import the agent\n        from agent_fixed import COBOLDocumentationAgent\n        \n        # Log full request information for debugging\n        logger.info(f\"API Agent Process - Request method: {request.method}\")\n        logger.info(f\"API Agent Process - Request content type: {request.content_type}\")\n        logger.info(f\"API Agent Process - Request form keys: {list(request.form.keys()) if request.form else 'None'}\")\n        logger.info(f\"API Agent Process - Request headers: {dict(request.headers)}\")\n        logger.info(f\"API Agent Process - Request query string: {request.query_string.decode('utf-8') if request.query_string else 'None'}\")\n        \n        # Safely print the request data for debugging\n        try:\n            # Log the first part of different types of request data for debugging\n            request_data = request.get_data(as_text=True)\n            logger.info(f\"API Agent Process - Raw request data first 100 chars: {request_data[:100]}\")\n            \n            if request.form:\n                logger.info(f\"API Agent Process - Form data available with keys: {list(request.form.keys())}\")\n            if request.json:\n                logger.info(f\"API Agent Process - JSON data available with keys: {list(request.json.keys())}\")\n                \n            # Log CSRF token presence\n            csrf_token = request.form.get('csrf_token') or request.headers.get('X-CSRFToken')\n            logger.info(f\"API Agent Process - CSRF token present: {bool(csrf_token)}\")\n            \n        except Exception as data_error:\n            logger.error(f\"API Agent Process - Error getting request data: {str(data_error)}\")\n        \n        # Get the COBOL code from session\n        cobol_code = session.get('cobol_code', '')\n        job_id = session.get('job_id', str(uuid.uuid4()))\n        user_id = session.get('user_id')\n        \n        if not cobol_code:\n            return jsonify({\"error\": \"No COBOL code found for processing\"}), 400\n        \n        # Create an agent instance\n        agent = COBOLDocumentationAgent(session_id=job_id, user_id=user_id)\n        \n        # Get user preferences from session\n        user_settings = session.get('user_settings', {})\n        if user_settings:\n            for key, value in user_settings.items():\n                agent.set_user_preference(key, value)\n                \n        # Get job_id and preferences from form data (new URL-encoded format)\n        preferences = {}\n        \n        # Get job_id from form data or URL params if available\n        form_job_id = request.form.get('job_id')\n        if form_job_id:\n            job_id = form_job_id\n            logger.debug(f\"Using job_id from form data: {job_id}\")\n        \n        # Handle individual preference fields as sent from the frontend\n        if request.form:\n            logger.debug(f\"Form data received: {list(request.form.keys())}\")\n            llm_provider = request.form.get('llm_provider')\n            llm_model = request.form.get('llm_model')\n            detail_level = request.form.get('detail_level')\n            audience = request.form.get('audience')\n            doc_style = request.form.get('documentation_style')\n            \n            # Create preferences dictionary from individual fields\n            if llm_provider:\n                preferences['llm_provider'] = llm_provider\n            if llm_model:\n                preferences['llm_model'] = llm_model\n            if detail_level:\n                preferences['detail_level'] = detail_level\n            if audience:\n                preferences['audience'] = audience\n            if doc_style:\n                preferences['documentation_style'] = doc_style\n            \n            logger.debug(f\"Constructed preferences from form fields: {preferences}\")\n        # Fall back to JSON data if form data isn't in the expected format\n        elif request.json:\n            if 'preferences' in request.json:\n                preferences = request.json.get('preferences', {})\n            else:\n                # Try to build preferences from individual fields in JSON\n                preferences = {\n                    'llm_provider': request.json.get('llm_provider'),\n                    'llm_model': request.json.get('llm_model'),\n                    'detail_level': request.json.get('detail_level'),\n                    'audience': request.json.get('audience'),\n                    'documentation_style': request.json.get('documentation_style')\n                }\n                # Remove None values\n                preferences = {k: v for k, v in preferences.items() if v is not None}\n            \n            logger.debug(f\"Got preferences from JSON data: {preferences}\")\n        \n        # Apply the preferences\n        for key, value in preferences.items():\n            logger.debug(f\"Setting user preference: {key} = {value}\")\n            agent.set_user_preference(key, value)\n        \n        # Step 1: Parse COBOL code\n        parsed_structure = parse_cobol(cobol_code)\n        \n        # Step 2: Use agent to analyze code and generate documentation\n        structured_data = agent.analyze_cobol_structure(cobol_code, parsed_structure)\n        documentation = agent.generate_documentation(structured_data)\n        \n        # Step 3: Ensure the mermaid tabs are applied\n        if '```mermaid' in documentation and '<div class=\"mermaid-container\">' not in documentation:\n            try:\n                from utils.mermaid_viewer import enhance_markdown_with_tabs\n                documentation = enhance_markdown_with_tabs(documentation)\n                logger.debug(\"Enhanced documentation with tabbed diagram views in agent processing\")\n            except Exception as e:\n                logger.warning(f\"Could not enhance documentation with tabbed diagram views: {str(e)}\")\n        \n        # Store only necessary data in session\n        # Store the program_id in session for the download filename\n        # Full documentation is too large for session cookie, so we'll limit it\n        \n        # Store only program_id and a truncated version of the documentation\n        if structured_data and 'program_id' in structured_data:\n            session['program_id'] = structured_data.get('program_id')\n            \n        # Store documentation in a temporary file rather than in the session\n        doc_id = str(uuid.uuid4())\n        session['doc_id'] = doc_id\n        tmp_path = f\"/tmp/{doc_id}.md\"\n        \n        # Write documentation to temporary file\n        with open(tmp_path, \"w\") as f:\n            f.write(documentation)\n            \n        # Store just basic metadata in session\n        doc_metadata = {\n            'length': len(documentation),\n            'timestamp': datetime.utcnow().isoformat(),\n        }\n        session['doc_metadata'] = doc_metadata\n        \n        # If user is logged in, save the documentation\n        if user_id:\n            try:\n                # Get the project, or create one if it doesn't exist\n                project = Project.query.filter_by(\n                    user_id=user_id,\n                    name=f\"COBOL Documentation - {structured_data.get('program_id', 'Unknown')}\"\n                ).first()\n                \n                if not project:\n                    project = Project(\n                        name=f\"COBOL Documentation - {structured_data.get('program_id', 'Unknown')}\",\n                        description=structured_data.get('description', 'No description available'),\n                        user_id=user_id\n                    )\n                    db.session.add(project)\n                    db.session.flush()\n                \n                # Create or update the COBOL file\n                cobol_file = CobolFile.query.filter_by(\n                    project_id=project.id,\n                    program_id=structured_data.get('program_id', 'Unknown')\n                ).first()\n                \n                if not cobol_file:\n                    cobol_file = CobolFile(\n                        filename=f\"{structured_data.get('program_id', 'program')}.cbl\",\n                        content=cobol_code,\n                        program_id=structured_data.get('program_id', 'Unknown'),\n                        project_id=project.id\n                    )\n                    db.session.add(cobol_file)\n                    db.session.flush()\n                else:\n                    cobol_file.content = cobol_code\n                    cobol_file.updated_at = datetime.utcnow()\n                \n                # Create or update the documentation\n                doc = Documentation.query.filter_by(cobol_file_id=cobol_file.id).first()\n                if not doc:\n                    doc = Documentation(\n                        content=documentation,\n                        cobol_file_id=cobol_file.id\n                    )\n                    db.session.add(doc)\n                else:\n                    doc.content = documentation\n                    doc.updated_at = datetime.utcnow()\n                \n                db.session.commit()\n                logger.info(f\"Saved documentation for user {user_id}\")\n                \n            except Exception as db_error:\n                logger.error(f\"Error saving documentation to database: {str(db_error)}\")\n                db.session.rollback()\n        \n        # Convert Markdown to HTML on server-side\n        import markdown\n        import re  # Ensure re is imported\n        \n        # Define custom extensions for proper markdown processing\n        md = markdown.Markdown(\n            extensions=[\n                'markdown.extensions.extra',\n                'markdown.extensions.codehilite',\n                'markdown.extensions.tables',\n                'markdown.extensions.toc'\n            ]\n        )\n        \n        try:\n            # Replace mermaid code blocks with proper divs for mermaid.js\n            # This preserves mermaid blocks for client-side rendering\n            mermaid_processed = documentation\n            mermaid_blocks = re.findall(r'```mermaid([\\s\\S]*?)```', mermaid_processed)\n            \n            for i, block in enumerate(mermaid_blocks):\n                # Replace each mermaid code block with a div\n                mermaid_processed = mermaid_processed.replace(\n                    f\"```mermaid{block}```\",\n                    f'<div class=\"mermaid\">{block.strip()}</div>',\n                    1  # Replace only the first occurrence each time\n                )\n            \n            # Process regular markdown after handling mermaid blocks\n            html_content = md.convert(mermaid_processed)\n            logger.info(\"Successfully converted markdown to HTML on server-side in agent process\")\n            \n            # Additional step to fix code blocks\n            html_content = re.sub(\n                r'<code>(.*?)</code>',\n                lambda m: f'<code>{m.group(1).replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")}</code>',\n                html_content,\n                flags=re.DOTALL\n            )\n            \n            # Create a direct response with explicit content-type\n            response_data = json.dumps({\n                \"status\": \"success\",\n                \"job_id\": job_id,\n                \"documentation\": html_content,\n                \"format\": \"html\",\n                \"program_details\": {\n                    \"program_id\": structured_data.get(\"program_id\", \"Unknown\"),\n                    \"description\": structured_data.get(\"description\", \"No description available\")\n                }\n            })\n            \n            # Create a Response object with explicit content-type\n            response = Response(\n                response=response_data,\n                status=200,\n                mimetype=\"application/json\"\n            )\n            \n            # Add CORS and other headers\n            response.headers[\"Content-Type\"] = \"application/json; charset=utf-8\"\n            response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n            \n            logger.info(f\"Sending success response with content type: {response.headers['Content-Type']}\")\n            \n            return response\n            \n        except Exception as md_error:\n            logger.error(f\"Error converting markdown to HTML in agent process: {str(md_error)}\")\n            # Fall back to sending raw markdown with explicit content type\n            response_data = json.dumps({\n                \"status\": \"success\",\n                \"job_id\": job_id,\n                \"documentation\": documentation,\n                \"format\": \"markdown\",\n                \"program_details\": {\n                    \"program_id\": structured_data.get(\"program_id\", \"Unknown\"),\n                    \"description\": structured_data.get(\"description\", \"No description available\")\n                }\n            })\n            \n            # Create a Response object with explicit content-type\n            response = Response(\n                response=response_data,\n                status=200,\n                mimetype=\"application/json\"\n            )\n            \n            # Add CORS and other headers\n            response.headers[\"Content-Type\"] = \"application/json; charset=utf-8\"\n            response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n            \n            logger.info(f\"Sending fallback markdown response with content type: {response.headers['Content-Type']}\")\n            \n            return response\n        \n    except Exception as e:\n        logger.error(f\"Error in agent processing COBOL code: {str(e)}\")\n        \n        # Create an error response with explicit content type\n        response_data = json.dumps({\"error\": str(e)})\n        \n        # Create a Response object with explicit content-type\n        response = Response(\n            response=response_data,\n            status=500,\n            mimetype=\"application/json\"\n        )\n        \n        # Add CORS and other headers\n        response.headers[\"Content-Type\"] = \"application/json; charset=utf-8\"\n        response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n        \n        logger.info(f\"Sending error response with content type: {response.headers['Content-Type']}\")\n        \n        return response\n\n@app.route(\"/api/job-status\", methods=[\"GET\"])\n@csrf.exempt\ndef get_job_status():\n    \"\"\"Get the status of a background job\"\"\"\n    try:\n        job_id = request.args.get('job_id')\n        if not job_id:\n            return jsonify({\"error\": \"No job ID provided\"}), 400\n            \n        # Log information for troubleshooting\n        logger.debug(f\"Job status request for job_id: {job_id}\")\n            \n        # Check if we have the requested job ID in the session\n        session_job_id = session.get('job_id')\n        documentation = session.get('documentation')\n        job_status = session.get('job_status', {})\n        doc_id = session.get('doc_id')\n        \n        logger.debug(f\"Session job_id: {session_job_id}, doc_id: {doc_id}\")\n        \n        # Check if we have temporary file documentation\n        if doc_id:\n            tmp_path = f\"/tmp/{doc_id}.md\"\n            try:\n                if os.path.exists(tmp_path):\n                    with open(tmp_path, \"r\") as f:\n                        documentation = f.read()\n                    logger.debug(f\"Retrieved documentation from temp file: {tmp_path}\")\n            except Exception as temp_error:\n                logger.error(f\"Error reading temp documentation: {str(temp_error)}\")\n        \n        if session_job_id and session_job_id == job_id and documentation:\n            # We have the documentation in the session or temp file, job is complete\n            logger.debug(f\"Returning completed status for job_id: {job_id}\")\n            return jsonify({\n                'status': 'completed',\n                'progress_percentage': 100,\n                'status_message': 'Documentation generated successfully',\n                'result': {\n                    'job_id': job_id,\n                    'markdown': documentation\n                }\n            })\n        elif session_job_id and session_job_id == job_id and job_status:\n            # Job is known and we have status information\n            # Return the status stored in the session\n            logger.debug(f\"Returning stored job status for job_id: {job_id}\")\n            return jsonify(job_status)\n        elif session_job_id and session_job_id == job_id:\n            # Job is known but no detailed status or documentation yet\n            logger.debug(f\"Returning processing status for job_id: {job_id}\")\n            return jsonify({\n                'status': 'processing',\n                'progress_percentage': 50,\n                'status_message': 'Processing COBOL code...'\n            })\n        \n        # For unknown job IDs, return an \"in progress\" response instead of 404\n        # This prevents client-side errors during polling\n        logger.warning(f\"Unknown job_id requested: {job_id}, returning fallback processing status\")\n        return jsonify({\n            'status': 'processing',\n            'progress_percentage': 30,\n            'status_message': 'Initializing job...'\n        })\n    except Exception as e:\n        logger.error(f\"Error getting job status: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/translate\", methods=[\"POST\"])\ndef translate():\n    try:\n        # Get doc_id from session\n        doc_id = session.get('doc_id')\n        target_language = request.form.get('language', 'en')\n        \n        if not doc_id:\n            return jsonify({\"error\": \"No documentation found for translation\"}), 400\n        \n        # Read from temporary file\n        tmp_path = f\"/tmp/{doc_id}.md\"\n        \n        try:\n            with open(tmp_path, \"r\") as f:\n                documentation = f.read()\n        except FileNotFoundError:\n            return jsonify({\"error\": \"Documentation file not found, it may have expired\"}), 400\n        \n        # Translate the documentation\n        translated_doc = translate_documentation(documentation, target_language)\n        \n        # Create a new temp file for the translated version\n        translated_doc_id = str(uuid.uuid4())\n        translated_tmp_path = f\"/tmp/{translated_doc_id}.md\"\n        \n        # Save the translated documentation to a new temp file\n        with open(translated_tmp_path, \"w\") as f:\n            f.write(translated_doc)\n            \n        # Update session with the new doc_id\n        session['doc_id'] = translated_doc_id\n        session['doc_metadata'] = {\n            'length': len(translated_doc),\n            'timestamp': datetime.utcnow().isoformat(),\n            'language': target_language\n        }\n        \n        return jsonify({\n            \"status\": \"success\",\n            \"translated_documentation\": translated_doc\n        })\n        \n    except Exception as e:\n        logger.error(f\"Error translating documentation: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/download\", methods=[\"GET\"])\ndef download_documentation():\n    try:\n        # Get doc_id from session\n        doc_id = session.get('doc_id')\n        \n        if not doc_id:\n            return jsonify({\"error\": \"No documentation found for download\"}), 400\n        \n        # Try to read from the temporary file\n        tmp_path = f\"/tmp/{doc_id}.md\"\n        \n        try:\n            with open(tmp_path, \"r\") as f:\n                documentation = f.read()\n        except FileNotFoundError:\n            return jsonify({\"error\": \"Documentation file not found, it may have expired\"}), 400\n        \n        # Get program ID for the filename if available\n        program_id = session.get('program_id', 'cobol')\n        \n        # Generate timestamp in GMT+0 format (pass 0 to timestamp function)\n        ts = timestamp(timezone_offset=0)\n        \n        # Create a filename with the timestamp prefix in YYMMDD_HHMMSS format\n        # Extract only the date/time part from the timestamp (remove the GMT part)\n        ts_prefix = ts.split()[0]  # Get just the YYYYMMDD_HHMMSS part\n        filename = f\"{ts_prefix}_{program_id}_documentation.md\"\n        \n        # Use the existing file rather than creating another copy\n        return send_file(tmp_path, as_attachment=True, download_name=filename)\n        \n    except Exception as e:\n        logger.error(f\"Error downloading documentation: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n        \n@app.route(\"/api/validate-mermaid\", methods=[\"POST\"])\ndef validate_mermaid():\n    try:\n        # Get Mermaid code from request\n        mermaid_code = request.form.get('mermaid_code', '')\n        \n        if not mermaid_code:\n            return jsonify({\"error\": \"No Mermaid code provided\"}), 400\n        \n        # Import the validator\n        from utils.perplexity_client import validate_mermaid_syntax\n        \n        # Validate the Mermaid code\n        is_valid, corrected_code, message = validate_mermaid_syntax(mermaid_code)\n        \n        # Log the validation attempt\n        if not is_valid:\n            logger.info(f\"Mermaid validation: {message}\")\n        \n        return jsonify({\n            \"is_valid\": is_valid,\n            \"corrected_code\": corrected_code,\n            \"message\": message,\n            \"original_code\": mermaid_code\n        })\n        \n    except Exception as e:\n        logger.error(f\"Error validating Mermaid code: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n\n@app.route(\"/llm-settings\", methods=[\"GET\", \"POST\"])\n@login_required\ndef llm_settings():\n    # Get available LLM providers and models\n    available_providers = llm_selector.get_providers()\n    \n    # Get current user settings\n    user_settings = {}\n    if hasattr(current_user, 'id'):\n        # TODO: Load user settings from database when implemented\n        # For now, use session as temporary storage\n        user_settings = session.get('user_settings', {})\n    \n    # Default settings if none exist\n    if not user_settings:\n        user_settings = {\n            'llm_provider': 'groq',         # Default to GROQ\n            'llm_model': None,              # Will be set to default for the provider\n            'detail_level': 'medium',       # medium detail level\n            'audience': 'technical',        # technical audience\n            'documentation_style': 'formal', # formal style\n            'tooltip_delay': 1000,          # 1000ms delay for tooltips\n            'tooltip_x_offset': 10,         # 10px right offset\n            'tooltip_y_offset': 10,         # 10px down offset\n            'tooltip_font_size': 6,         # 6px font size\n            'tooltip_opacity': 0.9          # 90% opacity\n        }\n        session['user_settings'] = user_settings\n    \n    # Handle form submission\n    if request.method == \"POST\":\n        # Update LLM settings\n        user_settings['llm_provider'] = request.form.get('llm_provider', user_settings['llm_provider'])\n        user_settings['llm_model'] = request.form.get('llm_model', user_settings['llm_model'])\n        user_settings['detail_level'] = request.form.get('detail_level', user_settings['detail_level'])\n        user_settings['audience'] = request.form.get('audience', user_settings['audience'])\n        user_settings['documentation_style'] = request.form.get('documentation_style', user_settings['documentation_style'])\n        \n        # Save settings to session\n        session['user_settings'] = user_settings\n        \n        # TODO: Save user settings to database when implemented\n        \n        flash(\"LLM settings updated successfully\", \"success\")\n        return redirect(url_for('llm_settings'))\n    \n    # Get models for the currently selected provider\n    current_provider = user_settings.get('llm_provider', 'groq')\n    available_models = []\n    \n    if current_provider in available_providers:\n        available_models = llm_selector.get_models(current_provider)\n    elif current_provider == 'groq' and os.environ.get('GROQ_API_KEY'):\n        # Special case for Groq if not in selector but API key exists\n        available_models = get_groq_models()\n    \n    # Check if API keys are set\n    has_perplexity_key = bool(os.environ.get('PERPLEXITY_API_KEY'))\n    has_groq_key = bool(os.environ.get('GROQ_API_KEY'))\n    \n    return render_template(\"llm_settings.html\", \n                          user_settings=user_settings,\n                          available_providers=available_providers,\n                          available_models=available_models,\n                          has_perplexity_key=has_perplexity_key,\n                          has_groq_key=has_groq_key)\n\n@app.route(\"/tooltip-settings\", methods=[\"GET\", \"POST\"])\n@login_required\ndef tooltip_settings():\n    # Get current user settings\n    user_settings = {}\n    if hasattr(current_user, 'id'):\n        # For now, use session as temporary storage\n        user_settings = session.get('user_settings', {})\n    \n    # Default settings if none exist\n    if not user_settings:\n        user_settings = {\n            'llm_provider': 'groq',         # Default to GROQ\n            'llm_model': None,              # Will be set to default for the provider\n            'detail_level': 'medium',       # medium detail level\n            'audience': 'technical',        # technical audience\n            'documentation_style': 'formal', # formal style\n            'tooltip_delay': 1000,          # 1000ms delay for tooltips\n            'tooltip_x_offset': 10,         # 10px right offset\n            'tooltip_y_offset': 10,         # 10px down offset\n            'tooltip_font_size': 6,         # 6px font size\n            'tooltip_opacity': 0.9          # 90% opacity\n        }\n        session['user_settings'] = user_settings\n    \n    # Handle form submission\n    if request.method == \"POST\":\n        # Update tooltip settings\n        try:\n            tooltip_delay = int(request.form.get('tooltip_delay', 1000))\n            tooltip_x_offset = int(request.form.get('tooltip_x_offset', 10))\n            tooltip_y_offset = int(request.form.get('tooltip_y_offset', 10))\n            tooltip_font_size = int(request.form.get('tooltip_font_size', 10))\n            # Get the value and check for NaN before conversion\n            opacity_value = request.form.get('tooltip_opacity', '0.9')\n            if opacity_value.lower() == 'nan':\n                tooltip_opacity = 0.9  # Default if NaN is detected\n            else:\n                try:\n                    tooltip_opacity = float(opacity_value)\n                    # Check for NaN after conversion (handles case sensitivity)\n                    if tooltip_opacity != tooltip_opacity:  # NaN check - NaN is the only value that doesn't equal itself\n                        tooltip_opacity = 0.9\n                except ValueError:\n                    tooltip_opacity = 0.9\n            \n            # Add validation to ensure reasonable values\n            user_settings['tooltip_delay'] = max(0, min(5000, tooltip_delay))  # 0-5000ms\n            user_settings['tooltip_x_offset'] = max(-500, min(500, tooltip_x_offset))  # -500px to +500px\n            user_settings['tooltip_y_offset'] = max(-500, min(500, tooltip_y_offset))  # -500px to +500px\n            user_settings['tooltip_font_size'] = max(6, min(48, tooltip_font_size))  # 6-48px font size\n            user_settings['tooltip_opacity'] = max(0.1, min(1.0, tooltip_opacity))  # 0.1-1.0 opacity\n            \n            # Update the actual JS file with new default values\n            try:\n                with open('static/js/tooltip-config.js', 'r') as file:\n                    content = file.read()\n                    \n                # Update default values using regex\n                import re\n                # Replace delay value\n                content = re.sub(r'(delay:)\\s*(\\d+),', f'delay: {user_settings[\"tooltip_delay\"]},', content)\n                # Replace xOffset value\n                content = re.sub(r'(xOffset:)\\s*(-?\\d+),', f'xOffset: {user_settings[\"tooltip_x_offset\"]},', content)\n                # Replace yOffset value\n                content = re.sub(r'(yOffset:)\\s*(-?\\d+),', f'yOffset: {user_settings[\"tooltip_y_offset\"]},', content)\n                # Replace fontSize value\n                content = re.sub(r'(fontSize:)\\s*(\\d+),', f'fontSize: {user_settings[\"tooltip_font_size\"]},', content)\n                # Replace opacity value if it exists\n                if re.search(r'(opacity:)\\s*([\\d\\.]+)', content):\n                    content = re.sub(r'(opacity:)\\s*([\\d\\.]+)', f'opacity: {user_settings[\"tooltip_opacity\"]},', content)\n                else:\n                    # Add opacity setting if it doesn't exist\n                    content = content.replace('fontSize:', 'opacity: ' + str(user_settings[\"tooltip_opacity\"]) + ',\\n    fontSize:')\n                \n                # Write back the updated content\n                with open('static/js/tooltip-config.js', 'w') as file:\n                    file.write(content)\n                \n                app.logger.info(f\"Updated tooltip-config.js with new defaults: delay={user_settings['tooltip_delay']}, \" +\n                               f\"xOffset={user_settings['tooltip_x_offset']}, yOffset={user_settings['tooltip_y_offset']}, \" +\n                               f\"fontSize={user_settings['tooltip_font_size']}, opacity={user_settings['tooltip_opacity']}\")\n                \n            except Exception as e:\n                app.logger.error(f\"Failed to update tooltip-config.js: {str(e)}\")\n                # This is just a convenience feature, so we don't need to fail if it doesn't work\n                flash(\"Settings saved to session but could not update JS file: \" + str(e), \"warning\")\n                \n        except ValueError:\n            # If conversion fails, use default values\n            user_settings['tooltip_delay'] = 1000\n            user_settings['tooltip_x_offset'] = 10\n            user_settings['tooltip_y_offset'] = 10\n            user_settings['tooltip_font_size'] = 6\n            user_settings['tooltip_opacity'] = 0.9\n            flash(\"Invalid tooltip settings provided. Using default values.\", \"warning\")\n        \n        # Save settings to session\n        session['user_settings'] = user_settings\n        \n        # TODO: Save user settings to database when implemented\n        \n        flash(\"Tooltip settings updated successfully\", \"success\")\n        return redirect(url_for('tooltip_settings'))\n    \n    return render_template(\"tooltip_settings.html\", user_settings=user_settings)\n\n@app.route(\"/settings\")\n@login_required\ndef settings():\n    # Redirect to LLM settings page\n    return redirect(url_for('llm_settings'))\n\n@app.route(\"/admin/db-dump\")\n@login_required\ndef db_dump():\n    \"\"\"\n    Database dump page for administrators\n    \"\"\"\n    return render_template(\"admin/db_dump.html\")\n\n@app.route(\"/api/models\", methods=[\"GET\"])\ndef get_models():\n    provider = request.args.get('provider', 'groq')\n    \n    # Get models for the specified provider\n    if provider in llm_selector.get_providers():\n        models = llm_selector.get_models(provider)\n    elif provider == 'groq' and os.environ.get('GROQ_API_KEY'):\n        # Special case for Groq if not in selector but API key exists\n        models = get_groq_models()\n    else:\n        models = []\n    \n    return jsonify({\n        \"provider\": provider,\n        \"models\": models\n    })\n\n@app.route(\"/api/llm-settings\", methods=[\"GET\"])\ndef get_llm_settings():\n    \"\"\"Get current LLM settings for use in the index page\"\"\"\n    # Get user settings from session\n    user_settings = {}\n    if hasattr(current_user, 'id'):\n        user_settings = session.get('user_settings', {})\n    \n    # Default settings if none exist\n    if not user_settings:\n        user_settings = {\n            'llm_provider': 'groq',          # Default to GROQ\n            'llm_model': None,               # Will be set to default for the provider\n            'detail_level': 'medium',        # medium detail level\n            'audience': 'technical',         # technical audience\n            'documentation_style': 'formal', # formal style\n            'tooltip_delay': 1000,           # 1000ms delay for tooltips\n            'tooltip_x_offset': 10,          # 10px right offset\n            'tooltip_y_offset': 10,          # 10px down offset\n            'tooltip_font_size': 12,         # 12px font size\n            'tooltip_opacity': 0.75          # 75% opacity\n        }\n        session['user_settings'] = user_settings\n    \n    # Check if API keys are set\n    has_perplexity_key = bool(os.environ.get('PERPLEXITY_API_KEY'))\n    has_groq_key = bool(os.environ.get('GROQ_API_KEY'))\n    \n    # Get models for the current provider\n    models = []\n    current_provider = user_settings.get('llm_provider', 'groq')\n    \n    if current_provider in llm_selector.get_providers():\n        models = llm_selector.get_models(current_provider)\n    elif current_provider == 'groq' and has_groq_key:\n        models = get_groq_models()\n    \n    # Create a JavaScript-friendly data structure\n    settings_data = {\n        \"settings\": user_settings,\n        \"has_perplexity_key\": has_perplexity_key,\n        \"has_groq_key\": has_groq_key,\n        \"available_models\": models\n    }\n    \n    return jsonify(settings_data)\n\n@app.route(\"/api/check-keys\", methods=[\"GET\"])\ndef check_api_keys():\n    \"\"\"Check if API keys are available and prompt user if needed\"\"\"\n    # Get current provider from user settings or from query parameters\n    provider = request.args.get('provider', None)\n    \n    if current_user.is_authenticated:\n        user_settings = session.get('user_settings', {})\n        if not provider:\n            provider = user_settings.get('llm_provider', 'groq')\n    else:\n        # For unauthenticated users, default to 'groq' if not specified\n        if not provider:\n            provider = 'groq'\n    \n    result = {\n        \"perplexity\": {\"available\": bool(os.environ.get('PERPLEXITY_API_KEY'))},\n        \"groq\": {\"available\": bool(os.environ.get('GROQ_API_KEY'))},\n        \"selected_provider\": provider,\n        \"needs_key\": False\n    }\n    \n    # Check if the selected provider needs a key\n    if provider == 'perplexity' and not result[\"perplexity\"][\"available\"]:\n        result[\"needs_key\"] = True\n    elif provider == 'groq' and not result[\"groq\"][\"available\"]:\n        result[\"needs_key\"] = True\n    \n    return jsonify(result)\n\n@app.route(\"/api/save-keys\", methods=[\"POST\"])\ndef save_api_keys():\n    # In production, you would save these keys securely\n    # For simplicity, we'll save them in environment variables\n    perplexity_key = request.form.get('perplexity_key')\n    groq_key = request.form.get('groq_key')\n    \n    result = {\n        \"perplexity\": {\"updated\": False, \"message\": \"\"},\n        \"groq\": {\"updated\": False, \"message\": \"\"}\n    }\n    \n    if perplexity_key:\n        # In a real app, you would store this securely\n        # For demo, we'll set it in environment variables\n        os.environ['PERPLEXITY_API_KEY'] = perplexity_key\n        result[\"perplexity\"][\"updated\"] = True\n        result[\"perplexity\"][\"message\"] = \"Perplexity API key updated successfully\"\n        \n        # For authenticated users, save the preference\n        if current_user.is_authenticated:\n            user_settings = session.get('user_settings', {})\n            user_settings['has_perplexity_key'] = True\n            session['user_settings'] = user_settings\n        \n    if groq_key:\n        # In a real app, you would store this securely\n        # For demo, we'll set it in environment variables\n        os.environ['GROQ_API_KEY'] = groq_key\n        result[\"groq\"][\"updated\"] = True\n        result[\"groq\"][\"message\"] = \"Groq API key updated successfully\"\n        \n        # For authenticated users, save the preference\n        if current_user.is_authenticated:\n            user_settings = session.get('user_settings', {})\n            user_settings['has_groq_key'] = True\n            session['user_settings'] = user_settings\n        \n        # Reinitialize the LLM selector to recognize the new API key\n        if \"groq\" not in llm_selector.get_providers():\n            llm_selector._initialize_providers()\n    \n    return jsonify(result)\n\n\n# Ledger Management Routes\n@app.route(\"/ledger\")\n@login_required\ndef ledger_dashboard():\n    \"\"\"\n    Display the source code ledger dashboard\n    \"\"\"\n    try:\n        # Get user settings for the document generator component\n        user_settings = {}\n        \n        # Get LLM provider settings\n        try:\n            # Get user settings from session\n            llm_settings_data = {}\n            if hasattr(current_user, 'id'):\n                llm_settings_data = session.get('user_settings', {})\n            \n            # Default settings if none exist\n            if not llm_settings_data:\n                llm_settings_data = {\n                    'llm_provider': 'groq',          # Default to GROQ\n                    'llm_model': None,               # Will be set to default for the provider\n                    'detail_level': 'medium',        # medium detail level\n                    'audience': 'technical',         # technical audience\n                    'documentation_style': 'formal', # formal style\n                    'tooltip_delay': 1000,           # 1000ms delay for tooltips\n                    'tooltip_x_offset': 10,          # 10px right offset\n                    'tooltip_y_offset': 10,          # 10px down offset\n                    'tooltip_font_size': 12,         # 12px font size\n                    'tooltip_opacity': 0.75          # 75% opacity\n                }\n                session['user_settings'] = llm_settings_data\n                \n            # Update user settings with session data\n            user_settings.update(llm_settings_data)\n        except Exception as llm_err:\n            print(f\"Error getting LLM settings: {str(llm_err)}\")\n            app.logger.error(f\"Error getting LLM settings: {str(llm_err)}\")\n            # Continue without LLM settings\n            user_settings['llm_provider'] = 'groq'  # Default fallback\n            user_settings['llm_model'] = 'default'  # Default fallback\n        \n        # Check if API keys are available\n        try:\n            api_key_status = check_api_keys()\n        except Exception as api_err:\n            print(f\"Error checking API keys: {str(api_err)}\")\n            app.logger.error(f\"Error checking API keys: {str(api_err)}\")\n            api_key_status = {'has_groq': False, 'has_perplexity': False}\n        \n        # Log the dashboard access\n        print(f\"Ledger dashboard accessed by: {current_user.username if current_user.is_authenticated else 'anonymous'}\")\n        print(f\"User settings for dashboard: {user_settings}\")\n        \n        # Pass all needed data to the template\n        return render_template(\n            \"ledger/dashboard.html\",\n            user_settings=user_settings,\n            api_key_status=api_key_status\n        )\n    except Exception as e:\n        import traceback\n        error_details = traceback.format_exc()\n        print(f\"ERROR in ledger_dashboard: {str(e)}\")\n        print(error_details)\n        \n        # Return a basic error page with the error details\n        return f\"\"\"\n        <html>\n        <head><title>Dashboard Error</title>\n        <style>\n            body {{ background-color: #111; color: #00ffff; font-family: 'IBM Plex Sans Condensed', monospace; padding: 20px; }}\n            .error {{ background-color: #222; padding: 20px; border-radius: 5px; white-space: pre-wrap; }}\n            h1 {{ color: #ff4757; }}\n            a {{ color: #00ffff; }}\n        </style>\n        </head>\n        <body>\n            <h1>Dashboard Error</h1>\n            <p>An error occurred while loading the ledger dashboard:</p>\n            <div class=\"error\">{str(e)}</div>\n            <h2>Details:</h2>\n            <div class=\"error\">{error_details}</div>\n            <p><a href=\"/\">Return to home page</a></p>\n        </body>\n        </html>\n        \"\"\", 500\n\n@app.route(\"/api/db-test\")\n@login_required\ndef db_test():\n    \"\"\"\n    Simple test endpoint for database connection and queries\n    \"\"\"\n    logger.debug(\"Database test endpoint called\")\n    try:\n        from utils.ledger_sql import LedgerSQL\n        \n        # Get database info\n        db_info = LedgerSQL.get_database_info()\n        logger.debug(f\"Database info: {db_info}\")\n        \n        # Run a simple query\n        tables_query = \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'\"\n        logger.debug(f\"Running test query: {tables_query}\")\n        tables = LedgerSQL.execute_query(tables_query, fetch_all=True)\n        \n        # Get row count\n        user_count_query = \"SELECT COUNT(*) FROM \\\"user\\\"\"\n        logger.debug(f\"Running user count query: {user_count_query}\")\n        user_count = LedgerSQL.execute_query(user_count_query, fetch_one=True)\n        \n        response_data = {\n            \"success\": True,\n            \"db_connected\": db_info.get('connected', False),\n            \"db_name\": db_info.get('database', 'Unknown'),\n            \"tables\": [table[0] for table in tables] if tables else [],\n            \"user_count\": user_count[0] if user_count else 0,\n            \"message\": \"Database test completed successfully\"\n        }\n        logger.debug(f\"DB test response: {response_data}\")\n        return jsonify(response_data)\n        \n    except Exception as e:\n        logger.error(f\"Database test error: {str(e)}\")\n        logger.error(traceback.format_exc())\n        return jsonify({\n            \"success\": False,\n            \"error\": str(e),\n            \"message\": \"Database test failed\"\n        }), 500\n\n@app.route(\"/api/execute-sql\", methods=[\"POST\"])\n@login_required\ndef execute_sql():\n    \"\"\"\n    Execute SQL query for testing database\n    \"\"\"\n    import traceback\n    from utils.ledger_sql import LedgerSQL\n    \n    # Debug request information\n    logger.debug(f\"execute_sql called by user: {current_user.username if current_user else 'Unknown'}\")\n    logger.debug(f\"Request JSON: {request.json}\")\n    logger.debug(f\"Request headers: {dict(request.headers)}\")\n    \n    # Get the query\n    query = request.json.get('query', '') if request.json else ''\n    logger.debug(f\"Received SQL query: {query}\")\n    \n    if not query:\n        logger.warning(\"Empty SQL query received\")\n        return jsonify({\"success\": False, \"message\": \"No SQL query provided\"}), 400\n    \n    # Basic security check - only allow SELECT queries\n    if not query.strip().lower().startswith('select'):\n        logger.warning(f\"Security check failed - non-SELECT query attempted: {query}\")\n        return jsonify({\n            \"success\": False, \n            \"message\": \"For security reasons, only SELECT queries are allowed\"\n        }), 403\n    \n    try:\n        # Check if database is connected\n        db_info = LedgerSQL.get_database_info()\n        if not db_info.get('connected', False):\n            logger.error(\"Database not connected\")\n            return jsonify({\n                \"success\": False,\n                \"message\": \"Database connection error. Please check the database configuration.\"\n            }), 500\n        \n        # Execute the query using our LedgerSQL module\n        logger.debug(f\"Executing SQL query via LedgerSQL: {query}\")\n        result = LedgerSQL.execute_query(query, fetch_all=True)\n        \n        if result is None:\n            logging.error(\"SQL query returned None (possible execution error)\")\n            return jsonify({\n                \"success\": False,\n                \"message\": \"Query execution failed - check query syntax\"\n            }), 500\n        \n        # Process the results\n        logging.debug(f\"SQL query returned {len(result)} rows\")\n        \n        # Check if we have SQLAlchemy Row objects or tuples\n        from sqlalchemy.engine.row import Row\n        \n        try:\n            if len(result) > 0:\n                logging.debug(f\"Result type: {type(result)}, First row type: {type(result[0])}\")\n                \n                if isinstance(result[0], Row):\n                    # SQLAlchemy Row objects - get column names from keys\n                    column_names = result[0]._fields\n                    logging.debug(f\"Column names from Row: {column_names}\")\n                    \n                    # Convert Row objects to dictionaries\n                    rows = []\n                    for row in result:\n                        row_dict = {}\n                        for i, col in enumerate(column_names):\n                            # Convert SQLAlchemy values to JSON-serializable values\n                            value = row[i]\n                            if isinstance(value, datetime):\n                                row_dict[col] = value.isoformat()\n                            else:\n                                row_dict[col] = value\n                        rows.append(row_dict)\n                else:\n                    # Regular tuples - need to generate column names\n                    # First check if we have a cursor.description\n                    if hasattr(result, 'description'):\n                        column_names = [col[0] for col in result.description]\n                    else:\n                        # Generate numeric column names\n                        column_names = [f\"column_{i}\" for i in range(len(result[0]))]\n                    \n                    logging.debug(f\"Generated column names: {column_names}\")\n                    \n                    # Convert tuples to dictionaries\n                    rows = []\n                    for row in result:\n                        # Convert values to JSON-serializable types\n                        row_values = []\n                        for value in row:\n                            if isinstance(value, datetime):\n                                row_values.append(value.isoformat())\n                            else:\n                                row_values.append(value)\n                        \n                        # Create dictionary\n                        rows.append(dict(zip(column_names, row_values)))\n            else:\n                # No rows returned\n                column_names = []\n                rows = []\n            \n            logging.debug(f\"Processed {len(rows)} rows with columns: {column_names}\")\n        except Exception as e:\n            logging.error(f\"Error processing SQL results: {str(e)}\")\n            logging.error(traceback.format_exc())\n            return jsonify({\n                \"success\": False,\n                \"message\": f\"Error processing SQL results: {str(e)}\"\n            }), 500\n        \n        return jsonify({\n            \"success\": True,\n            \"columns\": list(column_names),\n            \"rows\": rows,\n            \"row_count\": len(rows)\n        })\n        \n    except Exception as e:\n        error_message = str(e)\n        \n        # Format user-friendly error message\n        friendly_message = \"Error executing query\"\n        detailed_error = error_message\n        \n        # Check for common SQL errors\n        if \"relation\" in error_message and \"does not exist\" in error_message:\n            # Table doesn't exist error\n            import re\n            table_match = re.search(r'relation \"([^\"]+)\" does not exist', error_message)\n            if table_match:\n                wrong_table = table_match.group(1)\n                # Get list of available tables to suggest alternatives\n                tables = LedgerSQL.list_tables()\n                similar_tables = [t for t in tables if len(t) > 0 and len(wrong_table) > 0 and t.lower().startswith(wrong_table[0].lower())]\n                \n                friendly_message = f\"Table '{wrong_table}' doesn't exist\"\n                suggestion_text = \"\"\n                if similar_tables:\n                    suggestion_text = f\". Did you mean: {', '.join(similar_tables)}?\"\n                else:\n                    suggestion_text = f\". Available tables: {', '.join(tables)}\" if tables else \"\"\n                \n                friendly_message += suggestion_text\n        elif \"syntax error\" in error_message.lower():\n            friendly_message = \"SQL syntax error in your query\"\n        elif \"permission denied\" in error_message.lower():\n            friendly_message = \"Permission denied - you may not have access to this table or column\"\n        elif \"violates not-null constraint\" in error_message.lower():\n            friendly_message = \"Query violates NOT NULL constraint\"\n        \n        logger.error(f\"SQL query error: {error_message}\")\n        logger.error(traceback.format_exc())\n        \n        return jsonify({\n            \"success\": False,\n            \"message\": friendly_message,\n            \"error\": detailed_error\n        }), 500\n        \n@app.route(\"/api/execute-psql\", methods=[\"POST\"])\n@login_required\ndef execute_psql():\n    \"\"\"\n    Execute a psql command using the read-only user\n    \"\"\"\n    import re\n    import traceback\n    import logging\n    from utils.ledger_sql import LedgerSQL\n    \n    command = request.json.get('command', '')\n    \n    # Log the received command\n    logging.debug(f\"Received PSQL command: '{command}'\")\n    \n    if not command:\n        return jsonify({\"success\": False, \"message\": \"No command provided\"}), 400\n        \n    try:\n        # Fix double backslash issue in psql commands\n        # Backslashes can get doubled in JS -> JSON -> Python transport\n        command = command.replace(\"\\\\\\\\\", \"\\\\\")\n        \n        # Log the command being executed\n        logging.debug(f\"Executing PSQL command: '{command}'\")\n        \n        # Basic security check - only allow read operations for SQL statements\n        if re.match(r'^\\s*(INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|TRUNCATE|GRANT)\\s', command, re.IGNORECASE):\n            logging.warning(f\"Security check failed: Write operation attempted: {command}\")\n            return jsonify({\n                \"success\": False,\n                \"message\": \"For security reasons, only read operations are allowed\",\n                \"output\": \"ERROR: Write operations are not allowed through this interface\"\n            })\n        \n        # Handle meta-commands specially\n        if command.startswith(\"\\\\\"):\n            logging.debug(f\"Processing meta-command: {command}\")\n            \n            # For \\l command (list databases)\n            if command == \"\\\\l\":\n                db_list = LedgerSQL.execute_query(\n                    \"SELECT datname as database FROM pg_database WHERE datistemplate = false;\",\n                    fetch_all=True\n                )\n                \n                if db_list:\n                    output = \"List of databases:\\n\"\n                    for row in db_list:\n                        output += f\"  {row[0]}\\n\"\n                    return jsonify({\"success\": True, \"output\": output})\n            \n            # For \\dt command (list tables)\n            elif command == \"\\\\dt\":\n                tables = LedgerSQL.list_tables()\n                \n                if tables:\n                    output = \"List of relations:\\n\"\n                    output += \" Schema |    Name     | Type  \\n\"\n                    output += \"--------+-------------+-------\\n\"\n                    for table in tables:\n                        output += f\" public | {table.ljust(11)} | table\\n\"\n                    return jsonify({\"success\": True, \"output\": output})\n            \n            # For \\d command (describe table)\n            elif command.startswith(\"\\\\d \"):\n                table_name = command[3:].strip()\n                columns = LedgerSQL.get_table_schema(table_name)\n                \n                if columns:\n                    output = f\"Table: {table_name}\\n\"\n                    output += \" Column  |  Type  | Nullable | Default \\n\"\n                    output += \"---------+--------+----------+---------\\n\"\n                    for col in columns:\n                        nullable = \"YES\" if col['nullable'] == \"YES\" else \"NO\"\n                        default = col['default'] or \"\"\n                        output += f\" {col['name'].ljust(7)} | {col['type'].ljust(6)} | {nullable.ljust(8)} | {default}\\n\"\n                    return jsonify({\"success\": True, \"output\": output})\n            \n            # For \\conninfo command\n            elif command == \"\\\\conninfo\":\n                db_info = LedgerSQL.get_database_info()\n                \n                if db_info and db_info.get('connected'):\n                    output = f\"You are connected to database '{db_info['database']}'\\n\"\n                    output += f\"Server: PostgreSQL\\n\"\n                    output += f\"Tables: {db_info.get('table_count', 0)}\\n\"\n                    \n                    # Show row counts for main tables\n                    if 'row_counts' in db_info:\n                        output += \"\\nRow counts:\\n\"\n                        for table, count in db_info['row_counts'].items():\n                            output += f\"  {table}: {count}\\n\"\n                    \n                    return jsonify({\"success\": True, \"output\": output})\n            \n            # Other meta-commands not directly supported\n            return jsonify({\n                \"success\": False,\n                \"message\": \"Meta-command not supported\",\n                \"output\": f\"Meta-command '{command}' is not directly supported in this interface yet.\"\n            })\n        \n        # Regular SQL command\n        else:\n            logging.debug(f\"Processing SQL command: {command}\")\n            \n            # Add a semicolon if not present to ensure proper execution\n            if not command.rstrip().endswith(';'):\n                command = command + ';'\n            \n            # Execute the query using our LedgerSQL module\n            result = LedgerSQL.execute_query(command, fetch_all=True)\n            \n            if result is None:\n                return jsonify({\n                    \"success\": False,\n                    \"message\": \"Error executing SQL query\",\n                    \"output\": \"Error: Database query returned no result\"\n                })\n            \n            # Format the output\n            if len(result) > 0:\n                # Get column names from first row\n                from sqlalchemy.engine.row import Row\n                \n                if isinstance(result[0], Row):\n                    # SQLAlchemy Row object - get keys from it\n                    column_names = result[0]._fields\n                else:\n                    # Regular tuple - generate numeric column names\n                    column_names = [f\"col{i}\" for i in range(len(result[0]))]\n                \n                # Format as a table\n                output = \"\"\n                \n                # Add column headers\n                output += \" \" + \" | \".join(str(col) for col in column_names) + \" \\n\"\n                output += \"-\" + \"-+-\".join(\"-\" * len(str(col)) for col in column_names) + \"-\\n\"\n                \n                # Add rows\n                for row in result:\n                    if isinstance(row, Row):\n                        # Convert Row to tuple\n                        row_values = tuple(row)\n                    else:\n                        row_values = row\n                    \n                    output += \" \" + \" | \".join(str(val) for val in row_values) + \" \\n\"\n                    \n                output += f\"({len(result)} rows)\"\n                \n                return jsonify({\n                    \"success\": True,\n                    \"output\": output\n                })\n            else:\n                return jsonify({\n                    \"success\": True,\n                    \"output\": \"Query executed successfully (0 rows)\"\n                })\n        \n    except Exception as e:\n        error_message = str(e)\n        logging.error(f\"PSQL execution error: {error_message}\")\n        logging.error(traceback.format_exc())\n        return jsonify({\n            \"success\": False,\n            \"message\": \"Error executing psql command\",\n            \"error\": error_message,\n            \"output\": f\"Error: {error_message}\"\n        }), 500\n\n@app.route(\"/ledger/source-queue\")\n@login_required\ndef source_queue():\n    \"\"\"\n    Display the source code queue\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    # Get source queue for current user\n    queue_entries = LedgerManager.get_source_queue(user_id=current_user.id)\n    \n    return render_template(\"ledger/source_queue.html\", queue_entries=queue_entries)\n\n@app.route(\"/ledger/doc-queue\")\n@login_required\ndef doc_queue():\n    \"\"\"\n    Display the documentation queue\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    # Get documentation queue for current user\n    queue_entries = LedgerManager.get_doc_queue(user_id=current_user.id)\n    \n    return render_template(\"ledger/doc_queue.html\", queue_entries=queue_entries)\n\ndef detect_language_from_code(code_content, filename=None):\n    \"\"\"\n    Detect the programming language from source code content and/or filename\n    \n    Args:\n        code_content (str): The source code content to analyze\n        filename (str, optional): The original filename if available\n        \n    Returns:\n        str: Detected language (COBOL, JCL, etc.) or None if can't be detected\n    \"\"\"\n    # First check if we can detect from filename extension\n    if filename:\n        # Convert to lowercase\n        filename = filename.lower()\n        \n        # Detect based on file extension\n        if filename.endswith(('.cob', '.cobol', '.cbl')):\n            return 'COBOL'\n        elif filename.endswith('.jcl'):\n            return 'JCL'\n        elif filename.endswith('.cpy'):\n            return 'CPY'\n        elif filename.endswith(('.py', '.pyw')):\n            return 'PYTHON'\n        elif filename.endswith('.json'):\n            return 'JSON'\n        elif filename.endswith(('.xml', '.html', '.htm')):\n            return 'XML'\n        elif filename.endswith(('.sql', '.pgsql', '.mysql')):\n            return 'SQL'\n    \n    # If we couldn't detect from filename or no filename was provided, analyze the content\n    if not code_content or len(code_content.strip()) < 10:\n        return None\n    \n    # Convert to uppercase for easier pattern matching\n    code_upper = code_content.upper()\n    \n    # Check for COBOL specific patterns\n    if (re.search(r'IDENTIFICATION\\s+DIVISION', code_upper) or \n        re.search(r'ID\\s+DIVISION', code_upper) or\n        re.search(r'PROGRAM-ID', code_upper)):\n        return 'COBOL'\n    \n    # Check for JCL specific patterns\n    if re.search(r'//\\w+\\s+JOB', code_upper) or re.search(r'//\\w+\\s+EXEC', code_upper):\n        return 'JCL'\n    \n    # Check for CPY (copybook) patterns\n    if (re.search(r'01\\s+\\w+-RECORD', code_upper) and \n        not re.search(r'PROGRAM-ID', code_upper) and\n        not re.search(r'PROCEDURE\\s+DIVISION', code_upper)):\n        return 'CPY'\n    \n    # Check for SQL patterns\n    if (re.search(r'SELECT\\s+.*\\s+FROM', code_upper) or\n        re.search(r'CREATE\\s+TABLE', code_upper) or\n        re.search(r'INSERT\\s+INTO', code_upper)):\n        return 'SQL'\n    \n    # Default to None if we can't determine\n    return None\n\n@app.route(\"/api/ledger/add-source\", methods=[\"POST\"])\n@login_required\n@csrf.exempt\ndef add_source_code():\n    \"\"\"\n    Add source code to the ledger queue\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    try:\n        cobol_code = \"\"\n        source_name = \"\"\n        input_source = \"Manual Pasted\"\n        \n        # Log all form data and files for debugging\n        logger.debug(\"==== ADD SOURCE DEBUG ====\")\n        logger.debug(f\"Form data keys: {list(request.form.keys())}\")\n        logger.debug(f\"Files keys: {list(request.files.keys() if request.files else [])}\")\n        logger.debug(f\"Form data values: {dict(request.form)}\")\n        \n        # Check which input method was selected\n        input_method = request.form.get('inputMethod', 'paste')\n        logger.debug(f\"Input method: {input_method}\")\n        \n        # Get source name - this should always be present\n        source_name = request.form.get('sourceName', '').strip()\n        if not source_name:\n            logger.error(\"Missing source name\")\n            return jsonify({\"status\": \"error\", \"error\": \"Please provide a source name\"}), 400\n        \n        logger.debug(f\"Source name: {source_name}\")\n        \n        # Check if code was uploaded as file\n        if input_method == 'file' and 'sourceFile' in request.files and request.files['sourceFile'].filename:\n            file = request.files['sourceFile']\n            logger.debug(f\"Processing uploaded file: {file.filename}\")\n            try:\n                cobol_code = file.read().decode('utf-8')\n                # Keep the user-provided source name\n                input_source = \"External Input\"\n                logger.debug(f\"File content length: {len(cobol_code)}\")\n            except UnicodeDecodeError:\n                logger.error(\"File encoding error\")\n                return jsonify({\"status\": \"error\", \"error\": \"The uploaded file contains invalid characters. Please ensure it's a text file with UTF-8 encoding.\"}), 400\n        # Check if code was pasted\n        elif input_method == 'paste' and 'sourceCode' in request.form and request.form['sourceCode'].strip():\n            cobol_code = request.form['sourceCode']\n            logger.debug(f\"Processing pasted code, length: {len(cobol_code)}\")\n            input_source = \"Manual Pasted\"\n        else:\n            # Check what's missing\n            if input_method == 'file' and ('sourceFile' not in request.files or not request.files['sourceFile'].filename):\n                logger.error(\"Missing file upload\")\n                return jsonify({\"status\": \"error\", \"error\": \"Please select a file to upload\"}), 400\n            elif input_method == 'paste' and ('sourceCode' not in request.form or not request.form['sourceCode'].strip()):\n                logger.error(\"Missing pasted code\")\n                return jsonify({\"status\": \"error\", \"error\": \"Please enter source code in the text area\"}), 400\n            else:\n                logger.error(f\"Unknown input configuration: method={input_method}\")\n                return jsonify({\"status\": \"error\", \"error\": \"No source code provided\"}), 400\n        \n        # Get the provided source language\n        source_language = request.form.get('sourceLanguage', 'COBOL')\n        if not source_language:\n            source_language = 'COBOL'\n        \n        # Detect language from content and/or filename if possible\n        filename = None\n        if input_method == 'file' and 'sourceFile' in request.files and request.files['sourceFile'].filename:\n            filename = request.files['sourceFile'].filename\n            \n        detected_language = detect_language_from_code(cobol_code, filename)\n        if detected_language and detected_language != source_language:\n            logger.info(f\"Language auto-detected as {detected_language} (was {source_language})\")\n            source_language = detected_language\n        \n        logger.debug(f\"Adding to ledger: {source_name}, language: {source_language}, input_source: {input_source}\")\n        \n        # Add to ledger\n        source_id = LedgerManager.add_source_code(\n            content=cobol_code,\n            source_name=source_name,\n            source_language=source_language,\n            input_source=input_source,\n            user_id=current_user.id\n        )\n        \n        # Generate unique job ID\n        job_id = str(uuid.uuid4())\n        \n        # Store the source_id in session for processing references\n        session['current_source_id'] = source_id\n        session['job_id'] = job_id\n        \n        logger.debug(f\"Source added successfully: {source_id}\")\n        return jsonify({\n            \"status\": \"success\", \n            \"message\": \"Source code added to ledger\", \n            \"source_id\": source_id,\n            \"job_id\": job_id\n        })\n        \n    except Exception as e:\n        error_msg = str(e)\n        logger.error(f\"Error adding source code to ledger: {error_msg}\")\n        logger.error(f\"Request form data: {request.form}\")\n        logger.error(f\"Request files: {request.files}\")\n        traceback.print_exc()\n        return jsonify({\n            \"status\": \"error\", \n            \"error\": error_msg,\n            \"details\": \"Please check server logs for more information\"\n        }), 500\n\n@app.route(\"/api/ledger/update-source-status\", methods=[\"POST\"])\n@login_required\ndef update_source_status():\n    \"\"\"\n    Update the status of a source code entry\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    try:\n        data = request.json\n        source_id = data.get('source_id')\n        status = data.get('status')\n        \n        if not source_id or not status:\n            return jsonify({\"error\": \"Missing source_id or status\"}), 400\n        \n        success = LedgerManager.update_source_status(source_id, status)\n        \n        if success:\n            return jsonify({\"success\": True})\n        else:\n            return jsonify({\"error\": \"Failed to update source status\"}), 500\n        \n    except Exception as e:\n        logger.error(f\"Error updating source status: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/ledger/delete-source\", methods=[\"POST\"])\n@login_required\ndef delete_source():\n    \"\"\"\n    Delete a source code entry and its associated documents\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    try:\n        data = request.json\n        source_id = data.get('source_id')\n        \n        if not source_id:\n            return jsonify({\"error\": \"Missing source_id\"}), 400\n        \n        # Check if source exists and belongs to current user\n        source = SourceCodeQueue.query.filter_by(source_id=source_id, user_id=current_user.id).first()\n        if not source:\n            return jsonify({\"error\": \"Source not found or you do not have permission to delete it\"}), 404\n        \n        # First delete associated documents\n        docs = DocGenerated.query.filter_by(doc_source_code_id=source_id).all()\n        for doc in docs:\n            db.session.delete(doc)\n        \n        # Delete source content\n        if source.content:\n            db.session.delete(source.content)\n        \n        # Delete source\n        db.session.delete(source)\n        db.session.commit()\n        \n        return jsonify({\"success\": True})\n        \n    except Exception as e:\n        db.session.rollback()\n        logger.error(f\"Error deleting source: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/ledger/get-source\", methods=[\"GET\"])\n@login_required\ndef get_source_code():\n    \"\"\"\n    Get source code content from the ledger\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    import traceback\n    \n    try:\n        source_id = request.args.get('source_id')\n        \n        if not source_id:\n            logger.error(\"Missing source_id in request\")\n            return jsonify({\"success\": False, \"error\": \"Missing source_id\"}), 400\n        \n        logger.debug(f\"Getting source code for id: {source_id}\")\n        source_data = LedgerManager.get_source_code(source_id)\n        \n        if source_data:\n            # Log success but don't log content which could be large\n            logger.debug(f\"Successfully retrieved source code for id: {source_id}, content length: {len(source_data.get('content', '')) if 'content' in source_data else 'N/A'}\")\n            return jsonify({\"success\": True, \"source_data\": source_data})\n        else:\n            logger.error(f\"Source not found for id: {source_id}\")\n            return jsonify({\"success\": False, \"error\": \"Source not found\"}), 404\n    except Exception as e:\n        error_message = str(e)\n        logger.error(f\"Error getting source code: {error_message}\")\n        logger.error(traceback.format_exc())\n        return jsonify({\"success\": False, \"error\": f\"Error retrieving source code: {error_message}\"}), 500\n\n@app.route(\"/api/ledger/process-source\", methods=[\"POST\"])\n@login_required\ndef process_ledger_source():\n    \"\"\"\n    Process a source code from the ledger and generate documentation\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    from utils.agent import COBOLDocumentationAgent\n    \n    try:\n        data = request.json\n        source_id = data.get('source_id')\n        preferences = data.get('preferences', {})\n        generate_doc = data.get('generate_doc', True)  # Default to True\n        \n        if not source_id:\n            return jsonify({\"error\": \"Missing source_id\"}), 400\n        \n        # Get source code from ledger\n        source_data = LedgerManager.get_source_code(source_id)\n        \n        if not source_data:\n            return jsonify({\"error\": f\"Source code not found for ID: {source_id}\"}), 404\n        \n        # Update source status to Processing\n        LedgerManager.update_source_status(source_id, \"Processing\")\n        \n        # Create a placeholder for the doc_id\n        doc_id = None\n        \n        # Create agent and process the code\n        agent = COBOLDocumentationAgent(session_id=str(uuid.uuid4()), user_id=current_user.id)\n        \n        # Set agent preferences\n        for key, value in preferences.items():\n            agent.set_user_preference(key, value)\n        \n        try:\n            # First analyze the structure\n            cobol_code = source_data['content']\n            structured_data = agent.analyze_cobol_structure(cobol_code)\n            \n            # Generate a timestamp for the document\n            doc_timestamp = time.strftime(\"%y%m%d_%H%M%S\", time.gmtime())\n            \n            # If generate_doc is True, create a document in \"In Process\" status first\n            if generate_doc:\n                # Create a placeholder document with \"In Process\" status\n                # Get language from source_data - check both 'language' and 'source_language' to handle both ORM and SQL\n                source_language = source_data.get('language', source_data.get('source_language', 'COBOL'))\n                doc_id = LedgerManager.add_documentation(\n                    source_id=source_id,\n                    doc_content=\"Documentation generation in progress...\",\n                    doc_status='In Process',\n                    in_language=source_language,\n                    user_id=current_user.id\n                )\n                logger.debug(f\"Created documentation entry with 'In Process' status, ID: {doc_id}\")\n            \n            # Then generate documentation\n            documentation = agent.generate_documentation(structured_data)\n            \n            # If we're generating documentation, update the existing doc or create a new one\n            if generate_doc:\n                if doc_id:\n                    # Update the existing document with the generated content and \"Pending\" status\n                    LedgerManager.update_documentation(\n                        doc_id=doc_id,\n                        doc_content=documentation,\n                        doc_status='Pending',\n                        user_id=current_user.id\n                    )\n                    logger.debug(f\"Updated documentation to 'Pending' status, ID: {doc_id}\")\n                else:\n                    # Create a new document with \"Pending\" status\n                    doc_id = LedgerManager.add_documentation(\n                        source_id=source_id,\n                        doc_content=documentation,\n                        doc_status='Pending',\n                        in_language=source_language,  # Using the previously defined source_language variable\n                        user_id=current_user.id\n                    )\n                    logger.debug(f\"Created new documentation with 'Pending' status, ID: {doc_id}\")\n            \n            # Update source status to completed\n            LedgerManager.update_source_status(source_id, \"Completed\")\n            \n            # Process the documentation for display\n            import markdown\n            from utils.mermaid_viewer import enhance_markdown_with_tabs\n            \n            # Enhance documentation with tabbed diagram views if needed\n            if '```mermaid' in documentation and '<div class=\"mermaid-container\">' not in documentation:\n                try:\n                    documentation = enhance_markdown_with_tabs(documentation)\n                    logger.debug(\"Enhanced documentation with tabbed diagram views\")\n                except Exception as e:\n                    logger.warning(f\"Could not enhance documentation with tabs: {str(e)}\")\n            \n            # Convert Markdown to HTML\n            md = markdown.Markdown(\n                extensions=[\n                    'markdown.extensions.extra',\n                    'markdown.extensions.codehilite',\n                    'markdown.extensions.tables',\n                    'markdown.extensions.toc'\n                ]\n            )\n            \n            try:\n                # Process mermaid blocks\n                mermaid_processed = documentation\n                mermaid_blocks = re.findall(r'```mermaid([\\s\\S]*?)```', mermaid_processed)\n                \n                for i, block in enumerate(mermaid_blocks):\n                    mermaid_processed = mermaid_processed.replace(\n                        f\"```mermaid{block}```\",\n                        f'<div class=\"mermaid\">{block.strip()}</div>',\n                        1\n                    )\n                \n                # Convert to HTML\n                html_content = md.convert(mermaid_processed)\n                \n                return jsonify({\n                    \"success\": True,\n                    \"documentation\": html_content,\n                    \"format\": \"html\",\n                    \"doc_id\": doc_id,\n                    \"source_id\": source_id,\n                    \"status\": \"success\"\n                })\n                \n            except Exception as md_error:\n                logger.error(f\"Error converting markdown to HTML: {str(md_error)}\")\n                # Fall back to raw markdown\n                return jsonify({\n                    \"success\": True,\n                    \"documentation\": documentation,\n                    \"format\": \"markdown\",\n                    \"doc_id\": doc_id,\n                    \"source_id\": source_id,\n                    \"status\": \"success\"\n                })\n                \n        except Exception as agent_error:\n            # Update source status to error\n            LedgerManager.update_source_status(source_id, \"Error\")\n            \n            # If we created a document, mark it as error\n            if doc_id:\n                LedgerManager.update_documentation(\n                    doc_id=doc_id,\n                    doc_status='Error',\n                    user_id=current_user.id\n                )\n            \n            logger.error(f\"Agent error: {str(agent_error)}\")\n            return jsonify({\"error\": f\"Agent processing error: {str(agent_error)}\", \"success\": False}), 500\n        \n    except Exception as e:\n        logger.error(f\"Error processing source code: {str(e)}\")\n        return jsonify({\"error\": str(e), \"success\": False}), 500\n\n@app.route(\"/api/ledger/get-doc\", methods=[\"GET\"])\n@login_required\ndef get_documentation():\n    \"\"\"\n    Get documentation content from the ledger\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    try:\n        doc_id = request.args.get('doc_id')\n        \n        if not doc_id:\n            return jsonify({\"error\": \"Missing doc_id\"}), 400\n        \n        doc_data = LedgerManager.get_documentation(doc_id)\n        \n        if doc_data:\n            return jsonify({\"success\": True, \"doc_data\": doc_data})\n        else:\n            return jsonify({\"error\": \"Documentation not found\"}), 404\n        \n    except Exception as e:\n        logger.error(f\"Error getting documentation: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/ledger/update-doc-status\", methods=[\"POST\"])\n@login_required\ndef update_doc_status():\n    \"\"\"\n    Update the status of a documentation entry\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    try:\n        data = request.json\n        doc_id = data.get('doc_id')\n        status = data.get('status')\n        doc_status = data.get('doc_status')\n        \n        if not doc_id or not status:\n            return jsonify({\"error\": \"Missing doc_id or status\"}), 400\n        \n        success = LedgerManager.update_doc_status(doc_id, status, doc_status)\n        \n        if success:\n            return jsonify({\"success\": True})\n        else:\n            return jsonify({\"error\": \"Failed to update documentation status\"}), 500\n        \n    except Exception as e:\n        logger.error(f\"Error updating documentation status: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n@app.route(\"/api/ledger/get-source-queue\", methods=[\"GET\"])\n@login_required\ndef get_source_queue():\n    \"\"\"\n    Get source code queue entries for API usage\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    try:\n        # Get query parameters\n        user_id = request.args.get('user_id')\n        status = request.args.get('status')\n        limit = request.args.get('limit', default=50, type=int)\n        search = request.args.get('search')\n        \n        logger.debug(f\"Getting source queue: user_id={user_id}, status={status}, limit={limit}\")\n        \n        # Default to current user if no user_id provided\n        if not user_id and current_user and current_user.is_authenticated:\n            user_id = current_user.id\n            logger.debug(f\"Using current user ID: {user_id}\")\n        \n        # Get queue entries\n        queue_entries = LedgerManager.get_source_queue(user_id=user_id, status=status, limit=limit)\n        \n        # Ensure queue_entries is a list\n        if queue_entries is None:\n            queue_entries = []\n            logger.warning(\"queue_entries was None, using empty list instead\")\n        \n        # Filter by search term if provided\n        if search and search.strip():\n            search = search.lower()\n            filtered_entries = []\n            for entry in queue_entries:\n                if (search in entry.get('source_id', '').lower() or \n                    search in entry.get('source_name', '').lower()):\n                    filtered_entries.append(entry)\n            queue_entries = filtered_entries\n        \n        logger.debug(f\"Returning {len(queue_entries)} source queue entries\")\n        return jsonify({\"success\": True, \"queue_entries\": queue_entries})\n        \n    except Exception as e:\n        logger.error(f\"Error getting source queue: {str(e)}\")\n        # Return an empty list instead of error to allow the UI to handle it gracefully\n        return jsonify({\"success\": False, \"error\": str(e), \"queue_entries\": []})\n\n@app.route(\"/api/ledger/get-doc-queue\", methods=[\"GET\"])\n@login_required\ndef get_doc_queue():\n    \"\"\"\n    Get documentation queue entries for API usage\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    \n    try:\n        # Get query parameters\n        user_id = request.args.get('user_id')\n        status = request.args.get('status')\n        limit = request.args.get('limit', default=50, type=int)\n        search = request.args.get('search')\n        \n        logger.debug(f\"Getting doc queue: user_id={user_id}, status={status}, limit={limit}\")\n        \n        # Default to current user if no user_id provided\n        if not user_id and current_user and current_user.is_authenticated:\n            user_id = current_user.id\n            logger.debug(f\"Using current user ID: {user_id}\")\n        \n        # Get queue entries\n        queue_entries = LedgerManager.get_doc_queue(user_id=user_id, status=status, limit=limit)\n        \n        # Ensure queue_entries is a list\n        if queue_entries is None:\n            queue_entries = []\n            logger.warning(\"queue_entries was None, using empty list instead\")\n        \n        # Filter by search term if provided\n        if search and search.strip():\n            search = search.lower()\n            filtered_entries = []\n            for entry in queue_entries:\n                if (search in entry.get('result_doc_id', '').lower() or \n                    search in entry.get('doc_source_code_id', '').lower()):\n                    filtered_entries.append(entry)\n            queue_entries = filtered_entries\n        \n        logger.debug(f\"Returning {len(queue_entries)} doc queue entries\")\n        return jsonify({\"success\": True, \"queue_entries\": queue_entries})\n        \n    except Exception as e:\n        logger.error(f\"Error getting doc queue: {str(e)}\")\n        # Return an empty list instead of error to allow the UI to handle it gracefully\n        return jsonify({\"success\": False, \"error\": str(e), \"queue_entries\": []})\n\n@app.route(\"/api/ledger/download-doc\", methods=[\"GET\"])\n@login_required\ndef download_ledger_doc():\n    \"\"\"\n    Download documentation content as a Markdown file\n    \"\"\"\n    from utils.ledger_manager import LedgerManager\n    import time\n    import os\n    \n    try:\n        doc_id = request.args.get('doc_id')\n        \n        if not doc_id:\n            return jsonify({\"error\": \"Missing doc_id\"}), 400\n        \n        doc_data = LedgerManager.get_documentation(doc_id)\n        \n        if not doc_data:\n            return jsonify({\"error\": \"Documentation not found\"}), 404\n        \n        # Get source details for filename\n        source_id = doc_data['doc_source_code_id']\n        source_data = LedgerManager.get_source_code(source_id)\n        \n        # Generate timestamp for filename\n        timestamp = time.strftime(\"%y%m%d_%H%M%S\", time.gmtime())\n        \n        # Create filename based on source name or doc ID\n        if source_data and 'source_name' in source_data:\n            base_name = os.path.splitext(source_data['source_name'])[0]\n            filename = f\"{timestamp}_{base_name}_documentation.md\"\n        else:\n            filename = f\"{timestamp}_documentation_{doc_id[-8:]}.md\"\n        \n        # Create a temporary file to serve\n        import tempfile\n        \n        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.md') as temp:\n            temp.write(doc_data['doc_content'])\n            temp_path = temp.name\n        \n        return send_file(\n            temp_path,\n            as_attachment=True,\n            download_name=filename,\n            mimetype='text/markdown'\n        )\n        \n    except Exception as e:\n        logger.error(f\"Error downloading documentation: {str(e)}\")\n        return jsonify({\"error\": str(e)}), 500\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":110111},"attached_assets/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"attached_assets/fixed_setActivePrompt.js":{"content":"function setActivePrompt(promptKey) {\n    console.log(`Setting prompt ${promptKey} as active`);\n    \n    // Get CSRF token from meta tag\n    const csrfToken = document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content');\n    console.log(\"CSRF token loaded:\", csrfToken ? \"Present\" : \"Missing\");\n    \n    fetch('/api/prompts/set-active', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFToken': csrfToken || '' // Add CSRF token to headers\n        },\n        body: JSON.stringify({\n            prompt_key: promptKey\n        }),\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.error(`HTTP error ${response.status}: ${response.statusText}`);\n            // Try to parse JSON response, but handle non-JSON responses gracefully\n            return response.text().then(text => {\n                try {\n                    // Try to parse as JSON first\n                    const data = JSON.parse(text);\n                    throw new Error(data.message || `Server returned ${response.status}`);\n                } catch (e) {\n                    // If parsing fails, use the text as error message\n                    throw new Error(`Server returned ${response.status}: ${text.substring(0, 100)}...`);\n                }\n            });\n        }\n        return response.json();\n    })\n    .then(data => {\n        if (data.success) {\n            // Show success toast\n            showToast(`Set prompt \"${promptKey}\" as active`, 'success');\n            \n            // Update the UI to reflect the active prompt\n            updateActivePromptIndicators(promptKey);\n        } else {\n            showToast(data.message || 'Error setting active prompt', 'danger');\n        }\n    })\n    .catch(error => {\n        console.error('Error setting active prompt:', error);\n        showToast(`Error setting active prompt: ${error.message || 'Unknown error'}`, 'danger');\n    });\n}","size_bytes":1967},"attached_assets/main.py":{"content":"import logging\nfrom app import app\n\nlogging.basicConfig(level=logging.DEBUG)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":156},"attached_assets/models.py":{"content":"from flask_sqlalchemy import SQLAlchemy\nfrom datetime import datetime\nfrom flask_login import UserMixin\nimport time\n\ndb = SQLAlchemy()\n\nclass User(UserMixin, db.Model):\n    \"\"\"User model for storing user account information\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(50), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    projects = db.relationship('Project', backref='owner', lazy=True)\n    source_codes = db.relationship('SourceCodeQueue', backref='user', lazy=True)\n    documents = db.relationship('DocGenerated', backref='user', lazy=True)\n    \n    def __repr__(self):\n        return f'<User {self.username}>'\n\nclass Project(db.Model):\n    \"\"\"Project model for storing COBOL documentation projects\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    cobol_files = db.relationship('CobolFile', backref='project', lazy=True, cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Project {self.name}>'\n\nclass CobolFile(db.Model):\n    \"\"\"Model for storing COBOL file information\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    filename = db.Column(db.String(255), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    program_id = db.Column(db.String(100))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)\n    documentation = db.relationship('Documentation', backref='cobol_file', lazy=True, uselist=False, cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<CobolFile {self.filename}>'\n\nclass Documentation(db.Model):\n    \"\"\"Model for storing generated documentation\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    language = db.Column(db.String(10), default='en')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    cobol_file_id = db.Column(db.Integer, db.ForeignKey('cobol_file.id'), nullable=False)\n    \n    def __repr__(self):\n        return f'<Documentation for file {self.cobol_file_id}>'\n\n# Ledger Database Models\n\nclass SourceCodeQueue(db.Model):\n    \"\"\"\n    SOURCE_CODE_QUEUE table for storing source code in a queue system\n    to solve session size limitations\n    \"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    timestamp = db.Column(db.String(15), nullable=False, index=True)  # YYMMDD_HHMMSS format\n    source_language = db.Column(db.String(20), nullable=False, index=True)  # COBOL, JCL, CPY, etc.\n    input_source = db.Column(db.String(50), nullable=False)  # Manual Pasted, External Input, etc.\n    source_name = db.Column(db.String(255), nullable=False)\n    status = db.Column(db.String(20), nullable=False, index=True)  # On Queue, Processing, etc.\n    source_id = db.Column(db.String(300), nullable=False, unique=True, index=True)  # Composite ID\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False, index=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship to source content\n    content = db.relationship('SourceCodeContent', backref='source_queue', lazy=True, \n                             uselist=False, cascade='all, delete-orphan')\n    \n    # Relationship to generated documents\n    documents = db.relationship('DocGenerated', backref='source_code', lazy=True)\n    \n    @staticmethod\n    def generate_timestamp():\n        \"\"\"Generate a timestamp in YYMMDD_HHMMSS format\"\"\"\n        return time.strftime(\"%y%m%d_%H%M%S\", time.gmtime())\n    \n    @staticmethod\n    def generate_source_id(timestamp, language, source_name):\n        \"\"\"Generate a composite source ID\"\"\"\n        # Clean source name to prevent issues in the ID\n        clean_name = source_name.replace(' ', '_').replace('/', '_').replace('\\\\', '_')\n        return f\"{timestamp}_{language}_{clean_name}\"\n    \n    def __repr__(self):\n        return f'<SourceCodeQueue {self.source_id}>'\n\nclass SourceCodeContent(db.Model):\n    \"\"\"\n    SOURCE_CODE_CONTENT table for storing the actual content of source code\n    to separate metadata from large content data\n    \"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    source_id = db.Column(db.String(300), db.ForeignKey('source_code_queue.source_id'), \n                         nullable=False, unique=True, index=True)\n    content = db.Column(db.Text, nullable=False)  # Source code content\n    \n    def __repr__(self):\n        return f'<SourceCodeContent for {self.source_id}>'\n\nclass DocGenerated(db.Model):\n    \"\"\"\n    DOC_GENERATED table for storing generated documentation\n    linked to source code from the queue\n    \"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    result_doc_id = db.Column(db.String(300), nullable=False, unique=True, index=True)\n    result_doc_status = db.Column(db.String(50), nullable=False, index=True)  # Pending of Review, Approved, Rejected\n    doc_timestamp = db.Column(db.String(15), nullable=False, index=True)  # YYMMDD_HHMMSS format\n    doc_source_code_id = db.Column(db.String(300), db.ForeignKey('source_code_queue.source_id'), \n                                 nullable=False, index=True)\n    status = db.Column(db.String(50), nullable=False, index=True)  # Processing, Approval Pending, etc.\n    doc_content = db.Column(db.Text, nullable=False)  # Documentation content\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False, index=True)\n    in_language = db.Column(db.String(20), nullable=False)  # Source language\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    @staticmethod\n    def generate_result_doc_id(doc_timestamp, source_id):\n        \"\"\"Generate a result document ID\"\"\"\n        return f\"RESULT_{doc_timestamp}_{source_id}\"\n    \n    def __repr__(self):\n        return f'<DocGenerated {self.result_doc_id}>'\n","size_bytes":6482},"attached_assets/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.0\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"markdown>=3.8\",\n    \"openai>=1.77.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pymermaid>=1.7.1\",\n    \"python-dotenv>=1.1.0\",\n    \"requests>=2.32.3\",\n    \"werkzeug>=3.1.3\",\n    \"groq>=0.24.0\",\n    \"flask-wtf>=1.2.2\",\n]\n","size_bytes":492},"attached_assets/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"attached_assets/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":978},"server/anthropic-claude.ts":{"content":"import Anthropic from '@anthropic-ai/sdk';\nimport { safeParseJSON, retryOperation } from './error-handler';\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\n// the newest Anthropic model is \"claude-3-5-sonnet-20241022\" which was released after your knowledge cutoff\nconst MODEL = \"claude-3-5-sonnet-20241022\";\n\n// Enhanced Anthropic API caller with better error handling\nasync function callAnthropicAPI(prompt: string, options: any = {}): Promise<string> {\n  if (!process.env.ANTHROPIC_API_KEY) {\n    throw new Error(\"Anthropic API key not configured\");\n  }\n\n  const message = await anthropic.messages.create({\n    max_tokens: options.max_tokens || 2000,\n    messages: [\n      {\n        role: 'user', \n        content: `${prompt}\n\nCRITICAL: Your response must be ONLY valid JSON. No explanations, no markdown, no code blocks. Start with { and end with }.`\n      }\n    ],\n    model: MODEL,\n    temperature: options.temperature || 0.1, // Lower temperature for more consistent JSON\n  });\n\n  // Extract only text content, handling potential thinking sections\n  let responseText = '';\n  for (const content of message.content) {\n    if (content.type === 'text') {\n      responseText += content.text;\n    }\n  }\n  \n  return responseText;\n}\n\n// Program summary generation using Claude\nexport async function generateClaudeProgramSummary(\n  programName: string,\n  divisions: string,\n  sourceCode?: string\n): Promise<any> {\n  return retryOperation(async () => {\n    const prompt = `Analyze this COBOL program and provide a JSON response with the following structure:\n{\n  \"summary\": \"Brief description of what the program does\",\n  \"purpose\": \"Main business purpose\",\n  \"inputs\": [\"list\", \"of\", \"input\", \"sources\"],\n  \"outputs\": [\"list\", \"of\", \"outputs\"],\n  \"keyProcessingLogic\": \"Description of main processing steps\",\n  \"complexity\": \"Low|Medium|High\"\n}\n\nProgram Name: ${programName}\nDivisions: ${divisions}\n${sourceCode ? `Source Code: ${sourceCode.substring(0, 2000)}` : ''}\n\nPlease provide only the JSON response without any markdown formatting.`;\n\n    const responseContent = await callAnthropicAPI(prompt, {\n      max_tokens: 1500,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, {\n      summary: \"Program analysis not available\",\n      purpose: \"Purpose unclear\",\n      inputs: [],\n      outputs: [],\n      keyProcessingLogic: \"Processing logic not identified\",\n      complexity: \"Medium\"\n    });\n    \n    return {\n      summary: result.summary || \"Program analysis not available\",\n      purpose: result.purpose || \"Purpose unclear\", \n      inputs: Array.isArray(result.inputs) ? result.inputs : [],\n      outputs: Array.isArray(result.outputs) ? result.outputs : [],\n      keyProcessingLogic: result.keyProcessingLogic || \"Processing logic not identified\",\n      complexity: [\"Low\", \"Medium\", \"High\"].includes(result.complexity) ? result.complexity : \"Medium\"\n    };\n  }, 2);\n}\n\n// Business rules extraction using Claude\nexport async function generateClaudeBusinessRules(\n  programName: string,\n  sourceCode: string\n): Promise<any[]> {\n  return retryOperation(async () => {\n    const prompt = `Extract business rules from this COBOL program and provide a JSON response:\n{\n  \"businessRules\": [\n    {\n      \"rule\": \"Rule description\",\n      \"condition\": \"When condition occurs\",\n      \"action\": \"Then this action is taken\",\n      \"codeLocation\": \"Line number or section reference\"\n    }\n  ]\n}\n\nProgram Name: ${programName}\nSource Code: ${sourceCode.substring(0, 1500)}\n\nPlease provide only the JSON response without any markdown formatting.`;\n\n    const responseContent = await callAnthropicAPI(prompt, {\n      max_tokens: 1000,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, { businessRules: [] });\n    return Array.isArray(result.businessRules) ? result.businessRules : [];\n  }, 2);\n}\n\n// System explanation using Claude\nexport async function generateClaudeSystemExplanation(\n  programName: string,\n  summary: string\n): Promise<any> {\n  return retryOperation(async () => {\n    const prompt = `Create a plain English explanation of this COBOL system and provide a JSON response:\n{\n  \"plainEnglishSummary\": \"Simple explanation that non-technical users can understand\",\n  \"keyBusinessProcesses\": [\"process1\", \"process2\", \"process3\"],\n  \"dataFlow\": \"Description of how data moves through the system\",\n  \"userImpact\": \"How this system affects end users or business operations\",\n  \"technicalComplexity\": \"Assessment of the system's technical complexity\"\n}\n\nProgram Name: ${programName}\nSummary: ${summary}\n\nPlease provide only the JSON response without any markdown formatting.`;\n\n    const responseContent = await callAnthropicAPI(prompt, {\n      max_tokens: 1200,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, {\n      plainEnglishSummary: \"System explanation not available\",\n      keyBusinessProcesses: [],\n      dataFlow: \"Data flow not analyzed\",\n      userImpact: \"Impact not assessed\",\n      technicalComplexity: \"Complexity not determined\"\n    });\n    \n    return {\n      plainEnglishSummary: result.plainEnglishSummary || \"System explanation not available\",\n      keyBusinessProcesses: Array.isArray(result.keyBusinessProcesses) ? result.keyBusinessProcesses : [],\n      dataFlow: result.dataFlow || \"Data flow not analyzed\",\n      userImpact: result.userImpact || \"Impact not assessed\",\n      technicalComplexity: result.technicalComplexity || \"Complexity not determined\"\n    };\n  }, 2);\n}\n\n// Mermaid diagram generation using Claude\nexport async function generateClaudeMermaidDiagram(\n  programName: string,\n  description: string,\n  diagramType: string = 'flowchart'\n): Promise<any> {\n  return retryOperation(async () => {\n    const prompt = `Create a Mermaid ${diagramType} diagram for this COBOL program and provide a JSON response:\n{\n  \"title\": \"Descriptive title for the diagram\",\n  \"description\": \"What the diagram shows and represents\",\n  \"mermaidCode\": \"flowchart TD\\\\n    A[Start] --> B[Process Step]\\\\n    B --> C[Decision Point]\\\\n    C -->|Yes| D[Action 1]\\\\n    C -->|No| E[Action 2]\\\\n    D --> F[End]\\\\n    E --> F\"\n}\n\nProgram Name: ${programName}\nDescription: ${description}\nDiagram Type: ${diagramType}\n\nPlease provide only the JSON response without any markdown formatting. Ensure the mermaidCode uses proper Mermaid syntax.`;\n\n    const responseContent = await callAnthropicAPI(prompt, {\n      max_tokens: 800,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, {\n      title: `${programName} Flow`,\n      description: \"Program flow visualization\",\n      mermaidCode: `flowchart TD\\n    A[${programName}] --> B[Processing]\\n    B --> C[End]`\n    });\n    \n    return {\n      type: diagramType,\n      title: result.title || `${programName} Flow`,\n      description: result.description || \"Program flow visualization\",\n      mermaidCode: result.mermaidCode || `flowchart TD\\n    A[${programName}] --> B[Processing]\\n    B --> C[End]`\n    };\n  }, 2);\n}\n\n// Data element descriptions using Claude\nexport async function generateClaudeDataElementDescriptions(\n  programName: string,\n  dataElements: string[]\n): Promise<any[]> {\n  return retryOperation(async () => {\n    const prompt = `Analyze these data elements from a COBOL program and provide a JSON response:\n{\n  \"descriptions\": [\n    {\n      \"name\": \"data element name\",\n      \"inferredPurpose\": \"what this data element is used for\",\n      \"businessContext\": \"business meaning and significance\",\n      \"commonValues\": [\"example1\", \"example2\", \"example3\"]\n    }\n  ]\n}\n\nProgram Name: ${programName}\nData Elements: ${dataElements.join(', ')}\n\nPlease provide only the JSON response without any markdown formatting.`;\n\n    const responseContent = await callAnthropicAPI(prompt, {\n      max_tokens: 1000,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, { descriptions: [] });\n    return Array.isArray(result.descriptions) ? result.descriptions : [];\n  }, 2);\n}","size_bytes":8028},"server/autonomous-agent.ts":{"content":"// Autonomous COBOL Documentation Agent\n// Inspired by the Flask application's agent system for intelligent analysis\n\nimport { observabilityTracker, agentMonitor } from './observability';\nimport { generateClaudeProgramSummary, generateClaudeSystemExplanation, generateClaudeMermaidDiagram } from './anthropic-claude';\nimport { CobolParser, type ParsedProgram } from './cobol-parser';\n\ninterface AgentMemoryItem {\n  type: 'analysis' | 'decision' | 'preference' | 'feedback';\n  content: any;\n  timestamp: string;\n  programId?: number;\n}\n\ninterface UserPreferences {\n  detailLevel?: 'low' | 'medium' | 'high';\n  audience?: 'technical' | 'business';\n  aiProvider?: 'friendli' | 'openai';\n  diagramType?: 'flowchart' | 'sequence' | 'class';\n  analysisDepth?: 'basic' | 'comprehensive';\n}\n\nexport class COBOLDocumentationAgent {\n  private sessionId: string;\n  private memory: AgentMemoryItem[] = [];\n  private userPreferences: UserPreferences = {};\n  private maxMemoryItems = 10;\n\n  constructor(sessionId?: string, userId?: string) {\n    this.sessionId = agentMonitor.startSession(\n      sessionId,\n      userId,\n      { agent_type: \"cobol_documentation\" }\n    );\n    \n    // Set default preferences\n    this.userPreferences = {\n      detailLevel: 'medium',\n      audience: 'technical',\n      aiProvider: 'friendli',\n      diagramType: 'flowchart',\n      analysisDepth: 'comprehensive'\n    };\n    \n    console.log(`[Agent] Initialized COBOL Documentation Agent with session ${this.sessionId}`);\n  }\n\n  setUserPreference(key: keyof UserPreferences, value: any): void {\n    this.userPreferences[key] = value;\n    this.remember('preference', { key, value });\n    console.log(`[Agent] Set user preference: ${key} = ${value}`);\n  }\n\n  getUserPreference(key: keyof UserPreferences, defaultValue?: any): any {\n    return this.userPreferences[key] || defaultValue;\n  }\n\n  private remember(type: AgentMemoryItem['type'], content: any, programId?: number): void {\n    const memoryItem: AgentMemoryItem = {\n      type,\n      content,\n      timestamp: new Date().toISOString(),\n      programId\n    };\n\n    this.memory.push(memoryItem);\n\n    // Limit memory size\n    if (this.memory.length > this.maxMemoryItems) {\n      this.memory.shift();\n    }\n\n    console.log(`[Agent] Added memory item: ${type}`);\n  }\n\n  async analyzeCobolStructure(sourceCode: string, programId?: number): Promise<any> {\n    const operationSpan = observabilityTracker.startSpan(\n      \"autonomous_cobol_analysis\",\n      { \n        code_length: sourceCode.length,\n        program_id: programId,\n        user_preferences: this.userPreferences\n      }\n    );\n\n    try {\n      // Agent decision: Determine parsing approach\n      const parsingDecision = agentMonitor.logDecision(\n        \"parsing_approach_selection\",\n        { \n          code_sample: sourceCode.substring(0, 200) + \"...\",\n          code_length: sourceCode.length,\n          user_preferences: this.userPreferences\n        },\n        \"Analyzing code complexity and structure to determine optimal parsing strategy\"\n      );\n\n      // Parse the COBOL code\n      const parser = new CobolParser();\n      const parsedStructure = parser.parse(sourceCode);\n      \n      this.remember('analysis', { \n        type: 'parsing_completed',\n        structure: parsedStructure,\n        lines_of_code: parsedStructure.linesOfCode\n      }, programId);\n\n      // Agent decision: Identify focus areas based on code complexity\n      const focusAreas = this.identifyFocusAreas(parsedStructure);\n      const focusDecision = agentMonitor.logDecision(\n        \"code_focus_identification\",\n        { parsed_structure: parsedStructure },\n        `Identified key areas to focus on: ${focusAreas.join(', ')}`,\n        { focus_areas: focusAreas }\n      );\n\n      // Prepare analysis based on user preferences\n      const analysisPrompt = this.buildAnalysisPrompt(sourceCode, parsedStructure, focusAreas);\n      \n      // Agent decision: Select AI analysis strategy\n      const aiStrategyDecision = agentMonitor.logDecision(\n        \"ai_analysis_strategy\",\n        { \n          focus_areas: focusAreas,\n          user_audience: this.userPreferences.audience,\n          detail_level: this.userPreferences.detailLevel\n        },\n        `Using ${this.userPreferences.audience} audience approach with ${this.userPreferences.detailLevel} detail level`\n      );\n\n      // Generate comprehensive analysis\n      const results = await this.performAIAnalysis(analysisPrompt, parsedStructure, programId);\n      \n      this.remember('analysis', {\n        type: 'ai_analysis_completed',\n        results,\n        focus_areas: focusAreas\n      }, programId);\n\n      observabilityTracker.endSpan(operationSpan, results);\n      return results;\n\n    } catch (error) {\n      agentMonitor.logError(\"cobol_analysis\", error as Error, {\n        program_id: programId,\n        session_id: this.sessionId\n      });\n      observabilityTracker.endSpan(operationSpan, null, (error as Error).message);\n      throw error;\n    }\n  }\n\n  private identifyFocusAreas(parsedStructure: ParsedProgram): string[] {\n    const focusAreas: string[] = [];\n    \n    // Analyze program complexity\n    if (parsedStructure.linesOfCode > 1000) {\n      focusAreas.push('modularization', 'performance_optimization');\n    }\n    \n    if (parsedStructure.dataElements.length > 50) {\n      focusAreas.push('data_management', 'variable_optimization');\n    }\n    \n    if (parsedStructure.relationships.length > 20) {\n      focusAreas.push('program_flow', 'dependency_analysis');\n    }\n    \n    // Always include basic areas\n    focusAreas.push('business_logic', 'documentation_quality');\n    \n    return focusAreas;\n  }\n\n  private buildAnalysisPrompt(sourceCode: string, parsedStructure: ParsedProgram, focusAreas: string[]): string {\n    let prompt = `Analyze this COBOL program with the following structure:\\n\\n`;\n    prompt += `Program: ${parsedStructure.name}\\n`;\n    prompt += `Lines of Code: ${parsedStructure.linesOfCode}\\n`;\n    prompt += `Divisions: ${parsedStructure.divisions.length}\\n`;\n    prompt += `Data Elements: ${parsedStructure.dataElements.length}\\n`;\n    prompt += `Relationships: ${parsedStructure.relationships.length}\\n\\n`;\n\n    // Add user preference-based instructions\n    if (this.userPreferences.audience === 'business') {\n      prompt += `Target audience: Business stakeholders with limited technical knowledge.\\n`;\n      prompt += `Focus on business impact, process flows, and practical implications.\\n`;\n    } else {\n      prompt += `Target audience: Technical developers with COBOL expertise.\\n`;\n      prompt += `Include technical details, code structure, and implementation specifics.\\n`;\n    }\n\n    if (this.userPreferences.detailLevel === 'high') {\n      prompt += `Provide highly detailed analysis with comprehensive breakdown of all code elements.\\n`;\n    } else if (this.userPreferences.detailLevel === 'low') {\n      prompt += `Provide a simplified overview focusing only on key program elements.\\n`;\n    }\n\n    prompt += `\\nFocus Areas: ${focusAreas.join(', ')}\\n\\n`;\n    prompt += `Source Code:\\n${sourceCode}\\n\\n`;\n    prompt += `Provide analysis in JSON format with comprehensive insights.`;\n\n    return prompt;\n  }\n\n  private async performAIAnalysis(prompt: string, parsedStructure: ParsedProgram, programId?: number): Promise<any> {\n    const analysisSpan = observabilityTracker.startSpan(\n      \"ai_comprehensive_analysis\",\n      { program_id: programId }\n    );\n\n    try {\n      // Generate program summary using Anthropic Claude\n      const summaryResult = await generateClaudeProgramSummary(\n        parsedStructure.name,\n        parsedStructure.divisions.map(d => d.name).join(', ')\n      );\n\n      // Generate system explanation using Claude\n      const systemExplanation = await generateClaudeSystemExplanation(\n        parsedStructure.name,\n        summaryResult.summary\n      );\n\n      // Generate Mermaid diagram based on user preference using Claude\n      const diagramType = this.userPreferences.diagramType === 'sequence' ? 'sequenceDiagram' : 'flowchart';\n      const mermaidDiagram = await generateClaudeMermaidDiagram(\n        parsedStructure.name,\n        systemExplanation.plainEnglishSummary,\n        diagramType\n      );\n\n      const results = {\n        programSummary: summaryResult,\n        systemExplanation,\n        mermaidDiagram,\n        parsedStructure,\n        analysisMetadata: {\n          focusAreas: this.identifyFocusAreas(parsedStructure),\n          userPreferences: this.userPreferences,\n          sessionId: this.sessionId,\n          timestamp: new Date().toISOString()\n        }\n      };\n\n      observabilityTracker.endSpan(analysisSpan, results);\n      return results;\n\n    } catch (error) {\n      agentMonitor.logError(\"ai_analysis\", error as Error, {\n        program_id: programId,\n        session_id: this.sessionId\n      });\n      observabilityTracker.endSpan(analysisSpan, null, (error as Error).message);\n      throw error;\n    }\n  }\n\n  async evaluateDocumentationQuality(documentation: any, programId?: number): Promise<{\n    score: number;\n    suggestions: string[];\n    completeness: number;\n  }> {\n    const evaluationSpan = observabilityTracker.startSpan(\n      \"documentation_quality_evaluation\",\n      { program_id: programId }\n    );\n\n    try {\n      // Agent decision: Evaluate documentation completeness\n      const completenessScore = this.calculateCompleteness(documentation);\n      const qualityScore = this.calculateQualityScore(documentation);\n      \n      const suggestions: string[] = [];\n      \n      if (!documentation.systemExplanation) {\n        suggestions.push(\"Add system explanation for better understanding\");\n      }\n      \n      if (!documentation.mermaidDiagram) {\n        suggestions.push(\"Include visual diagrams for better comprehension\");\n      }\n      \n      if (completenessScore < 0.7) {\n        suggestions.push(\"Improve documentation completeness\");\n      }\n\n      const evaluation = {\n        score: qualityScore,\n        suggestions,\n        completeness: completenessScore\n      };\n\n      agentMonitor.logDecision(\n        \"documentation_quality_assessment\",\n        { documentation_sections: Object.keys(documentation) },\n        `Documentation quality score: ${qualityScore.toFixed(2)}, completeness: ${completenessScore.toFixed(2)}`,\n        evaluation\n      );\n\n      this.remember('feedback', {\n        type: 'quality_evaluation',\n        evaluation,\n        program_id: programId\n      }, programId);\n\n      observabilityTracker.endSpan(evaluationSpan, evaluation);\n      return evaluation;\n\n    } catch (error) {\n      agentMonitor.logError(\"quality_evaluation\", error as Error, {\n        program_id: programId\n      });\n      observabilityTracker.endSpan(evaluationSpan, null, (error as Error).message);\n      throw error;\n    }\n  }\n\n  private calculateCompleteness(documentation: any): number {\n    const requiredSections = ['programSummary', 'systemExplanation', 'mermaidDiagram'];\n    const presentSections = requiredSections.filter(section => documentation[section]);\n    return presentSections.length / requiredSections.length;\n  }\n\n  private calculateQualityScore(documentation: any): number {\n    let score = 0.5; // Base score\n    \n    if (documentation.programSummary?.summary?.length > 100) score += 0.2;\n    if (documentation.systemExplanation?.plainEnglishSummary?.length > 200) score += 0.2;\n    if (documentation.mermaidDiagram?.mermaidCode?.length > 100) score += 0.1;\n    \n    return Math.min(score, 1.0);\n  }\n\n  getSessionMetrics(): any {\n    return {\n      sessionId: this.sessionId,\n      memoryItems: this.memory.length,\n      userPreferences: this.userPreferences,\n      recentAnalyses: this.memory.filter(item => item.type === 'analysis').slice(-5),\n      observabilityData: observabilityTracker.getSessionMetrics(this.sessionId)\n    };\n  }\n\n  cleanup(): void {\n    try {\n      agentMonitor.endSession(this.sessionId);\n      console.log(`[Agent] Cleaned up session ${this.sessionId}`);\n    } catch (error) {\n      console.error(`[Agent] Error during cleanup:`, error);\n    }\n  }\n}","size_bytes":12071},"server/cobol-parser.ts":{"content":"export interface ParsedProgram {\n  name: string;\n  divisions: Division[];\n  dataElements: ParsedDataElement[];\n  relationships: ParsedRelationship[];\n  linesOfCode: number;\n}\n\nexport interface Division {\n  name: string;\n  sections: Section[];\n}\n\nexport interface Section {\n  name: string;\n  paragraphs: string[];\n}\n\nexport interface ParsedDataElement {\n  name: string;\n  level: string;\n  picture?: string;\n  usage?: string;\n  parentElement?: string;\n  lineNumber: number;\n}\n\nexport interface ParsedRelationship {\n  type: \"CALL\" | \"PERFORM\" | \"INCLUDE\" | \"GO_TO\";\n  target: string;\n  location: string;\n}\n\nexport class CobolParser {\n  private sourceLines: string[] = [];\n  private currentLineIndex = 0;\n  private memoryItems: Array<{type: string, content: any, timestamp: string}> = [];\n  private userPreferences: Record<string, any> = {};\n\n  parse(sourceCode: string): ParsedProgram {\n    this.sourceLines = sourceCode.split('\\n').map(line => line.trim());\n    this.currentLineIndex = 0;\n\n    const programName = this.extractProgramName();\n    const divisions = this.parseDivisions();\n    const dataElements = this.parseDataElements();\n    const relationships = this.parseRelationships();\n\n    return {\n      name: programName,\n      divisions,\n      dataElements,\n      relationships,\n      linesOfCode: this.sourceLines.filter(line => line.length > 0 && !line.startsWith('*')).length\n    };\n  }\n\n  private extractProgramName(): string {\n    for (const line of this.sourceLines) {\n      const match = line.match(/PROGRAM-ID\\.\\s+([A-Z0-9-]+)/i);\n      if (match) {\n        return match[1];\n      }\n    }\n    return \"UNKNOWN\";\n  }\n\n  private parseDivisions(): Division[] {\n    const divisions: Division[] = [];\n    const divisionNames = [\"IDENTIFICATION\", \"ENVIRONMENT\", \"DATA\", \"PROCEDURE\"];\n\n    for (const divName of divisionNames) {\n      const division = this.parseDivision(divName);\n      if (division) {\n        divisions.push(division);\n      }\n    }\n\n    return divisions;\n  }\n\n  private parseDivision(divisionName: string): Division | null {\n    const divisionRegex = new RegExp(`${divisionName}\\\\s+DIVISION`, 'i');\n    let startIndex = -1;\n    let endIndex = this.sourceLines.length;\n\n    // Find division start\n    for (let i = 0; i < this.sourceLines.length; i++) {\n      if (divisionRegex.test(this.sourceLines[i])) {\n        startIndex = i;\n        break;\n      }\n    }\n\n    if (startIndex === -1) return null;\n\n    // Find division end (next division or end of file)\n    for (let i = startIndex + 1; i < this.sourceLines.length; i++) {\n      if (this.sourceLines[i].match(/\\b(IDENTIFICATION|ENVIRONMENT|DATA|PROCEDURE)\\s+DIVISION/i)) {\n        endIndex = i;\n        break;\n      }\n    }\n\n    const sections = this.parseSections(startIndex, endIndex, divisionName);\n\n    return {\n      name: divisionName,\n      sections\n    };\n  }\n\n  private parseSections(startIndex: number, endIndex: number, divisionName: string): Section[] {\n    const sections: Section[] = [];\n    \n    if (divisionName === \"DATA\") {\n      // Parse DATA DIVISION sections\n      const sectionNames = [\"FILE\", \"WORKING-STORAGE\", \"LOCAL-STORAGE\", \"LINKAGE\"];\n      for (const sectionName of sectionNames) {\n        const section = this.parseDataSection(sectionName, startIndex, endIndex);\n        if (section) {\n          sections.push(section);\n        }\n      }\n    } else if (divisionName === \"PROCEDURE\") {\n      // Parse PROCEDURE DIVISION paragraphs\n      const paragraphs = this.parseParagraphs(startIndex, endIndex);\n      if (paragraphs.length > 0) {\n        sections.push({\n          name: \"MAIN\",\n          paragraphs\n        });\n      }\n    } else {\n      // For IDENTIFICATION and ENVIRONMENT, just collect all content\n      sections.push({\n        name: \"MAIN\",\n        paragraphs: []\n      });\n    }\n\n    return sections;\n  }\n\n  private parseDataSection(sectionName: string, startIndex: number, endIndex: number): Section | null {\n    const sectionRegex = new RegExp(`${sectionName}\\\\s+SECTION`, 'i');\n    let sectionStart = -1;\n\n    for (let i = startIndex; i < endIndex; i++) {\n      if (sectionRegex.test(this.sourceLines[i])) {\n        sectionStart = i;\n        break;\n      }\n    }\n\n    if (sectionStart === -1) return null;\n\n    return {\n      name: sectionName,\n      paragraphs: []\n    };\n  }\n\n  private parseParagraphs(startIndex: number, endIndex: number): string[] {\n    const paragraphs: string[] = [];\n    \n    for (let i = startIndex; i < endIndex; i++) {\n      const line = this.sourceLines[i];\n      // Look for paragraph names (lines that end with a period and don't start with numbers)\n      if (line.match(/^[A-Z][A-Z0-9-]*\\.\\s*$/)) {\n        const paragraphName = line.replace('.', '').trim();\n        paragraphs.push(paragraphName);\n      }\n    }\n\n    return paragraphs;\n  }\n\n  private parseDataElements(): ParsedDataElement[] {\n    const dataElements: ParsedDataElement[] = [];\n    let inDataDivision = false;\n    let inWorkingStorage = false;\n\n    for (let i = 0; i < this.sourceLines.length; i++) {\n      const line = this.sourceLines[i];\n\n      if (line.match(/DATA\\s+DIVISION/i)) {\n        inDataDivision = true;\n        continue;\n      }\n\n      if (line.match(/PROCEDURE\\s+DIVISION/i)) {\n        inDataDivision = false;\n        break;\n      }\n\n      if (inDataDivision && line.match(/WORKING-STORAGE\\s+SECTION/i)) {\n        inWorkingStorage = true;\n        continue;\n      }\n\n      if (inWorkingStorage && line.match(/^\\s*(\\d{2})\\s+([A-Z0-9-]+)/)) {\n        const match = line.match(/^\\s*(\\d{2})\\s+([A-Z0-9-]+)(?:\\s+PIC\\s+([X9V\\(\\)]+))?(?:\\s+USAGE\\s+([A-Z-]+))?/i);\n        if (match) {\n          const [, level, name, picture, usage] = match;\n          dataElements.push({\n            name,\n            level,\n            picture,\n            usage,\n            lineNumber: i + 1\n          });\n        }\n      }\n    }\n\n    return dataElements;\n  }\n\n  private parseRelationships(): ParsedRelationship[] {\n    const relationships: ParsedRelationship[] = [];\n\n    for (let i = 0; i < this.sourceLines.length; i++) {\n      const line = this.sourceLines[i];\n\n      // Parse CALL statements\n      const callMatch = line.match(/CALL\\s+['\"]([A-Z0-9-]+)['\"]/i);\n      if (callMatch) {\n        relationships.push({\n          type: \"CALL\",\n          target: callMatch[1],\n          location: `Line ${i + 1}`\n        });\n      }\n\n      // Parse PERFORM statements\n      const performMatch = line.match(/PERFORM\\s+([A-Z0-9-]+)/i);\n      if (performMatch) {\n        relationships.push({\n          type: \"PERFORM\",\n          target: performMatch[1],\n          location: `Line ${i + 1}`\n        });\n      }\n\n      // Parse COPY statements (includes)\n      const copyMatch = line.match(/COPY\\s+([A-Z0-9-]+)/i);\n      if (copyMatch) {\n        relationships.push({\n          type: \"INCLUDE\",\n          target: copyMatch[1],\n          location: `Line ${i + 1}`\n        });\n      }\n    }\n\n    return relationships;\n  }\n}\n","size_bytes":6925},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/enhanced-gemini.ts":{"content":"import { safeParseJSON, retryOperation } from './error-handler';\n\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\nconst GEMINI_ENDPOINT = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent\";\n\n// Enhanced Gemini API caller with better error handling\nasync function callGeminiAPIEnhanced(prompt: string, options: any = {}): Promise<string> {\n  if (!GEMINI_API_KEY) {\n    throw new Error(\"Gemini API key not configured\");\n  }\n\n  const response = await fetch(`${GEMINI_ENDPOINT}?key=${GEMINI_API_KEY}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      contents: [\n        {\n          parts: [\n            {\n              text: prompt\n            }\n          ]\n        }\n      ],\n      generationConfig: {\n        maxOutputTokens: options.max_tokens || 2000,\n        temperature: options.temperature || 0.7,\n      }\n    }),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);\n  }\n\n  const data = await response.json();\n  return data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n}\n\n// Enhanced program summary with robust error handling\nexport async function generateEnhancedProgramSummary(\n  programName: string,\n  divisions: string,\n  sourceCode?: string\n): Promise<any> {\n  return retryOperation(async () => {\n    const prompt = `Analyze this COBOL program and provide a JSON response:\n{\n  \"summary\": \"Brief description\",\n  \"purpose\": \"Business purpose\",\n  \"inputs\": [\"input1\", \"input2\"],\n  \"outputs\": [\"output1\", \"output2\"],\n  \"keyProcessingLogic\": \"Main processing steps\",\n  \"complexity\": \"Low\"\n}\n\nProgram: ${programName}\nDivisions: ${divisions}\n${sourceCode ? `Code: ${sourceCode.substring(0, 1500)}` : ''}`;\n\n    const responseContent = await callGeminiAPIEnhanced(prompt, {\n      max_tokens: 1000,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, {\n      summary: \"Program analysis not available\",\n      purpose: \"Purpose unclear\",\n      inputs: [],\n      outputs: [],\n      keyProcessingLogic: \"Processing logic not identified\",\n      complexity: \"Medium\"\n    });\n    \n    return {\n      summary: result.summary || \"Program analysis not available\",\n      purpose: result.purpose || \"Purpose unclear\", \n      inputs: Array.isArray(result.inputs) ? result.inputs : [],\n      outputs: Array.isArray(result.outputs) ? result.outputs : [],\n      keyProcessingLogic: result.keyProcessingLogic || \"Processing logic not identified\",\n      complexity: [\"Low\", \"Medium\", \"High\"].includes(result.complexity) ? result.complexity : \"Medium\"\n    };\n  }, 2);\n}\n\n// Enhanced business rules extraction\nexport async function generateEnhancedBusinessRules(\n  programName: string,\n  sourceCode: string\n): Promise<any[]> {\n  return retryOperation(async () => {\n    const prompt = `Extract business rules from this COBOL program as JSON:\n{\n  \"businessRules\": [\n    {\n      \"rule\": \"Rule description\",\n      \"condition\": \"When condition\",\n      \"action\": \"Then action\",\n      \"codeLocation\": \"Line or section\"\n    }\n  ]\n}\n\nProgram: ${programName}\nCode: ${sourceCode.substring(0, 1500)}`;\n\n    const responseContent = await callGeminiAPIEnhanced(prompt, {\n      max_tokens: 1000,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, { businessRules: [] });\n    return Array.isArray(result.businessRules) ? result.businessRules : [];\n  }, 2);\n}\n\n// Enhanced system explanation\nexport async function generateEnhancedSystemExplanation(\n  programName: string,\n  summary: string\n): Promise<any> {\n  return retryOperation(async () => {\n    const prompt = `Create a plain English explanation of this COBOL system as JSON:\n{\n  \"plainEnglishSummary\": \"Simple explanation\",\n  \"keyBusinessProcesses\": [\"process1\", \"process2\"],\n  \"dataFlow\": \"How data moves\",\n  \"userImpact\": \"Impact on users\",\n  \"technicalComplexity\": \"Complexity assessment\"\n}\n\nProgram: ${programName}\nSummary: ${summary}`;\n\n    const responseContent = await callGeminiAPIEnhanced(prompt, {\n      max_tokens: 1200,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, {\n      plainEnglishSummary: \"System explanation not available\",\n      keyBusinessProcesses: [],\n      dataFlow: \"Data flow not analyzed\",\n      userImpact: \"Impact not assessed\",\n      technicalComplexity: \"Complexity not determined\"\n    });\n    \n    return {\n      plainEnglishSummary: result.plainEnglishSummary || \"System explanation not available\",\n      keyBusinessProcesses: Array.isArray(result.keyBusinessProcesses) ? result.keyBusinessProcesses : [],\n      dataFlow: result.dataFlow || \"Data flow not analyzed\",\n      userImpact: result.userImpact || \"Impact not assessed\",\n      technicalComplexity: result.technicalComplexity || \"Complexity not determined\"\n    };\n  }, 2);\n}\n\n// Enhanced Mermaid diagram generation\nexport async function generateEnhancedMermaidDiagram(\n  programName: string,\n  description: string,\n  diagramType: string = 'flowchart'\n): Promise<any> {\n  return retryOperation(async () => {\n    const prompt = `Create a Mermaid ${diagramType} diagram as JSON:\n{\n  \"title\": \"Diagram title\",\n  \"description\": \"What the diagram shows\",\n  \"mermaidCode\": \"flowchart TD\\\\n    A[Start] --> B[Process]\\\\n    B --> C[End]\"\n}\n\nProgram: ${programName}\nDescription: ${description}`;\n\n    const responseContent = await callGeminiAPIEnhanced(prompt, {\n      max_tokens: 800,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, {\n      title: `${programName} Flow`,\n      description: \"Program flow visualization\",\n      mermaidCode: `flowchart TD\\n    A[${programName}] --> B[Processing]\\n    B --> C[End]`\n    });\n    \n    return {\n      type: diagramType,\n      title: result.title || `${programName} Flow`,\n      description: result.description || \"Program flow visualization\",\n      mermaidCode: result.mermaidCode || `flowchart TD\\n    A[${programName}] --> B[Processing]\\n    B --> C[End]`\n    };\n  }, 2);\n}\n\n// Enhanced data element descriptions\nexport async function generateEnhancedDataElementDescriptions(\n  programName: string,\n  dataElements: string[]\n): Promise<any[]> {\n  return retryOperation(async () => {\n    const prompt = `Analyze data elements from this COBOL program as JSON:\n{\n  \"descriptions\": [\n    {\n      \"name\": \"element name\",\n      \"inferredPurpose\": \"what it's used for\",\n      \"businessContext\": \"business meaning\",\n      \"commonValues\": [\"value1\", \"value2\"]\n    }\n  ]\n}\n\nProgram: ${programName}\nElements: ${dataElements.join(', ')}`;\n\n    const responseContent = await callGeminiAPIEnhanced(prompt, {\n      max_tokens: 1000,\n      temperature: 0.2,\n    });\n\n    const result = safeParseJSON(responseContent, { descriptions: [] });\n    return Array.isArray(result.descriptions) ? result.descriptions : [];\n  }, 2);\n}","size_bytes":6935},"server/error-handler.ts":{"content":"// Comprehensive error handling and recovery system\nimport { Request, Response, NextFunction } from 'express';\n\nexport interface ApiError {\n  code: string;\n  message: string;\n  details?: any;\n  recoverable: boolean;\n}\n\nexport class COBOLProcessingError extends Error {\n  public code: string;\n  public recoverable: boolean;\n  public details?: any;\n\n  constructor(code: string, message: string, recoverable = true, details?: any) {\n    super(message);\n    this.name = 'COBOLProcessingError';\n    this.code = code;\n    this.recoverable = recoverable;\n    this.details = details;\n  }\n}\n\nexport function createApiError(code: string, message: string, recoverable = true, details?: any): ApiError {\n  return { code, message, recoverable, details };\n}\n\n// Enhanced JSON parsing with multiple fallback strategies\nexport function safeParseJSON(jsonString: string, fallbackValue: any = {}): any {\n  if (!jsonString || typeof jsonString !== 'string') {\n    return fallbackValue;\n  }\n\n  // Strategy 1: Clean markdown code blocks and extra text\n  let cleaned = jsonString\n    .replace(/```json\\s*/g, '')\n    .replace(/```\\s*/g, '')\n    .replace(/^[^{]*\\{/, '{')  // Remove text before first {\n    .replace(/\\}[^}]*$/, '}')  // Remove text after last }\n    .trim();\n\n  try {\n    return JSON.parse(cleaned);\n  } catch (error) {\n    console.log('JSON parse attempt 1 failed, trying strategy 2...');\n  }\n\n  // Strategy 2: Extract JSON object more aggressively\n  const jsonMatch = cleaned.match(/\\{(?:[^{}]|{[^{}]*})*\\}/);\n  if (jsonMatch) {\n    try {\n      return JSON.parse(jsonMatch[0]);\n    } catch (error) {\n      console.log('JSON parse attempt 2 failed, trying strategy 3...');\n    }\n  }\n\n  // Strategy 3: Extract from multiline content\n  const lines = cleaned.split('\\n');\n  let jsonStart = -1;\n  let jsonEnd = -1;\n  let braceCount = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line.startsWith('{') && jsonStart === -1) {\n      jsonStart = i;\n    }\n    if (jsonStart !== -1) {\n      for (const char of line) {\n        if (char === '{') braceCount++;\n        if (char === '}') braceCount--;\n        if (braceCount === 0 && jsonStart !== -1) {\n          jsonEnd = i;\n          break;\n        }\n      }\n      if (jsonEnd !== -1) break;\n    }\n  }\n\n  if (jsonStart !== -1 && jsonEnd !== -1) {\n    try {\n      const jsonText = lines.slice(jsonStart, jsonEnd + 1).join('\\n');\n      return JSON.parse(jsonText);\n    } catch (error) {\n      console.log('JSON parse attempt 3 failed, trying strategy 4...');\n    }\n  }\n\n  // Strategy 4: Fix common JSON formatting issues\n  try {\n    cleaned = cleaned\n      .replace(/'/g, '\"')  // Single quotes to double quotes\n      .replace(/,(\\s*[}\\]])/g, '$1')  // Remove trailing commas\n      .replace(/([{,]\\s*)(\\w+):/g, '$1\"$2\":')  // Quote unquoted keys\n      .replace(/:\\s*([^\",\\{\\[\\]}\\s][^\",\\}\\]]*?)(\\s*[,\\}])/g, ': \"$1\"$2'); // Quote unquoted values\n    \n    return JSON.parse(cleaned);\n  } catch (error) {\n    console.log('JSON parse attempt 4 failed, using fallback value');\n  }\n\n  return fallbackValue;\n}\n\n// API response wrapper with error handling\nexport function wrapApiResponse<T>(\n  operation: () => Promise<T>,\n  errorCode: string,\n  errorMessage: string\n) {\n  return async (): Promise<{ success: boolean; data?: T; error?: ApiError }> => {\n    try {\n      const data = await operation();\n      return { success: true, data };\n    } catch (error) {\n      const apiError = createApiError(\n        errorCode,\n        `${errorMessage}: ${(error as Error).message}`,\n        true,\n        error\n      );\n      return { success: false, error: apiError };\n    }\n  };\n}\n\n// Express error handler middleware\nexport function errorHandler(err: Error, req: Request, res: Response, next: NextFunction) {\n  console.error('Error occurred:', err);\n\n  if (err instanceof COBOLProcessingError) {\n    return res.status(400).json({\n      success: false,\n      error: {\n        code: err.code,\n        message: err.message,\n        recoverable: err.recoverable,\n        details: err.details\n      }\n    });\n  }\n\n  // Generic error\n  res.status(500).json({\n    success: false,\n    error: {\n      code: 'INTERNAL_ERROR',\n      message: 'An unexpected error occurred',\n      recoverable: false\n    }\n  });\n}\n\n// Retry mechanism for AI API calls\nexport async function retryOperation<T>(\n  operation: () => Promise<T>,\n  maxRetries = 3,\n  delay = 1000\n): Promise<T> {\n  let lastError: Error = new Error('No attempts made');\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error as Error;\n      console.log(`Attempt ${attempt} failed: ${lastError.message}`);\n      \n      if (attempt < maxRetries) {\n        await new Promise(resolve => setTimeout(resolve, delay * attempt));\n      }\n    }\n  }\n\n  throw new COBOLProcessingError(\n    'RETRY_EXHAUSTED',\n    `Operation failed after ${maxRetries} attempts: ${lastError.message}`,\n    false,\n    lastError\n  );\n}","size_bytes":5004},"server/gemini.ts":{"content":"// Using Google Gemini API\nconst GEMINI_ENDPOINT = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\n\n// Set the API key directly if environment variable is not available\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY || \"AIzaSyCDsDUK9ie_9xUmeY30-V0aEVGAQ34v_50\";\n\n// Validate API key is available\nif (!GEMINI_API_KEY) {\n  console.error(\"GEMINI_API_KEY environment variable is missing\");\n} else {\n  console.log(\"Gemini API key configured successfully\");\n}\n\nimport { safeParseJSON, retryOperation, COBOLProcessingError } from './error-handler';\n\n// Helper function to clean JSON responses from Gemini\nfunction cleanGeminiJSON(responseText: string): string {\n  return responseText\n    .replace(/```json\\s*/g, '')\n    .replace(/```\\s*/g, '')\n    .trim();\n}\n\nasync function callGeminiAPI(prompt: string, options: any = {}): Promise<string> {\n  try {\n    const response = await fetch(`${GEMINI_ENDPOINT}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [\n          {\n            parts: [\n              {\n                text: prompt\n              }\n            ]\n          }\n        ],\n        generationConfig: {\n          maxOutputTokens: options.max_tokens || 2000,\n          temperature: options.temperature || 0.7,\n        }\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Gemini API error:', response.status, errorText);\n      throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n  } catch (error) {\n    console.error('Gemini API error:', error);\n    throw new Error(`Gemini API error: ${(error as Error).message}`);\n  }\n}\n\nexport interface ProgramSummary {\n  summary: string;\n  purpose: string;\n  inputs: string[];\n  outputs: string[];\n  keyProcessingLogic: string;\n  complexity: \"Low\" | \"Medium\" | \"High\";\n}\n\nexport interface BusinessRule {\n  rule: string;\n  condition: string;\n  action: string;\n  codeLocation: string;\n}\n\nexport interface DataElementDescription {\n  name: string;\n  inferredPurpose: string;\n  businessContext: string;\n  commonValues?: string[];\n}\n\nexport interface SystemExplanation {\n  plainEnglishSummary: string;\n  keyBusinessProcesses: string[];\n  dataFlow: string;\n  userImpact: string;\n  technicalComplexity: string;\n}\n\nexport interface MermaidDiagram {\n  type: \"flowchart\" | \"sequenceDiagram\" | \"classDiagram\" | \"erDiagram\";\n  title: string;\n  description: string;\n  mermaidCode: string;\n}\n\nexport async function generateProgramSummary(\n  programName: string,\n  sourceCode: string\n): Promise<ProgramSummary> {\n  try {\n    const prompt = `Analyze this COBOL program and provide a comprehensive summary. Respond with JSON in this exact format:\n{\n  \"summary\": \"Brief overview of what this program does\",\n  \"purpose\": \"Main business purpose and functionality\",\n  \"inputs\": [\"list\", \"of\", \"input\", \"sources\"],\n  \"outputs\": [\"list\", \"of\", \"output\", \"destinations\"],\n  \"keyProcessingLogic\": \"Description of main processing steps\",\n  \"complexity\": \"Low|Medium|High\"\n}\n\nCOBOL Program: ${programName}\nSource Code:\n${sourceCode.substring(0, 8000)}`;\n\n    const responseContent = await callGeminiAPI(`You are a COBOL expert that analyzes legacy code and generates clear, business-friendly documentation.\n\n${prompt}`, {\n      max_tokens: 1500,\n      temperature: 0.3,\n    });\n\n    const cleanedResponse = cleanGeminiJSON(responseContent || \"{}\");\n    const result = JSON.parse(cleanedResponse);\n    \n    return {\n      summary: result.summary || \"No summary available\",\n      purpose: result.purpose || \"Purpose unclear\",\n      inputs: Array.isArray(result.inputs) ? result.inputs : [],\n      outputs: Array.isArray(result.outputs) ? result.outputs : [],\n      keyProcessingLogic: result.keyProcessingLogic || \"Processing logic not identified\",\n      complexity: [\"Low\", \"Medium\", \"High\"].includes(result.complexity) ? result.complexity : \"Medium\"\n    };\n  } catch (error) {\n    console.error(\"Failed to generate program summary:\", error);\n    throw new Error(\"Failed to generate program summary: \" + (error as Error).message);\n  }\n}\n\nexport async function extractBusinessRules(\n  programName: string,\n  sourceCode: string\n): Promise<BusinessRule[]> {\n  try {\n    const prompt = `Analyze this COBOL program and extract business rules from conditional logic, data validations, and decision points. Respond with JSON in this format:\n{\n  \"businessRules\": [\n    {\n      \"rule\": \"Name of the business rule\",\n      \"condition\": \"What condition triggers this rule\",\n      \"action\": \"What action is taken\",\n      \"codeLocation\": \"Paragraph or section name where this rule is implemented\"\n    }\n  ]\n}\n\nFocus on IF statements, EVALUATE statements, data validation logic, and business calculations.\n\nCOBOL Program: ${programName}\nSource Code:\n${sourceCode.substring(0, 8000)}`;\n\n    const responseContent = await callGeminiAPI(`You are a business analyst expert at identifying business rules embedded in COBOL code.\n\n${prompt}`, {\n      max_tokens: 1500,\n      temperature: 0.3,\n    });\n\n    const cleanedResponse = cleanGeminiJSON(responseContent || \"{}\");\n    const result = JSON.parse(cleanedResponse);\n    \n    return Array.isArray(result.businessRules) ? result.businessRules : [];\n  } catch (error) {\n    console.error(\"Failed to extract business rules:\", error);\n    return [];\n  }\n}\n\nexport async function generateDataElementDescriptions(\n  dataElements: Array<{ name: string; picture?: string; level?: string }>\n): Promise<DataElementDescription[]> {\n  try {\n    const prompt = `Analyze these COBOL data elements and provide business-friendly descriptions. Respond with JSON in this format:\n{\n  \"descriptions\": [\n    {\n      \"name\": \"DATA-ELEMENT-NAME\",\n      \"inferredPurpose\": \"What this field is used for\",\n      \"businessContext\": \"Business meaning and usage\",\n      \"commonValues\": [\"possible\", \"values\", \"if\", \"applicable\"]\n    }\n  ]\n}\n\nData Elements:\n${dataElements.map(el => `${el.name} (Level: ${el.level}, Picture: ${el.picture})`).join('\\n')}`;\n\n    const responseContent = await callGeminiAPI(`You are a data analyst expert at interpreting COBOL data structures and their business meanings.\n\n${prompt}`, {\n      max_tokens: 1500,\n      temperature: 0.3,\n    });\n\n    const cleanedResponse = cleanGeminiJSON(responseContent || \"{}\");\n    const result = JSON.parse(cleanedResponse);\n    \n    return Array.isArray(result.descriptions) ? result.descriptions : [];\n  } catch (error) {\n    console.error(\"Failed to generate data element descriptions:\", error);\n    return [];\n  }\n}\n\nexport async function generateSystemExplanation(\n  programName: string,\n  sourceCode: string,\n  businessRules: BusinessRule[]\n): Promise<SystemExplanation> {\n  try {\n    const prompt = `Analyze this COBOL program and provide a comprehensive plain English explanation. Respond with JSON in this format:\n{\n  \"plainEnglishSummary\": \"A clear, non-technical explanation of what this system does and why it matters to the business\",\n  \"keyBusinessProcesses\": [\"Process 1\", \"Process 2\", \"Process 3\"],\n  \"dataFlow\": \"Explain how data moves through the system in simple terms\",\n  \"userImpact\": \"Describe how this system affects end users or customers\",\n  \"technicalComplexity\": \"Assess the complexity level and explain any technical challenges\"\n}\n\nFocus on making this understandable to business stakeholders, not technical people.\n\nProgram: ${programName}\nSource Code Sample:\n${sourceCode.substring(0, 4000)}\n\nBusiness Rules Found:\n${businessRules.map(rule => `- ${rule.rule}: ${rule.condition} → ${rule.action}`).join('\\n')}`;\n\n    const responseContent = await callGeminiAPI(`You are a business analyst expert at translating technical COBOL systems into clear business language that non-technical stakeholders can understand.\n\n${prompt}`, {\n      max_tokens: 2000,\n      temperature: 0.3,\n    });\n\n    const cleanedResponse = cleanGeminiJSON(responseContent || \"{}\");\n    const result = JSON.parse(cleanedResponse);\n    \n    return {\n      plainEnglishSummary: result.plainEnglishSummary || \"System analysis not available\",\n      keyBusinessProcesses: Array.isArray(result.keyBusinessProcesses) ? result.keyBusinessProcesses : [],\n      dataFlow: result.dataFlow || \"Data flow analysis not available\",\n      userImpact: result.userImpact || \"User impact analysis not available\",\n      technicalComplexity: result.technicalComplexity || \"Complexity analysis not available\"\n    };\n  } catch (error) {\n    console.error(\"Failed to generate system explanation:\", error);\n    throw new Error(\"Failed to generate system explanation: \" + (error as Error).message);\n  }\n}\n\nexport async function generateMermaidDiagram(\n  programName: string,\n  sourceCode: string,\n  relationships: Array<{ type: string; target: string; location: string }>,\n  diagramType: \"flowchart\" | \"sequenceDiagram\" = \"flowchart\"\n): Promise<MermaidDiagram> {\n  try {\n    const prompt = `Create a Mermaid diagram for this COBOL program. Respond with JSON in this format:\n{\n  \"type\": \"${diagramType}\",\n  \"title\": \"Descriptive title for the diagram\",\n  \"description\": \"Brief explanation of what the diagram shows\",\n  \"mermaidCode\": \"Valid Mermaid syntax code\"\n}\n\nProgram: ${programName}\nRelationships: ${relationships.map(rel => `${rel.type}: ${rel.target} (at ${rel.location})`).join(', ')}\n\nFor flowchart, show the program flow including:\n- Start/End points\n- Main processing sections\n- Decision points\n- Called programs\n- Data flows\n\nUse proper Mermaid flowchart syntax with:\n- A[Start] --> B[Process]\n- B --> C{Decision?}\n- C -->|Yes| D[Action]\n- C -->|No| E[Alternative]\n\nSource Code Sample:\n${sourceCode.substring(0, 3000)}`;\n\n    const responseContent = await callGeminiAPI(`You are an expert at creating Mermaid diagrams from COBOL code. Generate valid Mermaid syntax that clearly shows program flow and relationships.\n\n${prompt}`, {\n      max_tokens: 1500,\n      temperature: 0.3,\n    });\n\n    const cleanedResponse = cleanGeminiJSON(responseContent || \"{}\");\n    const result = JSON.parse(cleanedResponse);\n    \n    return {\n      type: diagramType,\n      title: result.title || `${programName} Flow Diagram`,\n      description: result.description || \"Program flow visualization\",\n      mermaidCode: result.mermaidCode || `flowchart TD\\n    A[${programName}] --> B[Processing]\\n    B --> C[End]`\n    };\n  } catch (error) {\n    console.error(\"Failed to generate Mermaid diagram:\", error);\n    throw new Error(\"Failed to generate Mermaid diagram: \" + (error as Error).message);\n  }\n}\n","size_bytes":10713},"server/index.ts":{"content":"// Load environment variables first\nimport { config } from \"dotenv\";\nconfig();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2001},"server/observability.ts":{"content":"// Enhanced Observability and monitoring system inspired by the Flask application\n// Provides comprehensive tracking of AI operations, decision making, and performance metrics\ninterface ObservabilitySpan {\n  id: string;\n  operation: string;\n  startTime: number;\n  endTime?: number;\n  metadata: Record<string, any>;\n  result?: any;\n  error?: string;\n}\n\ninterface AgentDecision {\n  id: string;\n  operation: string;\n  inputs: Record<string, any>;\n  reasoning: string;\n  output?: Record<string, any>;\n  timestamp: number;\n}\n\ninterface SessionData {\n  sessionId: string;\n  userId?: string;\n  context: Record<string, any>;\n  startTime: number;\n  endTime?: number;\n  spans: ObservabilitySpan[];\n  decisions: AgentDecision[];\n}\n\nclass ObservabilityTracker {\n  private sessions: Map<string, SessionData> = new Map();\n  private currentSession: string | null = null;\n\n  startSession(sessionId?: string, userId?: string, context: Record<string, any> = {}): string {\n    const id = sessionId || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const session: SessionData = {\n      sessionId: id,\n      userId,\n      context,\n      startTime: Date.now(),\n      spans: [],\n      decisions: []\n    };\n    \n    this.sessions.set(id, session);\n    this.currentSession = id;\n    \n    console.log(`[Observability] Started session ${id} for user ${userId || 'anonymous'}`);\n    return id;\n  }\n\n  endSession(sessionId?: string): void {\n    const id = sessionId || this.currentSession;\n    if (!id) return;\n\n    const session = this.sessions.get(id);\n    if (session) {\n      session.endTime = Date.now();\n      console.log(`[Observability] Ended session ${id}, duration: ${session.endTime - session.startTime}ms`);\n    }\n  }\n\n  startSpan(operation: string, metadata: Record<string, any> = {}): string {\n    const spanId = `span_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const span: ObservabilitySpan = {\n      id: spanId,\n      operation,\n      startTime: Date.now(),\n      metadata\n    };\n\n    if (this.currentSession) {\n      const session = this.sessions.get(this.currentSession);\n      if (session) {\n        session.spans.push(span);\n      }\n    }\n\n    console.log(`[Observability] Started span ${operation} (${spanId})`);\n    return spanId;\n  }\n\n  endSpan(spanId: string, result?: any, error?: string): void {\n    if (!this.currentSession) return;\n\n    const session = this.sessions.get(this.currentSession);\n    if (!session) return;\n\n    const span = session.spans.find(s => s.id === spanId);\n    if (span) {\n      span.endTime = Date.now();\n      span.result = result;\n      span.error = error;\n      \n      const duration = span.endTime - span.startTime;\n      console.log(`[Observability] Ended span ${span.operation} (${spanId}), duration: ${duration}ms`);\n      \n      if (error) {\n        console.error(`[Observability] Span ${span.operation} failed:`, error);\n      }\n    }\n  }\n\n  logDecision(\n    operation: string,\n    inputs: Record<string, any>,\n    reasoning: string,\n    output?: Record<string, any>\n  ): string {\n    const decisionId = `decision_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const decision: AgentDecision = {\n      id: decisionId,\n      operation,\n      inputs,\n      reasoning,\n      output,\n      timestamp: Date.now()\n    };\n\n    if (this.currentSession) {\n      const session = this.sessions.get(this.currentSession);\n      if (session) {\n        session.decisions.push(decision);\n      }\n    }\n\n    console.log(`[Observability] Agent decision: ${operation} - ${reasoning}`);\n    return decisionId;\n  }\n\n  getSessionMetrics(sessionId?: string): SessionData | null {\n    const id = sessionId || this.currentSession;\n    if (!id) return null;\n\n    return this.sessions.get(id) || null;\n  }\n\n  getAllSessions(): SessionData[] {\n    return Array.from(this.sessions.values());\n  }\n}\n\n// Singleton instance\nexport const observabilityTracker = new ObservabilityTracker();\n\n// Agent monitoring helper\nexport class AgentMonitor {\n  startSession(sessionId?: string, userId?: string, context: Record<string, any> = {}): string {\n    return observabilityTracker.startSession(sessionId, userId, context);\n  }\n\n  endSession(sessionId?: string): void {\n    observabilityTracker.endSession(sessionId);\n  }\n\n  logDecision(\n    operation: string,\n    inputs: Record<string, any>,\n    reasoning: string,\n    output?: Record<string, any>\n  ): string {\n    return observabilityTracker.logDecision(operation, inputs, reasoning, output);\n  }\n\n  logError(operation: string, error: Error, context: Record<string, any> = {}): void {\n    console.error(`[Agent] Error in ${operation}:`, error.message);\n    observabilityTracker.logDecision(\n      `${operation}_error`,\n      { error: error.message, ...context },\n      `Error occurred during ${operation}: ${error.message}`\n    );\n  }\n\n  logPerformance(operation: string, duration: number, metadata: Record<string, any> = {}): void {\n    console.log(`[Agent] Performance: ${operation} took ${duration}ms`);\n    observabilityTracker.logDecision(\n      `${operation}_performance`,\n      { duration, ...metadata },\n      `Performance measurement for ${operation}`\n    );\n  }\n}\n\nexport const agentMonitor = new AgentMonitor();","size_bytes":5241},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { CobolParser } from \"./cobol-parser\";\nimport { generateClaudeProgramSummary, generateClaudeBusinessRules, generateClaudeSystemExplanation, generateClaudeMermaidDiagram, generateClaudeDataElementDescriptions } from \"./anthropic-claude\";\nimport { errorHandler } from \"./error-handler\";\nimport { COBOLDocumentationAgent } from \"./autonomous-agent\";\nimport { observabilityTracker } from \"./observability\";\nimport { insertProgramSchema, insertUploadSessionSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { registerRepositoryRoutes } from \"./repository-routes\";\nimport { registerDocumentationRoutes } from \"./documentation-routes\";\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  fileFilter: (req, file, cb) => {\n    const allowedExtensions = ['.cbl', '.cob', '.cpy', '.jcl'];\n    const extension = file.originalname.toLowerCase().substring(file.originalname.lastIndexOf('.'));\n    if (allowedExtensions.includes(extension)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only .cbl, .cob, .cpy, .jcl files are allowed.'));\n    }\n  },\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n});\n\nconst cobolParser = new CobolParser();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Register repository routes\n  registerRepositoryRoutes(app);\n  \n  // Register documentation routes\n  registerDocumentationRoutes(app);\n  \n  // Get all programs\n  app.get(\"/api/programs\", async (req, res) => {\n    try {\n      const programs = await storage.getAllPrograms();\n      res.json(programs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch programs\" });\n    }\n  });\n\n  // Get single program\n  app.get(\"/api/programs/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const program = await storage.getProgram(id);\n      if (!program) {\n        return res.status(404).json({ message: \"Program not found\" });\n      }\n      res.json(program);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch program\" });\n    }\n  });\n\n  // Search programs\n  app.get(\"/api/programs/search/:query\", async (req, res) => {\n    try {\n      const query = req.params.query;\n      const programs = await storage.searchPrograms(query);\n      res.json(programs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search programs\" });\n    }\n  });\n\n  // Get data elements for a program\n  app.get(\"/api/programs/:id/data-elements\", async (req, res) => {\n    try {\n      const programId = parseInt(req.params.id);\n      const dataElements = await storage.getDataElementsByProgramId(programId);\n      res.json(dataElements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch data elements\" });\n    }\n  });\n\n  // Get all data elements\n  app.get(\"/api/data-elements\", async (req, res) => {\n    try {\n      const dataElements = await storage.getAllDataElements();\n      res.json(dataElements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch data elements\" });\n    }\n  });\n\n  // Search data elements\n  app.get(\"/api/data-elements/search/:query\", async (req, res) => {\n    try {\n      const query = req.params.query;\n      const dataElements = await storage.searchDataElements(query);\n      res.json(dataElements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to search data elements\" });\n    }\n  });\n\n  // Get program relationships\n  app.get(\"/api/programs/:id/relationships\", async (req, res) => {\n    try {\n      const programId = parseInt(req.params.id);\n      const relationships = await storage.getProgramRelationships(programId);\n      res.json(relationships);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch program relationships\" });\n    }\n  });\n\n  // Get statistics\n  app.get(\"/api/statistics\", async (req, res) => {\n    try {\n      const stats = await storage.getStatistics();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Upload and parse COBOL files\n  app.post(\"/api/upload\", upload.array('files'), async (req, res) => {\n    try {\n      if (!req.files || !Array.isArray(req.files) || req.files.length === 0) {\n        return res.status(400).json({ message: \"No files uploaded\" });\n      }\n\n      const results = [];\n\n      for (const file of req.files) {\n        // Create upload session\n        const uploadSession = await storage.createUploadSession({\n          filename: file.originalname,\n          size: file.size,\n          status: \"processing\",\n        });\n\n        try {\n          const sourceCode = file.buffer.toString('utf-8');\n          \n          // Parse COBOL code\n          const parsedProgram = cobolParser.parse(sourceCode);\n          \n          // Create program record\n          const program = await storage.createProgram({\n            name: parsedProgram.name,\n            filename: file.originalname,\n            sourceCode,\n            linesOfCode: parsedProgram.linesOfCode,\n            status: \"processing\",\n            structure: {\n              divisions: parsedProgram.divisions\n            },\n          });\n\n          // Process in background with enhanced error handling\n          setImmediate(async () => {\n            try {\n              console.log(`Starting AI analysis for program: ${parsedProgram.name}`);\n              \n              // Generate AI summary using Anthropic Claude\n              console.log('Generating program summary...');\n              const summary = await generateClaudeProgramSummary(parsedProgram.name, parsedProgram.divisions.map(d => d.name).join(', '), sourceCode);\n              console.log('Summary generated:', summary.summary.substring(0, 100) + '...');\n              \n              // Extract business rules using Claude\n              console.log('Extracting business rules...');\n              const businessRules = await generateClaudeBusinessRules(parsedProgram.name, sourceCode);\n              console.log('Business rules extracted:', businessRules.length);\n              \n              // Generate system explanation in plain English using Claude\n              console.log('Generating system explanation...');\n              const systemExplanation = await generateClaudeSystemExplanation(parsedProgram.name, summary.summary);\n              console.log('System explanation generated');\n              \n              // Generate Mermaid diagram using Claude\n              console.log('Generating Mermaid diagram...');\n              const mermaidDiagram = await generateClaudeMermaidDiagram(parsedProgram.name, systemExplanation.plainEnglishSummary);\n              console.log('Mermaid diagram generated');\n              \n              // Update program with AI analysis\n              console.log('Updating program in database...');\n              await storage.updateProgram(program.id, {\n                aiSummary: summary.summary,\n                complexity: summary.complexity,\n                businessRules,\n                systemExplanation,\n                mermaidDiagram,\n                status: \"completed\",\n              });\n              console.log('Program updated successfully in database');\n\n              // Create data elements\n              for (const element of parsedProgram.dataElements) {\n                await storage.createDataElement({\n                  programId: program.id,\n                  name: element.name,\n                  level: element.level,\n                  picture: element.picture,\n                  usage: element.usage,\n                  parentElement: element.parentElement,\n                  usedInPrograms: [parsedProgram.name],\n                });\n              }\n\n              // Generate data element descriptions using AI\n              if (parsedProgram.dataElements.length > 0) {\n                const descriptions = await generateClaudeDataElementDescriptions(\n                  parsedProgram.name,\n                  parsedProgram.dataElements.map(de => de.name)\n                );\n                const dataElements = await storage.getDataElementsByProgramId(program.id);\n                \n                for (const description of descriptions) {\n                  const matchingElement = dataElements.find(el => el.name === description.name);\n                  if (matchingElement) {\n                    // Update with AI-generated description (would need updateDataElement method)\n                    // For now, we'll skip this update\n                  }\n                }\n              }\n\n              // Create program relationships\n              for (const relationship of parsedProgram.relationships) {\n                await storage.createProgramRelationship({\n                  fromProgramId: program.id,\n                  toProgramId: 0, // Would need to resolve target program ID\n                  relationshipType: relationship.type.toLowerCase(),\n                  location: relationship.location,\n                });\n              }\n\n              // Update upload session\n              await storage.updateUploadSession(uploadSession.id, {\n                status: \"completed\",\n              });\n\n            } catch (error) {\n              console.error(\"Background processing failed:\", error);\n              console.error(\"Error details:\", {\n                programId: program.id,\n                programName: parsedProgram.name,\n                errorMessage: (error as Error).message,\n                errorStack: (error as Error).stack\n              });\n              await storage.updateProgram(program.id, {\n                status: \"failed\",\n              });\n              await storage.updateUploadSession(uploadSession.id, {\n                status: \"failed\",\n                errorMessage: (error as Error).message,\n              });\n            }\n          });\n\n          results.push({\n            filename: file.originalname,\n            programId: program.id,\n            uploadSessionId: uploadSession.id,\n            status: \"processing\",\n          });\n\n        } catch (error) {\n          await storage.updateUploadSession(uploadSession.id, {\n            status: \"failed\",\n            errorMessage: (error as Error).message,\n          });\n\n          results.push({\n            filename: file.originalname,\n            uploadSessionId: uploadSession.id,\n            status: \"failed\",\n            error: (error as Error).message,\n          });\n        }\n      }\n\n      res.json({ results });\n    } catch (error) {\n      res.status(500).json({ message: \"Upload failed: \" + (error as Error).message });\n    }\n  });\n\n  // Get upload sessions\n  app.get(\"/api/upload-sessions\", async (req, res) => {\n    try {\n      const sessions = await storage.getAllUploadSessions();\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch upload sessions\" });\n    }\n  });\n\n  // Enhanced program analysis using autonomous agent\n  app.post(\"/api/programs/:id/enhanced-analysis\", async (req, res) => {\n    try {\n      const programId = parseInt(req.params.id);\n      const program = await storage.getProgram(programId);\n      \n      if (!program) {\n        return res.status(404).json({ error: \"Program not found\" });\n      }\n\n      // Initialize autonomous agent with session tracking\n      const sessionId = `analysis_${Date.now()}_${programId}`;\n      const agent = new COBOLDocumentationAgent(sessionId, req.ip);\n\n      // Set user preferences if provided\n      const { detailLevel, audience, diagramType } = req.body;\n      if (detailLevel) agent.setUserPreference('detailLevel', detailLevel);\n      if (audience) agent.setUserPreference('audience', audience);\n      if (diagramType) agent.setUserPreference('diagramType', diagramType);\n\n      // Start observability tracking\n      const analysisSpan = observabilityTracker.startSpan(\n        \"enhanced_program_analysis\",\n        { \n          program_id: programId,\n          program_name: program.name,\n          session_id: sessionId\n        }\n      );\n\n      try {\n        // Perform enhanced analysis with the autonomous agent\n        const enhancedResults = await agent.analyzeCobolStructure(program.sourceCode, programId);\n        \n        // Evaluate documentation quality\n        const qualityEvaluation = await agent.evaluateDocumentationQuality(enhancedResults, programId);\n\n        // Update program with enhanced analysis results\n        await storage.updateProgram(programId, {\n          aiSummary: enhancedResults.programSummary.summary,\n          complexity: enhancedResults.programSummary.complexity,\n          systemExplanation: enhancedResults.systemExplanation,\n          mermaidDiagram: enhancedResults.mermaidDiagram,\n          status: \"completed\"\n        });\n\n        // Get session metrics for monitoring\n        const sessionMetrics = agent.getSessionMetrics();\n\n        observabilityTracker.endSpan(analysisSpan, {\n          success: true,\n          quality_score: qualityEvaluation.score,\n          completeness: qualityEvaluation.completeness\n        });\n\n        agent.cleanup();\n\n        res.json({\n          success: true,\n          results: enhancedResults,\n          qualityEvaluation,\n          sessionMetrics,\n          message: \"Enhanced analysis completed successfully\"\n        });\n\n      } catch (error) {\n        observabilityTracker.endSpan(analysisSpan, null, (error as Error).message);\n        agent.cleanup();\n        throw error;\n      }\n\n    } catch (error) {\n      console.error(\"Enhanced analysis failed:\", error);\n      res.status(500).json({ \n        error: \"Enhanced analysis failed\",\n        message: (error as Error).message\n      });\n    }\n  });\n\n  // Global search endpoint\n  app.get(\"/api/search/:query\", async (req, res) => {\n    try {\n      const query = req.params.query;\n      const [programs, dataElements] = await Promise.all([\n        storage.searchPrograms(query),\n        storage.searchDataElements(query),\n      ]);\n\n      res.json({\n        programs,\n        dataElements,\n        totalResults: programs.length + dataElements.length,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  // Add error handling middleware\n  app.use(errorHandler);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14481},"server/storage.ts":{"content":"import { \n  users, programs, dataElements, programRelationships, uploadSessions,\n  repositories, codeFiles, documentation, diagrams, businessLogic, dependencies,\n  qualityIssues, codeMetrics, businessRuleCandidates, controlFlowGraphs, jclJobs,\n  copybookRegistry, transformationReadiness,\n  type User, type InsertUser, type Program, type InsertProgram,\n  type DataElement, type InsertDataElement, type ProgramRelationship,\n  type InsertProgramRelationship, type UploadSession, type InsertUploadSession,\n  type Repository, type InsertRepository, type CodeFile, type InsertCodeFile,\n  type Documentation, type InsertDocumentation, type Diagram, type InsertDiagram,\n  type BusinessLogic, type InsertBusinessLogic, type Dependency, type InsertDependency,\n  type QualityIssue, type InsertQualityIssue, type CodeMetrics, type InsertCodeMetrics,\n  type BusinessRuleCandidate, type InsertBusinessRuleCandidate, type ControlFlowGraph,\n  type InsertControlFlowGraph, type JclJob, type InsertJclJob, type CopybookRegistry,\n  type InsertCopybookRegistry, type TransformationReadiness, type InsertTransformationReadiness,\n  type Statistics\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, ilike, or, count, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Program methods\n  getProgram(id: number): Promise<Program | undefined>;\n  getAllPrograms(): Promise<Program[]>;\n  getProgramByName(name: string): Promise<Program | undefined>;\n  createProgram(program: InsertProgram): Promise<Program>;\n  updateProgram(id: number, updates: Partial<Program>): Promise<Program>;\n  deleteProgram(id: number): Promise<void>;\n  searchPrograms(query: string): Promise<Program[]>;\n\n  // Data element methods\n  getDataElementsByProgramId(programId: number): Promise<DataElement[]>;\n  getAllDataElements(): Promise<DataElement[]>;\n  createDataElement(dataElement: InsertDataElement): Promise<DataElement>;\n  searchDataElements(query: string): Promise<DataElement[]>;\n\n  // Program relationship methods\n  getProgramRelationships(programId: number): Promise<ProgramRelationship[]>;\n  createProgramRelationship(relationship: InsertProgramRelationship): Promise<ProgramRelationship>;\n\n  // Upload session methods\n  getUploadSession(id: number): Promise<UploadSession | undefined>;\n  getAllUploadSessions(): Promise<UploadSession[]>;\n  createUploadSession(session: InsertUploadSession): Promise<UploadSession>;\n  updateUploadSession(id: number, updates: Partial<UploadSession>): Promise<UploadSession>;\n\n  // Statistics\n  getStatistics(): Promise<Statistics>;\n\n  // Repository methods\n  getRepository(id: number): Promise<Repository | undefined>;\n  getAllRepositories(): Promise<Repository[]>;\n  getRepositoriesByUser(userId: number): Promise<Repository[]>;\n  createRepository(repository: InsertRepository): Promise<Repository>;\n  updateRepository(id: number, updates: Partial<Repository>): Promise<Repository>;\n  deleteRepository(id: number): Promise<void>;\n\n  // Code file methods\n  getCodeFile(id: number): Promise<CodeFile | undefined>;\n  getCodeFilesByRepository(repositoryId: number): Promise<CodeFile[]>;\n  createCodeFile(codeFile: InsertCodeFile): Promise<CodeFile>;\n  updateCodeFile(id: number, updates: Partial<CodeFile>): Promise<CodeFile>;\n  deleteCodeFilesByRepository(repositoryId: number): Promise<void>;\n\n  // Documentation methods\n  getDocumentation(programId: number, type: string): Promise<Documentation | undefined>;\n  getAllDocumentationByProgram(programId: number): Promise<Documentation[]>;\n  createDocumentation(doc: InsertDocumentation): Promise<Documentation>;\n  updateDocumentation(id: number, updates: Partial<Documentation>): Promise<Documentation>;\n\n  // Diagram methods\n  getDiagramsByProgram(programId: number): Promise<Diagram[]>;\n  getDiagramsByDocumentation(documentationId: number): Promise<Diagram[]>;\n  createDiagram(diagram: InsertDiagram): Promise<Diagram>;\n\n  // Business logic methods\n  getBusinessLogicByProgram(programId: number): Promise<BusinessLogic[]>;\n  createBusinessLogic(logic: InsertBusinessLogic): Promise<BusinessLogic>;\n\n  // Dependency methods\n  getDependenciesByProgram(programId: number): Promise<Dependency[]>;\n  createDependency(dependency: InsertDependency): Promise<Dependency>;\n  getAllDependencies(): Promise<Dependency[]>;\n\n  // Quality issue methods\n  getQualityIssuesByProgram(programId: number): Promise<QualityIssue[]>;\n  createQualityIssue(issue: InsertQualityIssue): Promise<QualityIssue>;\n  updateQualityIssue(id: number, updates: Partial<QualityIssue>): Promise<QualityIssue>;\n  getQualityIssuesByRule(rule: string): Promise<QualityIssue[]>;\n\n  // Code metrics methods\n  getCodeMetricsByProgram(programId: number): Promise<CodeMetrics | undefined>;\n  createCodeMetrics(metrics: InsertCodeMetrics): Promise<CodeMetrics>;\n  updateCodeMetrics(programId: number, updates: Partial<CodeMetrics>): Promise<CodeMetrics>;\n\n  // Business rule candidate methods\n  getBusinessRuleCandidatesByProgram(programId: number): Promise<BusinessRuleCandidate[]>;\n  getBusinessRuleCandidate(id: string): Promise<BusinessRuleCandidate | undefined>;\n  updateBusinessRuleCandidate(id: string, updates: Partial<BusinessRuleCandidate>): Promise<BusinessRuleCandidate>;\n  \n  // Control flow graph methods\n  getControlFlowGraphByProgram(programId: number): Promise<ControlFlowGraph | undefined>;\n  createControlFlowGraph(cfg: InsertControlFlowGraph): Promise<ControlFlowGraph>;\n\n  // JCL job methods\n  getJclJobsByRepository(repositoryId: number): Promise<JclJob[]>;\n  createJclJob(job: InsertJclJob): Promise<JclJob>;\n\n  // Copybook registry methods\n  getCopybookByName(name: string): Promise<CopybookRegistry | undefined>;\n  createCopybook(copybook: InsertCopybookRegistry): Promise<CopybookRegistry>;\n  getCopybooksByProgram(programId: number): Promise<CopybookRegistry[]>;\n\n  // Transformation readiness methods\n  getTransformationReadinessByProgram(programId: number): Promise<TransformationReadiness | undefined>;\n  createTransformationReadiness(readiness: InsertTransformationReadiness): Promise<TransformationReadiness>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getProgram(id: number): Promise<Program | undefined> {\n    const [program] = await db.select().from(programs).where(eq(programs.id, id));\n    return program || undefined;\n  }\n\n  async getAllPrograms(): Promise<Program[]> {\n    return await db.select().from(programs);\n  }\n\n  async getProgramByName(name: string): Promise<Program | undefined> {\n    const [program] = await db.select().from(programs).where(eq(programs.name, name));\n    return program || undefined;\n  }\n\n  async createProgram(insertProgram: InsertProgram): Promise<Program> {\n    const [program] = await db\n      .insert(programs)\n      .values([insertProgram])\n      .returning();\n    return program;\n  }\n\n  async updateProgram(id: number, updates: Partial<Program>): Promise<Program> {\n    const [program] = await db\n      .update(programs)\n      .set(updates)\n      .where(eq(programs.id, id))\n      .returning();\n    \n    if (!program) {\n      throw new Error(`Program with id ${id} not found`);\n    }\n    \n    return program;\n  }\n\n  async deleteProgram(id: number): Promise<void> {\n    await db.delete(programs).where(eq(programs.id, id));\n    await db.delete(dataElements).where(eq(dataElements.programId, id));\n    await db.delete(programRelationships).where(\n      or(\n        eq(programRelationships.fromProgramId, id),\n        eq(programRelationships.toProgramId, id)\n      )\n    );\n  }\n\n  async searchPrograms(query: string): Promise<Program[]> {\n    return await db\n      .select()\n      .from(programs)\n      .where(\n        or(\n          ilike(programs.name, `%${query}%`),\n          ilike(programs.filename, `%${query}%`),\n          ilike(programs.aiSummary, `%${query}%`)\n        )\n      );\n  }\n\n  async getDataElementsByProgramId(programId: number): Promise<DataElement[]> {\n    return await db\n      .select()\n      .from(dataElements)\n      .where(eq(dataElements.programId, programId));\n  }\n\n  async getAllDataElements(): Promise<DataElement[]> {\n    return await db.select().from(dataElements);\n  }\n\n  async createDataElement(insertDataElement: InsertDataElement): Promise<DataElement> {\n    const [dataElement] = await db\n      .insert(dataElements)\n      .values(insertDataElement)\n      .returning();\n    return dataElement;\n  }\n\n  async searchDataElements(query: string): Promise<DataElement[]> {\n    return await db\n      .select()\n      .from(dataElements)\n      .where(\n        or(\n          ilike(dataElements.name, `%${query}%`),\n          ilike(dataElements.description, `%${query}%`)\n        )\n      );\n  }\n\n  async getProgramRelationships(programId: number): Promise<ProgramRelationship[]> {\n    return await db\n      .select()\n      .from(programRelationships)\n      .where(\n        or(\n          eq(programRelationships.fromProgramId, programId),\n          eq(programRelationships.toProgramId, programId)\n        )\n      );\n  }\n\n  async createProgramRelationship(insertRelationship: InsertProgramRelationship): Promise<ProgramRelationship> {\n    const [relationship] = await db\n      .insert(programRelationships)\n      .values(insertRelationship)\n      .returning();\n    return relationship;\n  }\n\n  async getUploadSession(id: number): Promise<UploadSession | undefined> {\n    const [session] = await db.select().from(uploadSessions).where(eq(uploadSessions.id, id));\n    return session || undefined;\n  }\n\n  async getAllUploadSessions(): Promise<UploadSession[]> {\n    return await db.select().from(uploadSessions);\n  }\n\n  async createUploadSession(insertSession: InsertUploadSession): Promise<UploadSession> {\n    const [session] = await db\n      .insert(uploadSessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async updateUploadSession(id: number, updates: Partial<UploadSession>): Promise<UploadSession> {\n    const [session] = await db\n      .update(uploadSessions)\n      .set(updates)\n      .where(eq(uploadSessions.id, id))\n      .returning();\n    \n    if (!session) {\n      throw new Error(`Upload session with id ${id} not found`);\n    }\n    \n    return session;\n  }\n\n  async getStatistics(): Promise<Statistics> {\n    const [totalPrograms] = await db\n      .select({ count: count() })\n      .from(programs);\n\n    const [documentedPrograms] = await db\n      .select({ count: count() })\n      .from(programs)\n      .where(eq(programs.status, 'completed'));\n\n    const [dataElementsCount] = await db\n      .select({ count: count() })\n      .from(dataElements);\n\n    const [issuesFound] = await db\n      .select({ count: count() })\n      .from(programs)\n      .where(eq(programs.status, 'failed'));\n    \n    const [repositoriesCount] = await db\n      .select({ count: count() })\n      .from(repositories);\n    \n    const [totalFilesCount] = await db\n      .select({ count: count() })\n      .from(codeFiles);\n    \n    return {\n      totalPrograms: totalPrograms.count,\n      documentedPrograms: documentedPrograms.count,\n      dataElements: dataElementsCount.count,\n      issuesFound: issuesFound.count,\n      repositories: repositoriesCount.count,\n      totalFiles: totalFilesCount.count,\n    };\n  }\n\n  // Repository methods\n  async getRepository(id: number): Promise<Repository | undefined> {\n    const [repository] = await db.select().from(repositories).where(eq(repositories.id, id));\n    return repository || undefined;\n  }\n\n  async getAllRepositories(): Promise<Repository[]> {\n    return await db.select().from(repositories);\n  }\n\n  async getRepositoriesByUser(userId: number): Promise<Repository[]> {\n    return await db.select().from(repositories).where(eq(repositories.userId, userId));\n  }\n\n  async createRepository(insertRepository: InsertRepository): Promise<Repository> {\n    const [repository] = await db\n      .insert(repositories)\n      .values([insertRepository])\n      .returning();\n    return repository;\n  }\n\n  async updateRepository(id: number, updates: Partial<Repository>): Promise<Repository> {\n    const [repository] = await db\n      .update(repositories)\n      .set(updates)\n      .where(eq(repositories.id, id))\n      .returning();\n    \n    if (!repository) {\n      throw new Error(`Repository with id ${id} not found`);\n    }\n    \n    return repository;\n  }\n\n  async deleteRepository(id: number): Promise<void> {\n    await db.delete(codeFiles).where(eq(codeFiles.repositoryId, id));\n    await db.delete(repositories).where(eq(repositories.id, id));\n  }\n\n  // Code file methods\n  async getCodeFile(id: number): Promise<CodeFile | undefined> {\n    const [codeFile] = await db.select().from(codeFiles).where(eq(codeFiles.id, id));\n    return codeFile || undefined;\n  }\n\n  async getCodeFilesByRepository(repositoryId: number): Promise<CodeFile[]> {\n    return await db.select().from(codeFiles).where(eq(codeFiles.repositoryId, repositoryId));\n  }\n\n  async createCodeFile(insertCodeFile: InsertCodeFile): Promise<CodeFile> {\n    const [codeFile] = await db\n      .insert(codeFiles)\n      .values([insertCodeFile])\n      .returning();\n    return codeFile;\n  }\n\n  async updateCodeFile(id: number, updates: Partial<CodeFile>): Promise<CodeFile> {\n    const [codeFile] = await db\n      .update(codeFiles)\n      .set(updates)\n      .where(eq(codeFiles.id, id))\n      .returning();\n    \n    if (!codeFile) {\n      throw new Error(`Code file with id ${id} not found`);\n    }\n    \n    return codeFile;\n  }\n\n  async deleteCodeFilesByRepository(repositoryId: number): Promise<void> {\n    await db.delete(codeFiles).where(eq(codeFiles.repositoryId, repositoryId));\n  }\n\n  // Documentation methods\n  async getDocumentation(programId: number, type: string): Promise<Documentation | undefined> {\n    const [doc] = await db\n      .select()\n      .from(documentation)\n      .where(and(\n        eq(documentation.programId, programId),\n        eq(documentation.type, type)\n      ));\n    return doc || undefined;\n  }\n\n  async getAllDocumentationByProgram(programId: number): Promise<Documentation[]> {\n    return await db.select().from(documentation).where(eq(documentation.programId, programId));\n  }\n\n  async createDocumentation(insertDoc: InsertDocumentation): Promise<Documentation> {\n    const [doc] = await db\n      .insert(documentation)\n      .values([insertDoc])\n      .returning();\n    return doc;\n  }\n\n  async updateDocumentation(id: number, updates: Partial<Documentation>): Promise<Documentation> {\n    const [doc] = await db\n      .update(documentation)\n      .set(updates)\n      .where(eq(documentation.id, id))\n      .returning();\n    \n    if (!doc) {\n      throw new Error(`Documentation with id ${id} not found`);\n    }\n    \n    return doc;\n  }\n\n  // Diagram methods\n  async getDiagramsByProgram(programId: number): Promise<Diagram[]> {\n    return await db.select().from(diagrams).where(eq(diagrams.programId, programId));\n  }\n\n  async getDiagramsByDocumentation(documentationId: number): Promise<Diagram[]> {\n    return await db.select().from(diagrams).where(eq(diagrams.documentationId, documentationId));\n  }\n\n  async createDiagram(insertDiagram: InsertDiagram): Promise<Diagram> {\n    const [diagram] = await db\n      .insert(diagrams)\n      .values([insertDiagram])\n      .returning();\n    return diagram;\n  }\n\n  // Business logic methods\n  async getBusinessLogicByProgram(programId: number): Promise<BusinessLogic[]> {\n    return await db.select().from(businessLogic).where(eq(businessLogic.programId, programId));\n  }\n\n  async createBusinessLogic(insertLogic: InsertBusinessLogic): Promise<BusinessLogic> {\n    const [logic] = await db\n      .insert(businessLogic)\n      .values([insertLogic])\n      .returning();\n    return logic;\n  }\n\n  // Dependency methods\n  async getDependenciesByProgram(programId: number): Promise<Dependency[]> {\n    return await db\n      .select()\n      .from(dependencies)\n      .where(\n        or(\n          eq(dependencies.fromProgramId, programId),\n          eq(dependencies.toProgramId, programId)\n        )\n      );\n  }\n\n  async createDependency(insertDependency: InsertDependency): Promise<Dependency> {\n    const [dependency] = await db\n      .insert(dependencies)\n      .values([insertDependency])\n      .returning();\n    return dependency;\n  }\n\n  async getAllDependencies(): Promise<Dependency[]> {\n    return await db.select().from(dependencies);\n  }\n\n  // Quality issue methods\n  async getQualityIssuesByProgram(programId: number): Promise<QualityIssue[]> {\n    return await db.select().from(qualityIssues).where(eq(qualityIssues.programId, programId));\n  }\n\n  async createQualityIssue(insertIssue: InsertQualityIssue): Promise<QualityIssue> {\n    const [issue] = await db\n      .insert(qualityIssues)\n      .values([insertIssue])\n      .returning();\n    return issue;\n  }\n\n  async updateQualityIssue(id: number, updates: Partial<QualityIssue>): Promise<QualityIssue> {\n    const [issue] = await db\n      .update(qualityIssues)\n      .set(updates)\n      .where(eq(qualityIssues.id, id))\n      .returning();\n    \n    if (!issue) {\n      throw new Error(`Quality issue with id ${id} not found`);\n    }\n    \n    return issue;\n  }\n\n  async getQualityIssuesByRule(rule: string): Promise<QualityIssue[]> {\n    return await db.select().from(qualityIssues).where(eq(qualityIssues.rule, rule));\n  }\n\n  // Code metrics methods\n  async getCodeMetricsByProgram(programId: number): Promise<CodeMetrics | undefined> {\n    const [metrics] = await db.select().from(codeMetrics).where(eq(codeMetrics.programId, programId));\n    return metrics || undefined;\n  }\n\n  async createCodeMetrics(insertMetrics: InsertCodeMetrics): Promise<CodeMetrics> {\n    const [metrics] = await db\n      .insert(codeMetrics)\n      .values([insertMetrics])\n      .returning();\n    return metrics;\n  }\n\n  async updateCodeMetrics(programId: number, updates: Partial<CodeMetrics>): Promise<CodeMetrics> {\n    const [metrics] = await db\n      .update(codeMetrics)\n      .set(updates)\n      .where(eq(codeMetrics.programId, programId))\n      .returning();\n    \n    if (!metrics) {\n      throw new Error(`Code metrics for program ${programId} not found`);\n    }\n    \n    return metrics;\n  }\n\n  // Business rule candidate methods\n  async getBusinessRuleCandidatesByProgram(programId: number): Promise<BusinessRuleCandidate[]> {\n    return await db.select().from(businessRuleCandidates).where(eq(businessRuleCandidates.programId, programId));\n  }\n\n  async getBusinessRuleCandidate(id: string): Promise<BusinessRuleCandidate | undefined> {\n    const [candidate] = await db.select().from(businessRuleCandidates).where(eq(businessRuleCandidates.id, parseInt(id)));\n    return candidate || undefined;\n  }\n\n  async updateBusinessRuleCandidate(id: string, updates: Partial<BusinessRuleCandidate>): Promise<BusinessRuleCandidate> {\n    const [candidate] = await db\n      .update(businessRuleCandidates)\n      .set(updates)\n      .where(eq(businessRuleCandidates.id, parseInt(id)))\n      .returning();\n    \n    if (!candidate) {\n      throw new Error(`Business rule candidate with id ${id} not found`);\n    }\n    \n    return candidate;\n  }\n\n  // Control flow graph methods\n  async getControlFlowGraphByProgram(programId: number): Promise<ControlFlowGraph | undefined> {\n    const [cfg] = await db.select().from(controlFlowGraphs).where(eq(controlFlowGraphs.programId, programId));\n    return cfg || undefined;\n  }\n\n  async createControlFlowGraph(insertCfg: InsertControlFlowGraph): Promise<ControlFlowGraph> {\n    const [cfg] = await db\n      .insert(controlFlowGraphs)\n      .values([insertCfg])\n      .returning();\n    return cfg;\n  }\n\n  // JCL job methods\n  async getJclJobsByRepository(repositoryId: number): Promise<JclJob[]> {\n    return await db.select().from(jclJobs).where(eq(jclJobs.repositoryId, repositoryId));\n  }\n\n  async createJclJob(insertJob: InsertJclJob): Promise<JclJob> {\n    const [job] = await db\n      .insert(jclJobs)\n      .values([insertJob])\n      .returning();\n    return job;\n  }\n\n  // Copybook registry methods\n  async getCopybookByName(name: string): Promise<CopybookRegistry | undefined> {\n    const [copybook] = await db.select().from(copybookRegistry).where(eq(copybookRegistry.name, name));\n    return copybook || undefined;\n  }\n\n  async createCopybook(insertCopybook: InsertCopybookRegistry): Promise<CopybookRegistry> {\n    const [copybook] = await db\n      .insert(copybookRegistry)\n      .values([insertCopybook])\n      .returning();\n    return copybook;\n  }\n\n  async getCopybooksByProgram(programId: number): Promise<CopybookRegistry[]> {\n    return await db\n      .select()\n      .from(copybookRegistry)\n      .where(eq(copybookRegistry.usedByPrograms, [programId]));\n  }\n\n  // Transformation readiness methods\n  async getTransformationReadinessByProgram(programId: number): Promise<TransformationReadiness | undefined> {\n    const [readiness] = await db.select().from(transformationReadiness).where(eq(transformationReadiness.programId, programId));\n    return readiness || undefined;\n  }\n\n  async createTransformationReadiness(insertReadiness: InsertTransformationReadiness): Promise<TransformationReadiness> {\n    const [readiness] = await db\n      .insert(transformationReadiness)\n      .values([insertReadiness])\n      .returning();\n    return readiness;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":21951},"server/test-claude-integration.ts":{"content":"// Test file to debug Claude integration issues\nimport { generateClaudeProgramSummary } from './anthropic-claude';\n\nasync function testClaudeIntegration() {\n  try {\n    console.log('Testing Claude program summary generation...');\n    \n    const result = await generateClaudeProgramSummary(\n      'TEST-PROGRAM',\n      'IDENTIFICATION DIVISION, DATA DIVISION, PROCEDURE DIVISION',\n      'IDENTIFICATION DIVISION. PROGRAM-ID. TEST-PROGRAM.'\n    );\n    \n    console.log('Claude response:', JSON.stringify(result, null, 2));\n    \n    if (result && result.summary) {\n      console.log('✓ Claude integration working correctly');\n    } else {\n      console.log('✗ Claude integration returning empty/invalid data');\n    }\n    \n  } catch (error) {\n    console.error('✗ Claude integration failed:', error);\n  }\n}\n\n// Run test\ntestClaudeIntegration();\n\nexport { testClaudeIntegration };","size_bytes":881},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  githubToken: text(\"github_token\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// New table for GitHub repositories\nexport const repositories = pgTable(\"repositories\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  githubUrl: text(\"github_url\").notNull(),\n  owner: text(\"owner\").notNull(),\n  name: text(\"name\").notNull(),\n  branch: text(\"branch\").notNull().default(\"main\"),\n  lastSyncedCommit: text(\"last_synced_commit\"),\n  syncStatus: text(\"sync_status\").notNull().default(\"pending\"), // pending, syncing, completed, failed\n  webhookId: text(\"webhook_id\"),\n  accessToken: text(\"access_token\"), // encrypted\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Table for code files from repositories\nexport const codeFiles = pgTable(\"code_files\", {\n  id: serial(\"id\").primaryKey(),\n  repositoryId: integer(\"repository_id\").notNull(),\n  programId: integer(\"program_id\"), // Link to existing programs table\n  filePath: text(\"file_path\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  content: text(\"content\").notNull(),\n  language: text(\"language\").notNull().default(\"COBOL\"), // COBOL, JCL, COPYBOOK\n  version: text(\"version\").notNull(),\n  hash: text(\"hash\").notNull(),\n  size: integer(\"size\").notNull(),\n  lastModified: timestamp(\"last_modified\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const programs = pgTable(\"programs\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  filename: text(\"filename\").notNull(),\n  sourceCode: text(\"source_code\").notNull(),\n  aiSummary: text(\"ai_summary\"),\n  linesOfCode: integer(\"lines_of_code\").notNull(),\n  complexity: text(\"complexity\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, processing, completed, failed\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n  lastModified: timestamp(\"last_modified\"),\n  businessRules: jsonb(\"business_rules\").$type<Array<{\n    rule: string;\n    condition: string;\n    action: string;\n    codeLocation: string;\n  }>>(),\n  structure: jsonb(\"structure\").$type<{\n    divisions: Array<{\n      name: string;\n      sections: Array<{\n        name: string;\n        paragraphs?: string[];\n      }>;\n    }>;\n  }>(),\n  systemExplanation: jsonb(\"system_explanation\").$type<{\n    plainEnglishSummary: string;\n    keyBusinessProcesses: string[];\n    dataFlow: string;\n    userImpact: string;\n    technicalComplexity: string;\n  }>(),\n  mermaidDiagram: jsonb(\"mermaid_diagram\").$type<{\n    type: \"flowchart\" | \"sequenceDiagram\" | \"classDiagram\" | \"erDiagram\";\n    title: string;\n    description: string;\n    mermaidCode: string;\n  }>(),\n});\n\nexport const dataElements = pgTable(\"data_elements\", {\n  id: serial(\"id\").primaryKey(),\n  programId: integer(\"program_id\").notNull(),\n  name: text(\"name\").notNull(),\n  picture: text(\"picture\"),\n  level: text(\"level\"),\n  usage: text(\"usage\"),\n  description: text(\"description\"),\n  parentElement: text(\"parent_element\"),\n  usedInPrograms: text(\"used_in_programs\").array(),\n});\n\nexport const programRelationships = pgTable(\"program_relationships\", {\n  id: serial(\"id\").primaryKey(),\n  fromProgramId: integer(\"from_program_id\").notNull(),\n  toProgramId: integer(\"to_program_id\").notNull(),\n  relationshipType: text(\"relationship_type\").notNull(), // calls, includes, references\n  location: text(\"location\"), // where in the code this relationship occurs\n});\n\nexport const uploadSessions = pgTable(\"upload_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  filename: text(\"filename\").notNull(),\n  size: integer(\"size\").notNull(),\n  status: text(\"status\").notNull().default(\"uploaded\"), // uploaded, processing, completed, failed\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n  errorMessage: text(\"error_message\"),\n});\n\n// Enhanced documentation table\nexport const documentation = pgTable(\"documentation\", {\n  id: serial(\"id\").primaryKey(),\n  programId: integer(\"program_id\").notNull(),\n  type: text(\"type\").notNull(), // overview, book, member, architecture, business-logic\n  content: text(\"content\").notNull(),\n  format: text(\"format\").notNull().default(\"markdown\"), // markdown, html, pdf\n  version: text(\"version\").notNull(),\n  metadata: jsonb(\"metadata\").$type<{\n    sections?: string[];\n    pageCount?: number;\n    lastReviewed?: string;\n    approvedBy?: string;\n  }>(),\n  generatedAt: timestamp(\"generated_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Diagrams table\nexport const diagrams = pgTable(\"diagrams\", {\n  id: serial(\"id\").primaryKey(),\n  documentationId: integer(\"documentation_id\"),\n  programId: integer(\"program_id\"),\n  type: text(\"type\").notNull(), // mermaid, decision-tree, flow, architecture\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  code: text(\"code\").notNull(),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Business logic extraction\nexport const businessLogic = pgTable(\"business_logic\", {\n  id: serial(\"id\").primaryKey(),\n  programId: integer(\"program_id\").notNull(),\n  ruleName: text(\"rule_name\").notNull(),\n  description: text(\"description\").notNull(),\n  source: text(\"source\").notNull(), // Source code location\n  purpose: text(\"purpose\").notNull(),\n  inputs: jsonb(\"inputs\").$type<string[]>(),\n  outputs: jsonb(\"outputs\").$type<string[]>(),\n  dependencies: jsonb(\"dependencies\").$type<number[]>(),\n  conditions: text(\"conditions\"),\n  actions: text(\"actions\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Enhanced dependency tracking\nexport const dependencies = pgTable(\"dependencies\", {\n  id: serial(\"id\").primaryKey(),\n  fromProgramId: integer(\"from_program_id\").notNull(),\n  toProgramId: integer(\"to_program_id\").notNull(),\n  type: text(\"type\").notNull(), // calls, includes, references, uses-data\n  context: text(\"context\"),\n  strength: text(\"strength\").notNull().default(\"medium\"), // strong, medium, weak\n  metadata: jsonb(\"metadata\").$type<{\n    lineNumbers?: number[];\n    variables?: string[];\n    frequency?: number;\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Control Flow Graphs\nexport const controlFlowGraphs = pgTable(\"control_flow_graphs\", {\n  id: serial(\"id\").primaryKey(),\n  programId: integer(\"program_id\").notNull(),\n  nodes: jsonb(\"nodes\").$type<Array<{\n    id: string;\n    type: string;\n    statement?: string;\n    condition?: string;\n    location: { line: number; paragraph?: string; section?: string };\n    predecessors: string[];\n    successors: string[];\n  }>>(),\n  entryNode: text(\"entry_node\").notNull(),\n  exitNodes: text(\"exit_nodes\").array(),\n  metadata: jsonb(\"metadata\").$type<{\n    complexity?: number;\n    nodeCount?: number;\n    edgeCount?: number;\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Quality Issues\nexport const qualityIssues = pgTable(\"quality_issues\", {\n  id: serial(\"id\").primaryKey(),\n  programId: integer(\"program_id\").notNull(),\n  rule: text(\"rule\").notNull(),\n  severity: text(\"severity\").notNull(), // critical, major, minor, info\n  category: text(\"category\").notNull(), // bug, vulnerability, smell, performance\n  message: text(\"message\").notNull(),\n  location: jsonb(\"location\").$type<{\n    line: number;\n    column?: number;\n    paragraph?: string;\n    endLine?: number;\n  }>(),\n  suggestion: text(\"suggestion\"),\n  status: text(\"status\").notNull().default(\"open\"), // open, fixed, suppressed, false-positive\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\n// Code Metrics\nexport const codeMetrics = pgTable(\"code_metrics\", {\n  id: serial(\"id\").primaryKey(),\n  programId: integer(\"program_id\").notNull(),\n  linesOfCode: integer(\"lines_of_code\").notNull(),\n  cyclomaticComplexity: integer(\"cyclomatic_complexity\").notNull(),\n  cognitiveComplexity: integer(\"cognitive_complexity\").notNull(),\n  depthOfNesting: integer(\"depth_of_nesting\").notNull(),\n  numberOfParagraphs: integer(\"number_of_paragraphs\").notNull(),\n  numberOfSections: integer(\"number_of_sections\").notNull(),\n  halsteadMetrics: jsonb(\"halstead_metrics\").$type<{\n    vocabulary: number;\n    length: number;\n    difficulty: number;\n    effort: number;\n  }>(),\n  maintainabilityIndex: integer(\"maintainability_index\"),\n  technicalDebt: integer(\"technical_debt_minutes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Business Rule Candidates\nexport const businessRuleCandidates = pgTable(\"business_rule_candidates\", {\n  id: serial(\"id\").primaryKey(),\n  programId: integer(\"program_id\").notNull(),\n  type: text(\"type\").notNull(), // condition, calculation, validation, decision\n  description: text(\"description\").notNull(),\n  confidence: integer(\"confidence\").notNull(), // 0-100\n  location: jsonb(\"location\").$type<{\n    line: number;\n    paragraph?: string;\n    section?: string;\n  }>(),\n  variables: text(\"variables\").array(),\n  conditions: text(\"conditions\").array(),\n  actions: text(\"actions\").array(),\n  evidence: text(\"evidence\").array(),\n  status: text(\"status\").notNull().default(\"candidate\"), // candidate, confirmed, rejected\n  reviewedBy: text(\"reviewed_by\"),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// JCL Jobs and Steps\nexport const jclJobs = pgTable(\"jcl_jobs\", {\n  id: serial(\"id\").primaryKey(),\n  repositoryId: integer(\"repository_id\").notNull(),\n  jobName: text(\"job_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  content: text(\"content\").notNull(),\n  steps: jsonb(\"steps\").$type<Array<{\n    stepName: string;\n    program?: string;\n    datasets: string[];\n    conditions?: string[];\n    order: number;\n  }>>(),\n  dependencies: jsonb(\"dependencies\").$type<Array<{\n    type: 'dataset' | 'program' | 'job';\n    target: string;\n    relationship: 'input' | 'output' | 'calls';\n  }>>(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Copybook Registry\nexport const copybookRegistry = pgTable(\"copybook_registry\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  library: text(\"library\"),\n  content: text(\"content\").notNull(),\n  dataElements: jsonb(\"data_elements\").$type<Array<{\n    name: string;\n    level: number;\n    picture?: string;\n    usage?: string;\n    redefines?: string;\n    occurs?: number;\n    dependingOn?: string;\n  }>>(),\n  usedByPrograms: integer(\"used_by_programs\").array(),\n  version: text(\"version\").notNull(),\n  hash: text(\"hash\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Impact Analysis Cache\nexport const impactAnalysisCache = pgTable(\"impact_analysis_cache\", {\n  id: serial(\"id\").primaryKey(),\n  sourceType: text(\"source_type\").notNull(), // program, copybook, dataset\n  sourceId: text(\"source_id\").notNull(),\n  impactedItems: jsonb(\"impacted_items\").$type<Array<{\n    type: string;\n    id: string;\n    name: string;\n    relationship: string;\n    severity: 'high' | 'medium' | 'low';\n  }>>(),\n  analysisDate: timestamp(\"analysis_date\").notNull(),\n  cacheExpiry: timestamp(\"cache_expiry\").notNull(),\n});\n\n// Transformation Readiness\nexport const transformationReadiness = pgTable(\"transformation_readiness\", {\n  id: serial(\"id\").primaryKey(),\n  programId: integer(\"program_id\").notNull(),\n  readinessScore: integer(\"readiness_score\").notNull(), // 0-100\n  complexityFactors: jsonb(\"complexity_factors\").$type<{\n    dialectSpecific: number;\n    dataStructureComplexity: number;\n    businessLogicComplexity: number;\n    externalDependencies: number;\n  }>(),\n  blockers: text(\"blockers\").array(),\n  recommendations: text(\"recommendations\").array(),\n  estimatedEffort: integer(\"estimated_effort_days\"),\n  targetPlatform: text(\"target_platform\"),\n  assessmentDate: timestamp(\"assessment_date\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  githubToken: true,\n});\n\nexport const insertRepositorySchema = createInsertSchema(repositories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCodeFileSchema = createInsertSchema(codeFiles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDocumentationSchema = createInsertSchema(documentation).omit({\n  id: true,\n  generatedAt: true,\n  updatedAt: true,\n});\n\nexport const insertDiagramSchema = createInsertSchema(diagrams).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBusinessLogicSchema = createInsertSchema(businessLogic).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDependencySchema = createInsertSchema(dependencies).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertControlFlowGraphSchema = createInsertSchema(controlFlowGraphs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQualityIssueSchema = createInsertSchema(qualityIssues).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCodeMetricsSchema = createInsertSchema(codeMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBusinessRuleCandidateSchema = createInsertSchema(businessRuleCandidates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJclJobSchema = createInsertSchema(jclJobs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCopybookRegistrySchema = createInsertSchema(copybookRegistry).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTransformationReadinessSchema = createInsertSchema(transformationReadiness).omit({\n  id: true,\n  assessmentDate: true,\n});\n\nexport const insertProgramSchema = createInsertSchema(programs).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertDataElementSchema = createInsertSchema(dataElements).omit({\n  id: true,\n});\n\nexport const insertProgramRelationshipSchema = createInsertSchema(programRelationships).omit({\n  id: true,\n});\n\nexport const insertUploadSessionSchema = createInsertSchema(uploadSessions).omit({\n  id: true,\n  uploadedAt: true,\n});\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Repository = typeof repositories.$inferSelect;\nexport type InsertRepository = z.infer<typeof insertRepositorySchema>;\nexport type CodeFile = typeof codeFiles.$inferSelect;\nexport type InsertCodeFile = z.infer<typeof insertCodeFileSchema>;\nexport type Program = typeof programs.$inferSelect;\nexport type InsertProgram = z.infer<typeof insertProgramSchema>;\nexport type DataElement = typeof dataElements.$inferSelect;\nexport type InsertDataElement = z.infer<typeof insertDataElementSchema>;\nexport type ProgramRelationship = typeof programRelationships.$inferSelect;\nexport type InsertProgramRelationship = z.infer<typeof insertProgramRelationshipSchema>;\nexport type UploadSession = typeof uploadSessions.$inferSelect;\nexport type InsertUploadSession = z.infer<typeof insertUploadSessionSchema>;\nexport type Documentation = typeof documentation.$inferSelect;\nexport type InsertDocumentation = z.infer<typeof insertDocumentationSchema>;\nexport type Diagram = typeof diagrams.$inferSelect;\nexport type InsertDiagram = z.infer<typeof insertDiagramSchema>;\nexport type BusinessLogic = typeof businessLogic.$inferSelect;\nexport type InsertBusinessLogic = z.infer<typeof insertBusinessLogicSchema>;\nexport type Dependency = typeof dependencies.$inferSelect;\nexport type InsertDependency = z.infer<typeof insertDependencySchema>;\nexport type ControlFlowGraph = typeof controlFlowGraphs.$inferSelect;\nexport type InsertControlFlowGraph = z.infer<typeof insertControlFlowGraphSchema>;\nexport type QualityIssue = typeof qualityIssues.$inferSelect;\nexport type InsertQualityIssue = z.infer<typeof insertQualityIssueSchema>;\nexport type CodeMetrics = typeof codeMetrics.$inferSelect;\nexport type InsertCodeMetrics = z.infer<typeof insertCodeMetricsSchema>;\nexport type BusinessRuleCandidate = typeof businessRuleCandidates.$inferSelect;\nexport type InsertBusinessRuleCandidate = z.infer<typeof insertBusinessRuleCandidateSchema>;\nexport type JclJob = typeof jclJobs.$inferSelect;\nexport type InsertJclJob = z.infer<typeof insertJclJobSchema>;\nexport type CopybookRegistry = typeof copybookRegistry.$inferSelect;\nexport type InsertCopybookRegistry = z.infer<typeof insertCopybookRegistrySchema>;\nexport type ImpactAnalysisCache = typeof impactAnalysisCache.$inferSelect;\nexport type TransformationReadiness = typeof transformationReadiness.$inferSelect;\nexport type InsertTransformationReadiness = z.infer<typeof insertTransformationReadinessSchema>;\n\n// Statistics type\nexport type Statistics = {\n  totalPrograms: number;\n  documentedPrograms: number;\n  dataElements: number;\n  issuesFound: number;\n  repositories: number;\n  totalFiles: number;\n  qualityIssues: number;\n  businessRules: number;\n  copybooksManaged: number;\n  averageComplexity: number;\n};\n","size_bytes":17294},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Upload from \"@/pages/upload\";\nimport Programs from \"@/pages/programs\";\nimport BusinessRules from \"@/pages/business-rules\";\nimport DataDictionary from \"@/pages/data-dictionary\";\nimport Visualizations from \"@/pages/visualizations\";\nimport ProgramDetail from \"@/pages/program-detail\";\nimport Repositories from \"@/pages/repositories\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/repositories\" component={Repositories} />\n      <Route path=\"/programs\" component={Programs} />\n      <Route path=\"/business-rules\" component={BusinessRules} />\n      <Route path=\"/data-dictionary\" component={DataDictionary} />\n      <Route path=\"/visualizations\" component={Visualizations} />\n      <Route path=\"/upload\" component={Upload} />\n      <Route path=\"/program/:id\" component={ProgramDetail} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground dark\">\n          <div className=\"flex h-screen\">\n            <Sidebar />\n            <div className=\"flex-1 flex flex-col overflow-hidden\">\n              <Header />\n              <main className=\"flex-1 overflow-y-auto\">\n                <Router />\n              </main>\n            </div>\n          </div>\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1949},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 220 20% 14%; /* Dark blue-gray background */\n  --foreground: 0 0% 100%; /* Pure white text */\n  --muted: 220 15% 20%; /* Darker muted background */\n  --muted-foreground: 210 15% 75%; /* Light gray muted text */\n  --popover: 220 20% 16%; /* Slightly lighter dark background */\n  --popover-foreground: 0 0% 100%; /* Pure white text */\n  --card: 220 20% 18%; /* Card background */\n  --card-foreground: 0 0% 100%; /* White card text */\n  --border: 220 13% 25%; /* Border color */\n  --input: 220 13% 25%; /* Input background */\n  --primary: 150 100% 40%; /* Bright green primary */\n  --primary-foreground: 220 20% 14%; /* Dark text on green */\n  --secondary: 220 15% 25%; /* Secondary background */\n  --secondary-foreground: 0 0% 100%; /* White secondary text */\n  --accent: 150 80% 35%; /* Darker green accent */\n  --accent-foreground: 0 0% 100%; /* White accent text */\n  --destructive: 0 75% 60%; /* Red destructive */\n  --destructive-foreground: 0 0% 100%; /* White destructive text */\n  --success: 150 100% 40%; /* Green success */\n  --warning: 45 100% 60%; /* Yellow warning */\n  --ring: 150 100% 40%; /* Green ring */\n  --radius: 0.75rem;\n  --sidebar-bg: 220 25% 11%; /* Darker sidebar */\n  --sidebar-hover: 220 20% 16%; /* Sidebar hover */\n  --sidebar-active: 150 100% 40%; /* Green active state */\n}\n\n.dark {\n  --background: 220 20% 14%; /* Dark blue-gray background */\n  --foreground: 0 0% 100%; /* Pure white text */\n  --muted: 220 15% 20%; /* Darker muted background */\n  --muted-foreground: 210 15% 75%; /* Light gray muted text */\n  --popover: 220 20% 16%; /* Slightly lighter dark background */\n  --popover-foreground: 0 0% 100%; /* Pure white text */\n  --card: 220 20% 18%; /* Card background */\n  --card-foreground: 0 0% 100%; /* White card text */\n  --border: 220 13% 25%; /* Border color */\n  --input: 220 13% 25%; /* Input background */\n  --primary: 150 100% 40%; /* Bright green primary */\n  --primary-foreground: 220 20% 14%; /* Dark text on green */\n  --secondary: 220 15% 25%; /* Secondary background */\n  --secondary-foreground: 0 0% 100%; /* White secondary text */\n  --accent: 150 80% 35%; /* Darker green accent */\n  --accent-foreground: 0 0% 100%; /* White accent text */\n  --destructive: 0 75% 60%; /* Red destructive */\n  --destructive-foreground: 0 0% 100%; /* White destructive text */\n  --success: 150 100% 40%; /* Green success */\n  --warning: 45 100% 60%; /* Yellow warning */\n  --ring: 150 100% 40%; /* Green ring */\n  --sidebar-bg: 220 25% 11%; /* Darker sidebar */\n  --sidebar-hover: 220 20% 16%; /* Sidebar hover */\n  --sidebar-active: 150 100% 40%; /* Green active state */\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n\n  .font-mono {\n    font-family: 'JetBrains Mono', 'Consolas', monospace;\n  }\n}\n\n@layer components {\n  .sidebar-item {\n    @apply flex items-center space-x-3 px-4 py-3 rounded-lg text-white/70 hover:text-white hover:bg-[hsl(var(--sidebar-hover))] transition-all duration-200;\n  }\n\n  .sidebar-item.active {\n    @apply bg-primary text-[hsl(var(--primary-foreground))] hover:bg-primary shadow-lg shadow-primary/20;\n  }\n\n  .code-line {\n    @apply font-mono text-sm leading-6;\n  }\n\n  .program-card {\n    @apply border border-border rounded-xl p-6 hover:border-primary/50 transition-all duration-300 cursor-pointer bg-card hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5;\n  }\n\n  .program-card.selected {\n    @apply border-primary bg-primary/5 shadow-lg shadow-primary/10;\n  }\n\n  .stats-card {\n    @apply bg-card rounded-xl shadow-sm border border-border p-6 hover:bg-card/80 transition-colors duration-200;\n  }\n\n  .data-table {\n    @apply min-w-full divide-y divide-border;\n  }\n\n  .data-table th {\n    @apply px-6 py-4 text-left text-xs font-semibold text-muted-foreground uppercase tracking-wider;\n  }\n\n  .data-table td {\n    @apply px-6 py-4 whitespace-nowrap text-sm text-foreground;\n  }\n\n  .status-badge {\n    @apply inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold;\n  }\n\n  .status-badge.completed {\n    @apply bg-success/20 text-success border border-success/30;\n  }\n\n  .status-badge.processing {\n    @apply bg-warning/20 text-warning border border-warning/30;\n  }\n\n  .status-badge.failed {\n    @apply bg-destructive/20 text-destructive border border-destructive/30;\n  }\n\n  .status-badge.pending {\n    @apply bg-muted-foreground/20 text-muted-foreground border border-muted-foreground/30;\n  }\n\n  .glass-card {\n    @apply bg-card/60 backdrop-blur-xl border border-border/50 rounded-xl shadow-xl;\n  }\n\n  .gradient-text {\n    @apply bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent;\n  }\n}\n","size_bytes":4809},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/data-dictionary.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Download } from \"lucide-react\";\nimport type { DataElement } from \"@shared/schema\";\n\nexport default function DataDictionary() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: dataElements = [], isLoading } = useQuery({\n    queryKey: [\"/api/data-elements\"],\n  });\n\n  const filteredElements = dataElements.filter((element: DataElement) =>\n    searchQuery === \"\" ||\n    element.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (element.description && element.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Data Dictionary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Data Dictionary</CardTitle>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n              <Input\n                placeholder=\"Search data elements...\"\n                className=\"pl-10 w-64\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download size={16} className=\"mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {filteredElements.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n            {searchQuery ? \"No data elements match your search.\" : \"No data elements found. Upload COBOL programs to populate the data dictionary.\"}\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"data-table\">\n              <thead>\n                <tr>\n                  <th>Element Name</th>\n                  <th>Picture</th>\n                  <th>Level</th>\n                  <th>Usage</th>\n                  <th>Description</th>\n                  <th>Used In</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                {filteredElements.map((element: DataElement) => (\n                  <tr key={element.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                    <td className=\"py-4 font-mono text-sm text-gray-900 dark:text-white\">\n                      {element.name}\n                    </td>\n                    <td className=\"py-4 font-mono text-sm text-gray-700 dark:text-gray-300\">\n                      {element.picture || '-'}\n                    </td>\n                    <td className=\"py-4 text-sm text-gray-700 dark:text-gray-300\">\n                      {element.level || '-'}\n                    </td>\n                    <td className=\"py-4 text-sm text-gray-700 dark:text-gray-300\">\n                      {element.usage || 'Display'}\n                    </td>\n                    <td className=\"py-4 text-sm text-gray-700 dark:text-gray-300 max-w-md\">\n                      <div className=\"truncate\" title={element.description || 'No description available'}>\n                        {element.description || 'No description available'}\n                      </div>\n                    </td>\n                    <td className=\"py-4 text-sm\">\n                      <div className=\"flex flex-wrap gap-1\">\n                        {element.usedInPrograms?.slice(0, 3).map((program) => (\n                          <Badge key={program} variant=\"secondary\" className=\"text-xs\">\n                            {program}\n                          </Badge>\n                        )) || (\n                          <span className=\"text-gray-500 dark:text-gray-400 text-xs\">\n                            No programs\n                          </span>\n                        )}\n                        {element.usedInPrograms && element.usedInPrograms.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{element.usedInPrograms.length - 3} more\n                          </Badge>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n        \n        {searchQuery && (\n          <div className=\"mt-4 text-sm text-gray-500 dark:text-gray-400\">\n            Showing {filteredElements.length} of {dataElements.length} data elements\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5326},"client/src/components/program-list.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronRight, Eye, Download } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Program } from \"@shared/schema\";\n\ninterface ProgramListProps {\n  programs: Program[];\n}\n\nexport default function ProgramList({ programs }: ProgramListProps) {\n  const [selectedProgram, setSelectedProgram] = useState<Program | null>(\n    programs.length > 0 ? programs[0] : null\n  );\n\n  const getStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'status-badge completed';\n      case 'processing':\n        return 'status-badge processing';\n      case 'failed':\n        return 'status-badge failed';\n      default:\n        return 'status-badge pending';\n    }\n  };\n\n  const getComplexityColor = (complexity: string) => {\n    switch (complexity?.toLowerCase()) {\n      case 'low':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'high':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const formatTimeAgo = (date: Date | string) => {\n    const now = new Date();\n    const past = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - past.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return 'Less than an hour ago';\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    if (diffInHours < 48) return '1 day ago';\n    return `${Math.floor(diffInHours / 24)} days ago`;\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n      {/* Program List */}\n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Analyzed Programs\n          </h2>\n          <Button variant=\"ghost\" size=\"sm\">\n            View All\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n          {programs.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n              No programs uploaded yet. Upload COBOL files to get started.\n            </div>\n          ) : (\n            programs.slice(0, 10).map((program) => (\n              <div\n                key={program.id}\n                className={`program-card ${\n                  selectedProgram?.id === program.id ? 'selected' : ''\n                }`}\n                onClick={() => setSelectedProgram(program)}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-medium text-gray-900 dark:text-white\">\n                      {program.name}\n                    </h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2\">\n                      {program.aiSummary || 'AI summary being generated...'}\n                    </p>\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {program.linesOfCode} lines\n                      </span>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Modified {formatTimeAgo(program.lastModified || program.uploadedAt)}\n                      </span>\n                      <span className={getStatusBadgeClass(program.status)}>\n                        {program.status}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"ml-4\">\n                    <ChevronRight className=\"text-gray-400\" size={16} />\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Program Detail View */}\n      <div>\n        {selectedProgram ? (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>{selectedProgram.name} Details</CardTitle>\n                <div className=\"flex space-x-2\">\n                  <Link href={`/program/${selectedProgram.id}`}>\n                    <Button size=\"sm\">\n                      <Eye size={14} className=\"mr-2\" />\n                      View Source\n                    </Button>\n                  </Link>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Download size={14} className=\"mr-2\" />\n                    Export Docs\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* AI Generated Summary */}\n              {selectedProgram.aiSummary && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2 flex items-center\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full mr-2\"></div>\n                    AI-Generated Summary\n                  </h3>\n                  <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                    <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                      {selectedProgram.aiSummary}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {/* Program Structure */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">\n                  Program Structure\n                </h3>\n                <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-4\">\n                  <div className=\"space-y-2\">\n                    {selectedProgram.structure?.divisions?.map((division) => (\n                      <div key={division.name}>\n                        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                          {division.name} DIVISION\n                        </div>\n                        <div className=\"ml-4 space-y-1\">\n                          {division.sections.map((section) => (\n                            <div key={section.name} className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              • {section.name}\n                              {section.paragraphs && section.paragraphs.length > 0 && (\n                                <span className=\"ml-2 text-xs text-gray-500\">\n                                  ({section.paragraphs.length} paragraphs)\n                                </span>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )) || (\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        Structure analysis pending...\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Quick Stats */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-3\">\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    Complexity Score\n                  </div>\n                  <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    <Badge className={getComplexityColor(selectedProgram.complexity || 'Unknown')}>\n                      {selectedProgram.complexity || 'Unknown'}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-3\">\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    Business Rules\n                  </div>\n                  <div className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    {selectedProgram.businessRules?.length || 0} identified\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center text-gray-500 dark:text-gray-400\">\n                Select a program to view details\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8833},"client/src/components/program-visualization.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ZoomIn, ZoomOut, Maximize, GitBranch } from \"lucide-react\";\n\nexport default function ProgramVisualization() {\n  const [selectedProgram, setSelectedProgram] = useState(\"all\");\n  const [visualizationType, setVisualizationType] = useState(\"dependencies\");\n\n  const { data: programs = [] } = useQuery({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const { data: relationships = [] } = useQuery({\n    queryKey: [`/api/programs/${selectedProgram}/relationships`],\n    enabled: selectedProgram !== \"all\",\n  });\n\n  const legendItems = [\n    { label: \"Entry Points\", color: \"bg-primary\", textColor: \"text-primary\" },\n    { label: \"COBOL Programs\", color: \"bg-blue-100 border-blue-300\", textColor: \"text-blue-800\" },\n    { label: \"Called Programs\", color: \"bg-green-100 border-green-300\", textColor: \"text-green-800\" },\n    { label: \"Data Files\", color: \"bg-orange-100 border-orange-300\", textColor: \"text-orange-800\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h2 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\n          Program Structure Visualization\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Interactive diagrams showing program relationships and data flow\n        </p>\n      </div>\n\n      {/* Visualization Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Select value={selectedProgram} onValueChange={setSelectedProgram}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Select program\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Programs</SelectItem>\n              {programs.map((program: any) => (\n                <SelectItem key={program.id} value={program.id.toString()}>\n                  {program.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Select value={visualizationType} onValueChange={setVisualizationType}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Select view type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"dependencies\">Program Dependencies</SelectItem>\n              <SelectItem value=\"dataflow\">Data Flow</SelectItem>\n              <SelectItem value=\"hierarchy\">Call Hierarchy</SelectItem>\n              <SelectItem value=\"files\">File Relationships</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <ZoomOut size={16} />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <ZoomIn size={16} />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Maximize size={16} />\n          </Button>\n        </div>\n      </div>\n\n      {/* Visualization Canvas */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div \n            className=\"w-full bg-gray-50 dark:bg-gray-900 rounded-lg flex items-center justify-center relative border-2 border-dashed border-gray-300 dark:border-gray-600\"\n            style={{ height: \"500px\" }}\n          >\n            {/* Sample visualization content - in a real implementation, this would be replaced with an interactive diagram */}\n            <div className=\"absolute top-4 left-4\">\n              <div className=\"bg-primary text-white px-3 py-2 rounded-lg text-sm font-medium shadow-lg\">\n                MAIN-JOB\n              </div>\n              <div className=\"w-px h-8 bg-gray-400 ml-6 mt-2\"></div>\n            </div>\n            \n            <div className=\"absolute top-20 left-8\">\n              <div className=\"bg-blue-100 border border-blue-300 text-blue-800 px-3 py-2 rounded-lg text-sm font-medium\">\n                {programs.length > 0 ? programs[0].name : 'PGMBILL1'}\n              </div>\n              <div className=\"flex mt-2\">\n                <div className=\"w-8 h-px bg-gray-400 mt-2\"></div>\n                <div className=\"bg-green-100 border border-green-300 text-green-800 px-3 py-2 rounded-lg text-sm font-medium\">\n                  {programs.length > 1 ? programs[1].name : 'PGMTAX01'}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"absolute top-32 right-8\">\n              <div className=\"bg-orange-100 border border-orange-300 text-orange-800 px-3 py-2 rounded-lg text-sm font-medium\">\n                TRANSACT.DAT\n              </div>\n            </div>\n\n            <div className=\"text-center text-gray-500 dark:text-gray-400\">\n              <GitBranch size={48} className=\"mx-auto mb-2\" />\n              <p className=\"font-medium\">Interactive Program Dependency Visualization</p>\n              <p className=\"text-sm\">\n                {programs.length === 0 \n                  ? \"Upload COBOL programs to see dependency visualization\"\n                  : \"Click and drag to explore relationships\"\n                }\n              </p>\n              {relationships.length > 0 && (\n                <p className=\"text-xs mt-2\">\n                  {relationships.length} relationships found\n                </p>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Legend</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {legendItems.map((item) => (\n              <div key={item.label} className=\"flex items-center space-x-2\">\n                <div className={`w-4 h-4 ${item.color} rounded border`}></div>\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                  {item.label}\n                </span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6403},"client/src/components/system-explanation.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  MessageSquare, \n  Users, \n  ArrowRight, \n  TrendingUp, \n  Settings,\n  Eye,\n  Download\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport mermaid from \"mermaid\";\n\ninterface SystemExplanationProps {\n  program: {\n    name: string;\n    systemExplanation?: {\n      plainEnglishSummary: string;\n      keyBusinessProcesses: string[];\n      dataFlow: string;\n      userImpact: string;\n      technicalComplexity: string;\n    } | null;\n    mermaidDiagram?: {\n      type: string;\n      title: string;\n      description: string;\n      mermaidCode: string;\n    } | null;\n  };\n}\n\nexport default function SystemExplanation({ program }: SystemExplanationProps) {\n  const mermaidRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    mermaid.initialize({\n      startOnLoad: true,\n      theme: 'default',\n      securityLevel: 'loose',\n    });\n  }, []);\n\n  useEffect(() => {\n    if (program.mermaidDiagram && mermaidRef.current) {\n      mermaidRef.current.innerHTML = program.mermaidDiagram.mermaidCode;\n      mermaid.init(undefined, mermaidRef.current);\n    }\n  }, [program.mermaidDiagram]);\n\n  if (!program.systemExplanation && !program.mermaidDiagram) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center text-gray-500 dark:text-gray-400\">\n            <MessageSquare size={48} className=\"mx-auto mb-2\" />\n            <p>System explanation and diagrams are being generated...</p>\n            <p className=\"text-sm mt-2\">This usually takes a few moments.</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Plain English Summary */}\n      {program.systemExplanation && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"text-primary\" size={20} />\n              What This System Does (Plain English)\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Main Summary */}\n            <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-6\">\n              <h3 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-3\">\n                System Overview\n              </h3>\n              <p className=\"text-blue-800 dark:text-blue-200 leading-relaxed\">\n                {program.systemExplanation.plainEnglishSummary}\n              </p>\n            </div>\n\n            {/* Key Business Processes */}\n            {program.systemExplanation.keyBusinessProcesses.length > 0 && (\n              <div>\n                <h3 className=\"font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2\">\n                  <Settings size={18} />\n                  Key Business Processes\n                </h3>\n                <div className=\"grid gap-3\">\n                  {program.systemExplanation.keyBusinessProcesses.map((process, index) => (\n                    <div key={index} className=\"flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-900 rounded-lg\">\n                      <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium\">\n                        {index + 1}\n                      </div>\n                      <p className=\"text-gray-700 dark:text-gray-300\">{process}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Data Flow */}\n            <div>\n              <h3 className=\"font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2\">\n                <ArrowRight size={18} />\n                How Data Moves Through the System\n              </h3>\n              <div className=\"bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n                <p className=\"text-green-800 dark:text-green-200\">\n                  {program.systemExplanation.dataFlow}\n                </p>\n              </div>\n            </div>\n\n            {/* User Impact */}\n            <div>\n              <h3 className=\"font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2\">\n                <Users size={18} />\n                Impact on Users and Customers\n              </h3>\n              <div className=\"bg-orange-50 dark:bg-orange-950 border border-orange-200 dark:border-orange-800 rounded-lg p-4\">\n                <p className=\"text-orange-800 dark:text-orange-200\">\n                  {program.systemExplanation.userImpact}\n                </p>\n              </div>\n            </div>\n\n            {/* Technical Complexity */}\n            <div>\n              <h3 className=\"font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2\">\n                <TrendingUp size={18} />\n                Technical Complexity Assessment\n              </h3>\n              <div className=\"bg-purple-50 dark:bg-purple-950 border border-purple-200 dark:border-purple-800 rounded-lg p-4\">\n                <p className=\"text-purple-800 dark:text-purple-200\">\n                  {program.systemExplanation.technicalComplexity}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Mermaid Diagram */}\n      {program.mermaidDiagram && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Eye className=\"text-primary\" size={20} />\n                  {program.mermaidDiagram.title}\n                </CardTitle>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                  {program.mermaidDiagram.description}\n                </p>\n              </div>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download size={16} className=\"mr-2\" />\n                Export Diagram\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 overflow-x-auto\">\n              <div ref={mermaidRef} className=\"mermaid min-h-[300px] flex items-center justify-center\">\n                {program.mermaidDiagram.mermaidCode}\n              </div>\n            </div>\n            <div className=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">\n              <Badge variant=\"outline\" className=\"mr-2\">\n                {program.mermaidDiagram.type}\n              </Badge>\n              Interactive diagram showing program flow and relationships\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6993},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-programs.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Program } from \"@shared/schema\";\n\nexport function usePrograms() {\n  return useQuery({\n    queryKey: [\"/api/programs\"],\n  });\n}\n\nexport function useProgram(id: string | number) {\n  return useQuery({\n    queryKey: [`/api/programs/${id}`],\n    enabled: !!id,\n  });\n}\n\nexport function useProgramDataElements(id: string | number) {\n  return useQuery({\n    queryKey: [`/api/programs/${id}/data-elements`],\n    enabled: !!id,\n  });\n}\n\nexport function useProgramRelationships(id: string | number) {\n  return useQuery({\n    queryKey: [`/api/programs/${id}/relationships`],\n    enabled: !!id,\n  });\n}\n\nexport function useSearchPrograms(query: string) {\n  return useQuery({\n    queryKey: [`/api/programs/search/${query}`],\n    enabled: !!query && query.length > 2,\n  });\n}\n\nexport function useDeleteProgram() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest('DELETE', `/api/programs/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/programs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/statistics'] });\n    },\n  });\n}\n","size_bytes":1336},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-upload.ts":{"content":"import { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useUpload() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (files: FileList) => {\n      const formData = new FormData();\n      Array.from(files).forEach((file) => {\n        formData.append('files', file);\n      });\n\n      const response = await apiRequest('POST', '/api/upload', formData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/programs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/upload-sessions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/statistics'] });\n    },\n  });\n}\n\nexport function useUploadSessions() {\n  return useQuery({\n    queryKey: [\"/api/upload-sessions\"],\n    refetchInterval: 5000, // Refresh every 5 seconds to get status updates\n  });\n}\n\nexport function useStatistics() {\n  return useQuery({\n    queryKey: [\"/api/statistics\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n}\n\nexport function useGlobalSearch(query: string) {\n  return useQuery({\n    queryKey: [`/api/search/${query}`],\n    enabled: !!query && query.length > 2,\n  });\n}\n","size_bytes":1266},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  let headers: Record<string, string> = {};\n  let body: string | FormData | undefined = undefined;\n\n  if (data) {\n    if (data instanceof FormData) {\n      // For FormData, don't set Content-Type - let browser set it with boundary\n      body = data;\n    } else {\n      headers[\"Content-Type\"] = \"application/json\";\n      body = JSON.stringify(data);\n    }\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1644},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/business-rules.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, BookOpen, Code, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport type { Program } from \"@shared/schema\";\n\nexport default function BusinessRules() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  const { data: programs = [], isLoading } = useQuery({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const filteredPrograms = (programs as Program[]).filter((program: Program) => {\n    const hasBusinessRules = program.businessRules && program.businessRules.length > 0;\n    const matchesSearch = program.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         program.filename.toLowerCase().includes(searchQuery.toLowerCase());\n    return hasBusinessRules && matchesSearch;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          <div className=\"grid gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Business Rules\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Extracted business logic and rules from COBOL programs\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search business rules by program name...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Business Rules */}\n      {filteredPrograms.length === 0 ? (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <BookOpen className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                No business rules available\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                Business rules will appear here once COBOL programs are analyzed with AI processing\n              </p>\n              <Link href=\"/\">\n                <Button>Go to Dashboard</Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {filteredPrograms.map((program: Program) => (\n            <Card key={program.id}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-xl mb-2\">{program.name}</CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      From: {program.filename}\n                    </p>\n                  </div>\n                  <Badge variant=\"outline\">\n                    {program.businessRules?.length || 0} rules\n                  </Badge>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-4\">\n                  {program.businessRules?.map((rule: any, index: number) => (\n                    <div key={index} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <AlertCircle className=\"h-5 w-5 text-orange-500 mt-0.5\" />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n                            {rule.rule || `Business Rule ${index + 1}`}\n                          </h4>\n                          \n                          {rule.condition && (\n                            <div className=\"mb-2\">\n                              <span className=\"text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide\">\n                                Condition\n                              </span>\n                              <p className=\"text-sm text-gray-700 dark:text-gray-300 mt-1\">\n                                {rule.condition}\n                              </p>\n                            </div>\n                          )}\n                          \n                          {rule.action && (\n                            <div className=\"mb-2\">\n                              <span className=\"text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide\">\n                                Action\n                              </span>\n                              <p className=\"text-sm text-gray-700 dark:text-gray-300 mt-1\">\n                                {rule.action}\n                              </p>\n                            </div>\n                          )}\n                          \n                          {rule.codeLocation && (\n                            <div className=\"mb-2\">\n                              <span className=\"text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide\">\n                                Code Location\n                              </span>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                <Code className=\"h-4 w-4 text-gray-400\" />\n                                <code className=\"text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded\">\n                                  {rule.codeLocation}\n                                </code>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  <div className=\"flex justify-end pt-4 border-t border-gray-200 dark:border-gray-700\">\n                    <Link href={`/program/${program.id}`}>\n                      <Button variant=\"outline\">View Full Program</Button>\n                    </Link>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6846},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  FileCode, \n  CheckCircle, \n  Database, \n  AlertTriangle, \n  Upload,\n  TrendingUp,\n  Activity,\n  Zap,\n  Users,\n  Clock\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface StatCardProps {\n  title: string;\n  value: number;\n  icon: any;\n  trend?: string;\n  color: string;\n  description?: string;\n}\n\nfunction StatCard({ title, value, icon: Icon, trend, color, description }: StatCardProps) {\n  return (\n    <Card className=\"glass-card hover:border-primary/30 transition-all duration-300\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-2\">\n            <p className=\"text-muted-foreground text-sm font-medium\">{title}</p>\n            <div className=\"flex items-baseline space-x-2\">\n              <span className={`text-3xl font-bold ${color}`}>{value}</span>\n              {trend && (\n                <Badge className=\"bg-success/20 text-success border-success/30 text-xs\">\n                  {trend}\n                </Badge>\n              )}\n            </div>\n            {description && (\n              <p className=\"text-xs text-muted-foreground\">{description}</p>\n            )}\n          </div>\n          <div className={`p-3 rounded-xl bg-gradient-to-br ${color === 'text-primary' ? 'from-primary/20 to-primary/10' : color === 'text-success' ? 'from-success/20 to-success/10' : color === 'text-warning' ? 'from-warning/20 to-warning/10' : 'from-destructive/20 to-destructive/10'}`}>\n            <Icon size={24} className={color} />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction QuickAction({ icon: Icon, title, description, href, color }: {\n  icon: any;\n  title: string;\n  description: string;\n  href: string;\n  color: string;\n}) {\n  return (\n    <Link href={href}>\n      <Card className=\"glass-card hover:border-primary/30 transition-all duration-300 cursor-pointer group\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className={`p-3 rounded-xl bg-gradient-to-br ${color} group-hover:scale-110 transition-transform duration-200`}>\n              <Icon size={20} className=\"text-white\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-white\">{title}</h3>\n              <p className=\"text-sm text-muted-foreground\">{description}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n\nfunction ActivityItem({ type, title, time, status }: {\n  type: 'upload' | 'analysis' | 'documentation';\n  title: string;\n  time: string;\n  status: 'success' | 'processing' | 'failed';\n}) {\n  const icons = {\n    upload: Upload,\n    analysis: Activity,\n    documentation: FileCode\n  };\n  \n  const statusColors = {\n    success: 'text-success',\n    processing: 'text-warning',\n    failed: 'text-destructive'\n  };\n  \n  const Icon = icons[type];\n  \n  return (\n    <div className=\"flex items-center space-x-4 p-4 rounded-lg hover:bg-card/50 transition-colors\">\n      <div className=\"p-2 rounded-lg bg-primary/20\">\n        <Icon size={16} className=\"text-primary\" />\n      </div>\n      <div className=\"flex-1 min-w-0\">\n        <p className=\"text-sm font-medium text-white truncate\">{title}</p>\n        <p className=\"text-xs text-muted-foreground\">{time}</p>\n      </div>\n      <Badge className={`${statusColors[status]}`} variant=\"outline\">\n        {status}\n      </Badge>\n    </div>\n  );\n}\n\nexport default function Dashboard() {\n  const { data: stats = {} } = useQuery({\n    queryKey: [\"/api/statistics\"],\n  });\n\n  const { data: programs = [] } = useQuery({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const { data: uploadSessions = [] } = useQuery({\n    queryKey: [\"/api/upload-sessions\"],\n  });\n\n  // Type-safe stats with proper defaults\n  const totalPrograms = (stats as any)?.totalPrograms || 0;\n  const documentedPrograms = (stats as any)?.documentedPrograms || 0;\n  const dataElements = (stats as any)?.dataElements || 0;\n  const pendingPrograms = totalPrograms - documentedPrograms;\n\n  const recentActivities = [\n    {\n      type: 'upload' as const,\n      title: 'Billing System v2.1 uploaded',\n      time: '2 hours ago',\n      status: 'success' as const\n    },\n    {\n      type: 'analysis' as const,\n      title: 'Customer Master analysis',\n      time: '4 hours ago',\n      status: 'processing' as const\n    },\n    {\n      type: 'documentation' as const,\n      title: 'Payroll Legacy documented',\n      time: '6 hours ago',\n      status: 'success' as const\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background p-8 space-y-8\">\n      {/* Header */}\n      <div className=\"space-y-2\">\n        <h1 className=\"text-4xl font-bold gradient-text\">\n          Welcome to COBOL ClarityEngine\n        </h1>\n        <p className=\"text-muted-foreground text-lg\">\n          Transform your legacy systems into clear, understandable documentation\n        </p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Total Programs\"\n          value={totalPrograms}\n          icon={FileCode}\n          color=\"text-primary\"\n          description=\"COBOL programs analyzed\"\n          data-testid=\"stat-total-programs\"\n        />\n        <StatCard\n          title=\"Documented\"\n          value={documentedPrograms}\n          icon={CheckCircle}\n          color=\"text-success\"\n          trend={documentedPrograms > 0 ? \"+12%\" : undefined}\n          description=\"Fully processed programs\"\n          data-testid=\"stat-documented-programs\"\n        />\n        <StatCard\n          title=\"Data Elements\"\n          value={dataElements}\n          icon={Database}\n          color=\"text-warning\"\n          description=\"Variables discovered\"\n          data-testid=\"stat-data-elements\"\n        />\n        <StatCard\n          title=\"Pending Analysis\"\n          value={pendingPrograms}\n          icon={Clock}\n          color=\"text-muted-foreground\"\n          description=\"Awaiting processing\"\n          data-testid=\"stat-pending-analysis\"\n        />\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Quick Actions */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white mb-4\">Quick Actions</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <QuickAction\n                icon={Upload}\n                title=\"Upload COBOL Files\"\n                description=\"Add new programs to analyze\"\n                href=\"/upload\"\n                color=\"from-primary to-accent\"\n              />\n              <QuickAction\n                icon={FileCode}\n                title=\"View Programs\"\n                description=\"Browse analyzed programs\"\n                href=\"/programs\"\n                color=\"from-success to-success/80\"\n              />\n              <QuickAction\n                icon={Database}\n                title=\"Data Dictionary\"\n                description=\"Explore variables and structures\"\n                href=\"/data-dictionary\"\n                color=\"from-warning to-warning/80\"\n              />\n              <QuickAction\n                icon={TrendingUp}\n                title=\"Visualizations\"\n                description=\"View system diagrams\"\n                href=\"/visualizations\"\n                color=\"from-accent to-primary\"\n              />\n            </div>\n          </div>\n\n          {/* Progress Overview */}\n          {totalPrograms > 0 && (\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Activity className=\"text-primary\" size={20} />\n                  <span>Documentation Progress</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Completed Programs</span>\n                    <span className=\"text-white\">{documentedPrograms} of {totalPrograms}</span>\n                  </div>\n                  <Progress \n                    value={(documentedPrograms / totalPrograms) * 100} \n                    className=\"h-2\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 pt-2\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-success\">{Math.round((documentedPrograms / totalPrograms) * 100)}%</div>\n                    <div className=\"text-xs text-muted-foreground\">Complete</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-warning\">{pendingPrograms}</div>\n                    <div className=\"text-xs text-muted-foreground\">Remaining</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-bold text-white\">Recent Activity</h2>\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-1\">\n                {recentActivities.map((activity, index) => (\n                  <ActivityItem key={index} {...activity} />\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Getting Started */}\n          {totalPrograms === 0 && (\n            <Card className=\"glass-card border-primary/30\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Zap className=\"text-primary\" size={20} />\n                  <span>Getting Started</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-muted-foreground text-sm\">\n                  Start documenting your COBOL systems in three simple steps:\n                </p>\n                <ol className=\"space-y-3 text-sm\">\n                  <li className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-xs font-bold text-[hsl(var(--primary-foreground))]\">\n                      1\n                    </div>\n                    <span className=\"text-white\">Upload your COBOL files</span>\n                  </li>\n                  <li className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-xs font-bold text-[hsl(var(--primary-foreground))]\">\n                      2\n                    </div>\n                    <span className=\"text-white\">AI analyzes the code structure</span>\n                  </li>\n                  <li className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-xs font-bold text-[hsl(var(--primary-foreground))]\">\n                      3\n                    </div>\n                    <span className=\"text-white\">Get clear documentation & diagrams</span>\n                  </li>\n                </ol>\n                <Link href=\"/upload\">\n                  <Button className=\"w-full mt-4\" data-testid=\"get-started-upload\">\n                    Upload Your First Program\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12063},"client/src/pages/data-dictionary.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Database, Code2, Info } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport type { DataElement } from \"@shared/schema\";\n\nexport default function DataDictionary() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  const { data: dataElements = [], isLoading } = useQuery({\n    queryKey: [\"/api/data-elements\"],\n  });\n\n  const { data: programs = [] } = useQuery({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const getDataTypeColor = (picture: string) => {\n    if (!picture) return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    \n    if (picture.includes('9')) {\n      return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'; // Numeric\n    } else if (picture.includes('X')) {\n      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300'; // Alphanumeric\n    } else if (picture.includes('S')) {\n      return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300'; // Signed\n    }\n    return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300'; // Other\n  };\n\n  const getUsageColor = (usage: string) => {\n    switch (usage?.toUpperCase()) {\n      case 'COMP':\n      case 'COMPUTATIONAL':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'COMP-3':\n      case 'PACKED-DECIMAL':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'DISPLAY':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const filteredElements = (dataElements as DataElement[]).filter((element: DataElement) =>\n    element.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    element.picture?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    element.usage?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const groupedElements = filteredElements.reduce((acc, element) => {\n    const programId = element.programId;\n    if (!acc[programId]) {\n      acc[programId] = [];\n    }\n    acc[programId].push(element);\n    return acc;\n  }, {} as Record<number, DataElement[]>);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          <div className=\"grid gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Data Dictionary\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Comprehensive view of all data elements across COBOL programs\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search data elements by name, picture, or usage...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Data Elements */}\n      {filteredElements.length === 0 ? (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <Database className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                No data elements available\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                Data elements will appear here once COBOL programs are parsed and analyzed\n              </p>\n              <Link href=\"/upload\">\n                <Button>Upload COBOL Files</Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {Object.entries(groupedElements).map(([programIdStr, elements]) => {\n            const programId = parseInt(programIdStr);\n            const program = (programs as any[]).find(p => p.id === programId);\n            \n            return (\n              <Card key={programId}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-xl mb-2\">\n                        {program?.name || `Program ${programId}`}\n                      </CardTitle>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        From: {program?.filename || 'Unknown file'}\n                      </p>\n                    </div>\n                    <Badge variant=\"outline\">\n                      {elements.length} elements\n                    </Badge>\n                  </div>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {elements.map((element: DataElement) => (\n                      <div key={element.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900 dark:text-white mb-1\">\n                              {element.name}\n                            </h4>\n                            <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\n                              <span>Level {element.level}</span>\n                              {element.lineNumber && (\n                                <>\n                                  <span>•</span>\n                                  <span>Line {element.lineNumber}</span>\n                                </>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            {element.picture && (\n                              <Badge className={getDataTypeColor(element.picture)}>\n                                PIC {element.picture}\n                              </Badge>\n                            )}\n                            {element.usage && (\n                              <Badge className={getUsageColor(element.usage)}>\n                                {element.usage}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {element.parentElement && (\n                          <div className=\"mb-2\">\n                            <div className=\"flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400\">\n                              <Code2 className=\"h-4 w-4\" />\n                              <span>Child of: <code className=\"bg-gray-100 dark:bg-gray-800 px-1 py-0.5 rounded text-xs\">{element.parentElement}</code></span>\n                            </div>\n                          </div>\n                        )}\n                        \n                        {element.description && (\n                          <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded p-3\">\n                            <div className=\"flex items-start space-x-2\">\n                              <Info className=\"h-4 w-4 text-blue-600 dark:text-blue-400 mt-0.5\" />\n                              <div>\n                                <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                                  {element.description}\n                                </p>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"flex justify-end pt-4 border-t border-gray-200 dark:border-gray-700 mt-4\">\n                    <Link href={`/program/${programId}`}>\n                      <Button variant=\"outline\">View Program</Button>\n                    </Link>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9007},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/program-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  ArrowLeft, \n  Eye, \n  Download, \n  Bot, \n  ChevronDown, \n  ChevronRight,\n  FileCode,\n  Database,\n  GitBranch\n} from \"lucide-react\";\nimport SystemExplanation from \"@/components/system-explanation\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\n\nexport default function ProgramDetail() {\n  const { id } = useParams();\n  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set([\"identification\", \"data\", \"procedure\"]));\n\n  const { data: program, isLoading } = useQuery({\n    queryKey: [`/api/programs/${id}`],\n    enabled: !!id,\n  });\n\n  const { data: dataElements } = useQuery({\n    queryKey: [`/api/programs/${id}/data-elements`],\n    enabled: !!id,\n  });\n\n  const { data: relationships } = useQuery({\n    queryKey: [`/api/programs/${id}/relationships`],\n    enabled: !!id,\n  });\n\n  const toggleSection = (section: string) => {\n    const newExpanded = new Set(expandedSections);\n    if (newExpanded.has(section)) {\n      newExpanded.delete(section);\n    } else {\n      newExpanded.add(section);\n    }\n    setExpandedSections(newExpanded);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n          <div className=\"h-64 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!program) {\n    return (\n      <div className=\"p-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Program Not Found</h2>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n                The requested program could not be found.\n              </p>\n              <Link href=\"/\">\n                <Button className=\"mt-4\">\n                  <ArrowLeft size={16} className=\"mr-2\" />\n                  Back to Dashboard\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getComplexityColor = (complexity: string) => {\n    switch (complexity?.toLowerCase()) {\n      case 'low':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'high':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  return (\n    <div className=\"p-8 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft size={16} className=\"mr-2\" />\n              Back\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {program.name}\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              {program.filename} • {program.linesOfCode} lines\n            </p>\n          </div>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\">\n            <Eye size={16} className=\"mr-2\" />\n            View Source\n          </Button>\n          <Button variant=\"outline\">\n            <Download size={16} className=\"mr-2\" />\n            Export Docs\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* AI Generated Summary */}\n          {program.aiSummary && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Bot className=\"text-primary\" size={20} />\n                  AI-Generated Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                  <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    {program.aiSummary}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Program Structure */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Program Structure</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-gray-50 dark:bg-gray-900 rounded-lg p-4\">\n                <div className=\"space-y-2\">\n                  {program.structure?.divisions?.map((division) => (\n                    <div key={division.name}>\n                      <div \n                        className=\"flex items-center space-x-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800 p-2 rounded\"\n                        onClick={() => toggleSection(division.name.toLowerCase())}\n                      >\n                        {expandedSections.has(division.name.toLowerCase()) ? (\n                          <ChevronDown className=\"text-gray-400\" size={16} />\n                        ) : (\n                          <ChevronRight className=\"text-gray-400\" size={16} />\n                        )}\n                        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                          {division.name} DIVISION\n                        </span>\n                      </div>\n                      {expandedSections.has(division.name.toLowerCase()) && (\n                        <div className=\"ml-6 space-y-1\">\n                          {division.sections.map((section) => (\n                            <div key={section.name} className=\"ml-4\">\n                              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                • {section.name} SECTION\n                                {section.paragraphs && section.paragraphs.length > 0 && (\n                                  <span className=\"ml-2 text-xs text-gray-500\">\n                                    ({section.paragraphs.length} paragraphs)\n                                  </span>\n                                )}\n                              </div>\n                              {section.paragraphs && section.paragraphs.length > 0 && (\n                                <div className=\"ml-4 space-y-1\">\n                                  {section.paragraphs.slice(0, 5).map((paragraph, pIndex) => (\n                                    <div key={`${section.name}-paragraph-${pIndex}-${paragraph.slice(0, 10)}`} className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                      • {paragraph}\n                                    </div>\n                                  ))}\n                                  {section.paragraphs.length > 5 && (\n                                    <div className=\"text-xs text-gray-500\">\n                                      ... and {section.paragraphs.length - 5} more\n                                    </div>\n                                  )}\n                                </div>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Explanation & Diagrams */}\n          <SystemExplanation program={program} />\n\n          {/* Business Rules */}\n          {program.businessRules && program.businessRules.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Business Rules</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {program.businessRules.map((rule, index) => (\n                    <div key={`rule-${index}-${rule.rule?.slice(0, 20) || index}`} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n                        {rule.rule}\n                      </h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div>\n                          <span className=\"font-medium text-gray-700 dark:text-gray-300\">Condition:</span>\n                          <span className=\"ml-2 text-gray-600 dark:text-gray-400\">{rule.condition}</span>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-700 dark:text-gray-300\">Action:</span>\n                          <span className=\"ml-2 text-gray-600 dark:text-gray-400\">{rule.action}</span>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-700 dark:text-gray-300\">Location:</span>\n                          <span className=\"ml-2 text-gray-600 dark:text-gray-400\">{rule.codeLocation}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Quick Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Status</span>\n                <Badge className={`status-badge ${program.status}`}>\n                  {program.status}\n                </Badge>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Complexity</span>\n                <Badge className={getComplexityColor(program.complexity || 'Unknown')}>\n                  {program.complexity || 'Unknown'}\n                </Badge>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Lines of Code</span>\n                <span className=\"text-sm font-medium\">{program.linesOfCode}</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Business Rules</span>\n                <span className=\"text-sm font-medium\">\n                  {program.businessRules?.length || 0} identified\n                </span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Data Elements</span>\n                <span className=\"text-sm font-medium\">\n                  {dataElements?.length || 0}\n                </span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">Last Modified</span>\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {program.lastModified \n                    ? new Date(program.lastModified).toLocaleDateString()\n                    : 'Unknown'\n                  }\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Related Programs */}\n          {relationships && relationships.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <GitBranch size={16} />\n                  Related Programs\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {relationships.slice(0, 5).map((rel) => (\n                    <div key={rel.id} className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-900 dark:text-white\">\n                        Program #{rel.toProgramId}\n                      </span>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {rel.relationshipType}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                <FileCode size={16} className=\"mr-2\" />\n                View Source Code\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                <Database size={16} className=\"mr-2\" />\n                View Data Elements\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n                <GitBranch size={16} className=\"mr-2\" />\n                Dependency Graph\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14209},"client/src/pages/programs.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, FileCode, Calendar, Activity } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Program } from \"@shared/schema\";\n\nexport default function Programs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: programs = [], isLoading } = useQuery({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const enhancedAnalysisMutation = useMutation({\n    mutationFn: async ({ programId, preferences }: { programId: number; preferences?: any }) => {\n      const response = await fetch(`/api/programs/${programId}/enhanced-analysis`, {\n        method: \"POST\",\n        body: JSON.stringify(preferences || {}),\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Analysis failed: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Enhanced Analysis Complete\",\n        description: `AI analysis has been enhanced for the selected program with quality score: ${data.qualityEvaluation?.score || 'N/A'}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/programs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/programs\", variables.programId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Enhanced Analysis Failed\",\n        description: error.message || \"Failed to perform enhanced analysis\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'failed':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getComplexityColor = (complexity: string) => {\n    switch (complexity?.toLowerCase()) {\n      case 'low':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'high':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const filteredPrograms = (programs as Program[]).filter((program: Program) =>\n    program.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    program.filename.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          <div className=\"grid gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          COBOL Programs\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          View and manage all uploaded COBOL programs and their documentation status\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search programs by name or filename...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Programs Grid */}\n      {filteredPrograms.length === 0 ? (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <FileCode className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                {searchQuery ? 'No programs found' : 'No programs uploaded yet'}\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                {searchQuery \n                  ? 'Try adjusting your search terms' \n                  : 'Upload COBOL files to start generating documentation'\n                }\n              </p>\n              {!searchQuery && (\n                <Link href=\"/upload\">\n                  <Button>Upload COBOL Files</Button>\n                </Link>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6\">\n          {filteredPrograms.map((program: Program) => (\n            <Card key={program.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-xl mb-2\">{program.name}</CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      File: {program.filename}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={getStatusColor(program.status)}>\n                      {program.status}\n                    </Badge>\n                    {program.complexity && (\n                      <Badge variant=\"outline\" className={getComplexityColor(program.complexity)}>\n                        {program.complexity} complexity\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Program Summary */}\n                  {program.aiSummary ? (\n                    <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-2\">\n                        AI Summary\n                      </h4>\n                      <p className=\"text-blue-800 dark:text-blue-200 text-sm\">\n                        {program.aiSummary}\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                      <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                        AI analysis pending. Documentation will be available once processing is complete.\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Program Stats */}\n                  <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <FileCode className=\"h-4 w-4\" />\n                        <span>{program.linesOfCode} lines</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>Uploaded {formatDate(program.uploadedAt)}</span>\n                      </div>\n                      {program.lastModified && (\n                        <div className=\"flex items-center space-x-1\">\n                          <Activity className=\"h-4 w-4\" />\n                          <span>Modified {formatDate(program.lastModified)}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex justify-end space-x-2 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => enhancedAnalysisMutation.mutate({ \n                        programId: program.id,\n                        preferences: {\n                          detailLevel: 'high',\n                          audience: 'technical',\n                          diagramType: 'flowchart'\n                        }\n                      })}\n                      disabled={enhancedAnalysisMutation.isPending}\n                    >\n                      {enhancedAnalysisMutation.isPending ? 'Enhancing...' : 'Enhance Analysis'}\n                    </Button>\n                    <Link href={`/program/${program.id}`}>\n                      <Button variant=\"outline\">View Details</Button>\n                    </Link>\n                    <Link href={`/program/${program.id}`}>\n                      <Button>Open Documentation</Button>\n                    </Link>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10116},"client/src/pages/upload.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport FileUpload from \"@/components/ui/file-upload\";\nimport { Upload as UploadIcon, GitBranch } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useUploadSessions } from \"@/hooks/use-upload\";\n\nexport default function Upload() {\n  const { data: uploadSessions = [] } = useUploadSessions();\n  const [repositoryUrl, setRepositoryUrl] = useState(\"\");\n  const [branch, setBranch] = useState(\"main\");\n  const [analysisOptions, setAnalysisOptions] = useState({\n    generateSummaries: true,\n    createDataDictionary: true,\n    extractBusinessRules: true,\n    generateFlowDiagrams: false,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (files: FileList) => {\n      const formData = new FormData();\n      Array.from(files).forEach((file) => {\n        formData.append('files', file);\n      });\n\n      const response = await apiRequest('POST', '/api/upload', formData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Upload Successful\",\n        description: `${data.results.length} files uploaded and are being processed.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/programs'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/upload-sessions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/statistics'] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Upload Failed\",\n        description: (error as Error).message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (files: FileList) => {\n    if (files.length > 0) {\n      uploadMutation.mutate(files);\n    }\n  };\n\n  const handleRepositoryConnect = async () => {\n    if (!repositoryUrl.trim()) {\n      toast({\n        title: \"Repository URL Required\",\n        description: \"Please enter a valid repository URL.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Repository Connection\",\n      description: \"Repository connection feature coming soon.\",\n    });\n  };\n\n  const getStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'status-badge completed';\n      case 'processing':\n        return 'status-badge processing';\n      case 'failed':\n        return 'status-badge failed';\n      default:\n        return 'status-badge pending';\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          Upload COBOL Source Code\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Upload your COBOL programs, copybooks, and JCL files for analysis\n        </p>\n      </div>\n\n      {/* File Upload Area */}\n      <Card>\n        <CardContent className=\"p-12\">\n          <FileUpload\n            onFilesSelected={handleFileUpload}\n            isUploading={uploadMutation.isPending}\n            acceptedTypes=\".cbl,.cob,.cpy,.jcl\"\n            maxSize={100 * 1024 * 1024} // 100MB\n          />\n        </CardContent>\n      </Card>\n\n      {/* Upload Options */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <GitBranch size={20} />\n              Repository Connection\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n              Connect to your source code repository for automatic sync\n            </p>\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"repo-url\">Repository URL</Label>\n                <Input\n                  id=\"repo-url\"\n                  placeholder=\"https://github.com/company/cobol-legacy\"\n                  value={repositoryUrl}\n                  onChange={(e) => setRepositoryUrl(e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"branch\">Branch</Label>\n                <Input\n                  id=\"branch\"\n                  placeholder=\"main\"\n                  value={branch}\n                  onChange={(e) => setBranch(e.target.value)}\n                />\n              </div>\n              <Button \n                onClick={handleRepositoryConnect}\n                variant=\"outline\" \n                className=\"w-full\"\n              >\n                Connect Repository\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Analysis Options</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n              Configure how your code will be analyzed\n            </p>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"summaries\"\n                  checked={analysisOptions.generateSummaries}\n                  onCheckedChange={(checked) =>\n                    setAnalysisOptions(prev => ({ ...prev, generateSummaries: !!checked }))\n                  }\n                />\n                <Label htmlFor=\"summaries\" className=\"text-sm\">\n                  Generate AI summaries\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"dictionary\"\n                  checked={analysisOptions.createDataDictionary}\n                  onCheckedChange={(checked) =>\n                    setAnalysisOptions(prev => ({ ...prev, createDataDictionary: !!checked }))\n                  }\n                />\n                <Label htmlFor=\"dictionary\" className=\"text-sm\">\n                  Create data dictionary\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"rules\"\n                  checked={analysisOptions.extractBusinessRules}\n                  onCheckedChange={(checked) =>\n                    setAnalysisOptions(prev => ({ ...prev, extractBusinessRules: !!checked }))\n                  }\n                />\n                <Label htmlFor=\"rules\" className=\"text-sm\">\n                  Extract business rules\n                </Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"diagrams\"\n                  checked={analysisOptions.generateFlowDiagrams}\n                  onCheckedChange={(checked) =>\n                    setAnalysisOptions(prev => ({ ...prev, generateFlowDiagrams: !!checked }))\n                  }\n                />\n                <Label htmlFor=\"diagrams\" className=\"text-sm\">\n                  Generate flow diagrams\n                </Label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Uploads */}\n      {uploadSessions.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Uploads</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"data-table\">\n                <thead>\n                  <tr>\n                    <th>File Name</th>\n                    <th>Size</th>\n                    <th>Status</th>\n                    <th>Uploaded</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                  {uploadSessions.slice(0, 10).map((session) => (\n                    <tr key={session.id}>\n                      <td className=\"data-table td font-mono\">{session.filename}</td>\n                      <td className=\"data-table td text-gray-500 dark:text-gray-400\">\n                        {(session.size / 1024).toFixed(1)} KB\n                      </td>\n                      <td className=\"data-table td\">\n                        <span className={getStatusBadgeClass(session.status)}>\n                          {session.status}\n                        </span>\n                      </td>\n                      <td className=\"data-table td text-gray-500 dark:text-gray-400\">\n                        {new Date(session.uploadedAt).toLocaleString()}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9165},"client/src/pages/visualizations.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, GitBranch, Eye, Download } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport type { Program } from \"@shared/schema\";\n\nexport default function Visualizations() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  const { data: programs = [], isLoading } = useQuery({\n    queryKey: [\"/api/programs\"],\n  });\n\n  const filteredPrograms = (programs as Program[]).filter((program: Program) => {\n    const hasDiagram = program.mermaidDiagram;\n    const matchesSearch = program.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         program.filename.toLowerCase().includes(searchQuery.toLowerCase());\n    return hasDiagram && matchesSearch;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          <div className=\"grid gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Program Visualizations\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Mermaid diagrams and flowcharts generated from COBOL programs\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Search visualizations by program name...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      {/* Visualizations */}\n      {filteredPrograms.length === 0 ? (\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center py-8\">\n              <GitBranch className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                No visualizations available\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                Mermaid diagrams will appear here once COBOL programs are analyzed with AI processing\n              </p>\n              <Link href=\"/\">\n                <Button>Go to Dashboard</Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {filteredPrograms.map((program: Program) => (\n            <Card key={program.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg mb-2\">{program.name}</CardTitle>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {program.filename}\n                    </p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300\">\n                    {program.mermaidDiagram?.type || 'Diagram'}\n                  </Badge>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-4\">\n                  {program.mermaidDiagram && (\n                    <div className=\"bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n                        {program.mermaidDiagram.title}\n                      </h4>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n                        {program.mermaidDiagram.description}\n                      </p>\n                      \n                      {/* Mermaid code preview */}\n                      <div className=\"bg-gray-100 dark:bg-gray-900 rounded p-3\">\n                        <code className=\"text-xs text-gray-700 dark:text-gray-300 font-mono\">\n                          {program.mermaidDiagram.mermaidCode.split('\\n').slice(0, 3).join('\\n')}\n                          {program.mermaidDiagram.mermaidCode.split('\\n').length > 3 && '\\n...'}\n                        </code>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Program Info */}\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    <div className=\"flex justify-between\">\n                      <span>Lines of Code:</span>\n                      <span>{program.linesOfCode}</span>\n                    </div>\n                    {program.complexity && (\n                      <div className=\"flex justify-between\">\n                        <span>Complexity:</span>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {program.complexity}\n                        </Badge>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex justify-between space-x-2 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                    <Link href={`/program/${program.id}`}>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        View\n                      </Button>\n                    </Link>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Download className=\"h-4 w-4 mr-1\" />\n                      Export\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6436},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Bell, Settings, HelpCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Statistics } from \"@shared/schema\";\n\nexport default function Header() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: stats } = useQuery<Statistics>({\n    queryKey: [\"/api/statistics\"],\n    refetchInterval: 30000,\n  });\n\n  const handleSearch = (query: string) => {\n    if (query.trim()) {\n      // Implement global search functionality\n      console.log(\"Searching for:\", query);\n    }\n  };\n\n  return (\n    <header className=\"bg-card/50 backdrop-blur-xl border-b border-border/50 sticky top-0 z-50\">\n      <div className=\"flex items-center justify-between px-8 py-4\">\n        {/* Quick Stats */}\n        <div className=\"flex items-center space-x-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-white\">{stats?.totalPrograms || 0}</div>\n              <div className=\"text-xs text-muted-foreground\">Programs</div>\n            </div>\n            <div className=\"w-px h-8 bg-border\"></div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-primary\">{stats?.documentedPrograms || 0}</div>\n              <div className=\"text-xs text-muted-foreground\">Documented</div>\n            </div>\n            <div className=\"w-px h-8 bg-border\"></div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-warning\">\n                {(stats?.totalPrograms || 0) - (stats?.documentedPrograms || 0)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Pending</div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Global Search */}\n        <div className=\"flex-1 max-w-2xl mx-8\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n              <Search className=\"text-muted-foreground\" size={18} />\n            </div>\n            <Input\n              type=\"text\"\n              placeholder=\"Search programs, variables, documentation...\"\n              className=\"pl-12 h-12 bg-input/50 border-border/50 rounded-xl text-white placeholder:text-muted-foreground focus:bg-input focus:border-primary/50\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  handleSearch(searchQuery);\n                }\n              }}\n              data-testid=\"global-search\"\n            />\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            className=\"relative hover:bg-[hsl(var(--sidebar-hover))] text-white/70 hover:text-white\"\n            data-testid=\"notifications-button\"\n          >\n            <Bell size={20} />\n            <Badge \n              className=\"absolute -top-1 -right-1 w-5 h-5 p-0 bg-primary text-[hsl(var(--primary-foreground))] text-xs\"\n            >\n              3\n            </Badge>\n          </Button>\n          \n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"hover:bg-[hsl(var(--sidebar-hover))] text-white/70 hover:text-white\"\n            data-testid=\"help-button\"\n          >\n            <HelpCircle size={20} />\n          </Button>\n          \n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            className=\"hover:bg-[hsl(var(--sidebar-hover))] text-white/70 hover:text-white\"\n            data-testid=\"settings-button\"\n          >\n            <Settings size={20} />\n          </Button>\n          \n          <div className=\"w-px h-8 bg-border\"></div>\n          \n          <Avatar className=\"w-10 h-10\">\n            <AvatarFallback className=\"bg-primary text-[hsl(var(--primary-foreground))] font-semibold\">\n              JD\n            </AvatarFallback>\n          </Avatar>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4405},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  Upload, \n  FileCode, \n  Database, \n  GitBranch, \n  Layers,\n  Code2,\n  Activity,\n  Zap\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Statistics } from \"@shared/schema\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  const { data: stats } = useQuery<Statistics>({\n    queryKey: [\"/api/statistics\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const navItems = [\n    {\n      href: \"/\",\n      icon: LayoutDashboard,\n      label: \"Dashboard\",\n      active: location === \"/\",\n    },\n    {\n      href: \"/repositories\",\n      icon: GitBranch,\n      label: \"Repositories\",\n      badge: stats?.repositories || 0,\n      active: location === \"/repositories\",\n    },\n    {\n      href: \"/upload\",\n      icon: Upload,\n      label: \"Upload COBOL\",\n      active: location === \"/upload\",\n    },\n    {\n      href: \"/programs\",\n      icon: FileCode,\n      label: \"Programs\",\n      badge: stats?.totalPrograms || 0,\n      active: location.startsWith(\"/program\"),\n    },\n    {\n      href: \"/data-dictionary\",\n      icon: Database,\n      label: \"Data Dictionary\",\n      active: location === \"/data-dictionary\",\n    },\n    {\n      href: \"/visualizations\",\n      icon: Layers,\n      label: \"Visualizations\",\n      active: location === \"/visualizations\",\n    },\n    {\n      href: \"/business-rules\",\n      icon: Layers,\n      label: \"Business Rules\",\n      active: location === \"/business-rules\",\n    },\n  ];\n\n  const recentProjects = [\n    { name: \"Billing System v2.1\", status: \"active\" },\n    { name: \"Customer Master\", status: \"processing\" },\n    { name: \"Payroll Legacy\", status: \"completed\" }\n  ];\n\n  return (\n    <aside className=\"w-80 bg-[hsl(var(--sidebar-bg))] border-r border-border/30 flex flex-col overflow-hidden\">\n      {/* Logo and Brand */}\n      <div className=\"p-6 border-b border-border/30\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-xl flex items-center justify-center\">\n            <Code2 className=\"text-[hsl(var(--primary-foreground))]\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-bold text-white gradient-text\">\n              COBOL ClarityEngine\n            </h1>\n            <p className=\"text-xs text-muted-foreground\">\n              Legacy Documentation Platform\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-6 space-y-8\">\n        <div>\n          <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-4\">\n            Navigation\n          </h3>\n          <div className=\"space-y-1\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`sidebar-item ${item.active ? \"active\" : \"\"}`}\n                data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <item.icon size={20} />\n                <span className=\"font-medium\">{item.label}</span>\n                {item.badge && item.badge > 0 && (\n                  <Badge \n                    variant=\"secondary\" \n                    className=\"ml-auto bg-primary/20 text-primary border-primary/30\"\n                  >\n                    {item.badge}\n                  </Badge>\n                )}\n              </Link>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-4\">\n            Recent Projects\n          </h3>\n          <div className=\"space-y-2\">\n            {recentProjects.map((project) => (\n              <Link\n                key={project.name}\n                href=\"/programs\"\n                className=\"flex items-center justify-between p-3 rounded-lg text-white/70 hover:text-white hover:bg-[hsl(var(--sidebar-hover))] transition-all duration-200\"\n                data-testid={`recent-project-${project.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-2 h-2 rounded-full bg-primary\"></div>\n                  <span className=\"text-sm font-medium\">{project.name}</span>\n                </div>\n                {project.status === \"active\" && <Activity size={14} className=\"text-primary\" />}\n                {project.status === \"processing\" && <Zap size={14} className=\"text-warning animate-pulse\" />}\n              </Link>\n            ))}\n          </div>\n        </div>\n      </nav>\n\n      {/* Footer Stats */}\n      <div className=\"p-6 border-t border-border/30\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-white\">{stats?.totalPrograms || 0}</div>\n            <div className=\"text-xs text-muted-foreground\">Programs</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-primary\">{stats?.documentedPrograms || 0}</div>\n            <div className=\"text-xs text-muted-foreground\">Documented</div>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":5369},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload.tsx":{"content":"import { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { CloudUpload, File, X, Loader2 } from \"lucide-react\";\nimport { Button } from \"./button\";\nimport { Progress } from \"./progress\";\n\ninterface FileUploadProps {\n  onFilesSelected: (files: FileList) => void;\n  isUploading?: boolean;\n  acceptedTypes?: string;\n  maxSize?: number;\n  multiple?: boolean;\n}\n\nexport default function FileUpload({\n  onFilesSelected,\n  isUploading = false,\n  acceptedTypes = \".cbl,.cob,.cpy,.jcl\",\n  maxSize = 100 * 1024 * 1024, // 100MB\n  multiple = true,\n}: FileUploadProps) {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    setSelectedFiles(acceptedFiles);\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive, fileRejections } = useDropzone({\n    onDrop,\n    accept: {\n      'text/plain': acceptedTypes.split(','),\n    },\n    maxSize,\n    multiple,\n  });\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleUpload = () => {\n    if (selectedFiles.length > 0) {\n      const fileList = new DataTransfer();\n      selectedFiles.forEach(file => fileList.items.add(file));\n      onFilesSelected(fileList.files);\n      setSelectedFiles([]);\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Upload Area */}\n      <div\n        {...getRootProps()}\n        className={`border-2 border-dashed rounded-lg p-12 text-center transition-colors cursor-pointer ${\n          isDragActive\n            ? 'border-primary bg-primary/5'\n            : 'border-gray-300 dark:border-gray-600 hover:border-primary dark:hover:border-primary'\n        }`}\n      >\n        <input {...getInputProps()} />\n        <div className=\"mx-auto mb-4\">\n          <CloudUpload \n            className={`mx-auto ${isDragActive ? 'text-primary' : 'text-gray-400'}`} \n            size={48} \n          />\n        </div>\n        <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n          {isDragActive ? 'Drop files here' : 'Drop files here or click to browse'}\n        </h3>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n          Supports {acceptedTypes} files up to {formatFileSize(maxSize)} each\n        </p>\n        <Button variant=\"outline\" disabled={isUploading}>\n          Choose Files\n        </Button>\n      </div>\n\n      {/* File Rejections */}\n      {fileRejections.length > 0 && (\n        <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n          <h4 className=\"font-medium text-red-800 dark:text-red-300 mb-2\">\n            Some files were rejected:\n          </h4>\n          <ul className=\"space-y-1 text-sm text-red-600 dark:text-red-400\">\n            {fileRejections.map(({ file, errors }) => (\n              <li key={file.name}>\n                {file.name}: {errors.map(e => e.message).join(', ')}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Selected Files */}\n      {selectedFiles.length > 0 && (\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium text-gray-900 dark:text-white\">\n            Selected Files ({selectedFiles.length})\n          </h4>\n          <div className=\"space-y-2\">\n            {selectedFiles.map((file, index) => (\n              <div\n                key={index}\n                className=\"flex items-center justify-between bg-gray-50 dark:bg-gray-800 rounded-lg p-3\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <File size={20} className=\"text-gray-400\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {file.name}\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {formatFileSize(file.size)}\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(index)}\n                  disabled={isUploading}\n                >\n                  <X size={16} />\n                </Button>\n              </div>\n            ))}\n          </div>\n          <Button\n            onClick={handleUpload}\n            disabled={isUploading || selectedFiles.length === 0}\n            className=\"w-full\"\n          >\n            {isUploading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Uploading...\n              </>\n            ) : (\n              <>\n                <CloudUpload className=\"mr-2 h-4 w-4\" />\n                Upload {selectedFiles.length} File{selectedFiles.length > 1 ? 's' : ''}\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* Upload Progress */}\n      {isUploading && (\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Uploading files...</span>\n            <span>Processing</span>\n          </div>\n          <Progress value={100} className=\"w-full\" />\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5556},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"docs/FUNCTIONALITY_ANALYSIS.md":{"content":"# COBOL ClarityEngine - Functionality Analysis Report\n\n## Executive Summary\nAnalysis of current implementation against comprehensive COBOL documentation platform requirements.\n\n## Implementation Status Matrix\n\n### ✅ IMPLEMENTED (80% Complete)\n1. **Portfolio Ingestion & Repository** - GitHub integration, multi-file support\n2. **Basic Code Explanation** - AI-powered documentation generation\n3. **Basic Documentation** - Multiple documentation types (overview, book, member, architecture)\n4. **Repository Management** - Connect, sync, manage GitHub repositories\n\n### 🟡 PARTIALLY IMPLEMENTED (40-70% Complete)\n1. **Application Blueprint** - Basic dependency tracking, needs enhancement\n2. **Business Rules Extraction** - Basic extraction, needs validation workbench\n3. **Static Quality Rules** - No implementation found\n4. **Performance Hotspot Detection** - No implementation found\n5. **Data Dictionary Management** - Basic copybook support, needs enhancement\n6. **Interactive Impact Analysis** - No implementation found\n\n### ❌ MISSING CRITICAL FUNCTIONALITY (0-20% Complete)\n1. **Control Flow Graphs (CFG) & Program Slicing** - Not implemented\n2. **Portability & Migration Readiness** - Not implemented\n3. **Rule Validation & Authoring Workbench** - Not implemented\n4. **Refactoring Assistant** - Not implemented\n5. **Transformation Readiness & Guidance** - Not implemented\n6. **Semantic Equivalence Validation** - Not implemented\n7. **JCL Flow Analysis** - Not implemented\n8. **CI/CD Quality Gates** - Not implemented\n9. **Query Language & API** - Not implemented\n10. **Test Data Generation** - Not implemented\n\n## Priority Implementation Plan\n\n### Phase 1: Critical Core Functionality (Week 1-2)\n1. **Enhanced COBOL Parser** - Support for all dialects, JCL, copybooks\n2. **Control Flow Graph Generation** - CFG construction and visualization\n3. **Static Quality Rules Engine** - Rule definitions and enforcement\n4. **Interactive Impact Analysis** - Real-time dependency analysis\n\n### Phase 2: Business Intelligence (Week 3-4)\n1. **Business Rule Validation Workbench** - Human-in-the-loop confirmation\n2. **Performance Hotspot Detection** - Pattern matching and analysis\n3. **Portability Analysis** - Dialect compatibility assessment\n4. **Enhanced Data Dictionary** - Comprehensive copybook management\n\n### Phase 3: Advanced Features (Week 5-6)\n1. **JCL Flow Analysis** - Job dependency modeling\n2. **Refactoring Assistant** - Modernization guidance\n3. **Query Language Implementation** - Custom analysis queries\n4. **CI/CD Integration** - Quality gate implementation\n\n### Phase 4: Enterprise Features (Week 7-8)\n1. **Test Data Generation** - Compliant dataset creation\n2. **Transformation Guidance** - Migration readiness assessment\n3. **Semantic Validation** - Equivalence testing\n4. **Advanced Visualizations** - BPMN-like process flows\n\n## Detailed Gap Analysis\n\n### 1. Parser Limitations\n**Current**: Basic COBOL parsing with simple structure extraction\n**Required**: \n- Multi-dialect support (IBM, Micro Focus, ACUCOBOL)\n- JCL parsing with job step dependencies\n- BMS map parsing for screen definitions\n- DDL parsing for database schemas\n- Advanced copybook resolution (REDEFINES, OCCURS DEPENDING ON)\n\n### 2. Analysis Engine Gaps\n**Current**: AI-based text analysis\n**Required**:\n- Static analysis with AST construction\n- Control flow graph generation\n- Data flow analysis\n- Call graph construction\n- Dead code detection\n- Complexity metrics (cyclomatic, cognitive)\n\n### 3. Business Rules Intelligence\n**Current**: Basic rule extraction via AI\n**Required**:\n- Heuristic-based candidate identification\n- Rule validation workbench with human review\n- Rule catalog with provenance tracking\n- Business process mapping\n- Decision table generation\n\n### 4. Quality Assurance\n**Current**: No quality rules engine\n**Required**:\n- COBOL-specific rule library (bugs, vulnerabilities, smells)\n- Performance antipattern detection\n- Code duplication analysis\n- Maintainability index calculation\n- Security vulnerability scanning\n\n### 5. Data Management\n**Current**: Basic data element extraction\n**Required**:\n- Enterprise data dictionary with lineage\n- Cross-program field usage tracking\n- Database-to-COBOL mapping\n- File-to-program relationship matrix\n- Data privacy compliance checking\n\n### 6. Development Workflow\n**Current**: Manual analysis and documentation\n**Required**:\n- IDE integration (VS Code, IDz)\n- CI/CD pipeline integration\n- Quality gate enforcement\n- Automated testing support\n- Change impact notifications\n\n## Technical Architecture Enhancements Needed\n\n### 1. Enhanced Database Schema\n- Add tables for CFGs, ASTs, quality rules, metrics\n- Implement graph database for dependency relationships\n- Add audit trails and change tracking\n\n### 2. Analysis Engine Architecture\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                     Analysis Orchestrator                       │\n├─────────────────────────────────────────────────────────────────┤\n│  ┌──────────────┬──────────────┬──────────────┬──────────────┐ │\n│  │   Multi-     │     CFG      │   Quality    │  Business    │ │\n│  │  Dialect     │  Generator   │    Rules     │    Rules     │ │\n│  │   Parser     │              │   Engine     │  Extractor   │ │\n│  └──────────────┴──────────────┴──────────────┴──────────────┘ │\n├─────────────────────────────────────────────────────────────────┤\n│                    Unified Repository Store                     │\n└─────────────────────────────────────────────────────────────────┘\n```\n\n### 3. Real-time Analysis Pipeline\n- Event-driven architecture for code changes\n- Incremental analysis for large codebases\n- Caching layer for performance\n- Background processing queues\n\n## Implementation Recommendations\n\n### Immediate Actions (Next 24 Hours)\n1. Fix existing TypeScript compilation errors\n2. Implement enhanced COBOL parser with dialect support\n3. Create CFG generation engine\n4. Add static quality rules framework\n\n### Short-term Goals (Next Week)\n1. Implement business rule validation workbench\n2. Add performance hotspot detection\n3. Create interactive impact analysis\n4. Enhance data dictionary management\n\n### Long-term Objectives (Next Month)\n1. Full JCL flow analysis\n2. Migration readiness assessment\n3. CI/CD quality gates\n4. Test data generation\n\n## Success Metrics\n- **Parser Coverage**: Support for 95% of enterprise COBOL dialects\n- **Analysis Speed**: Sub-second response for impact analysis queries\n- **Rule Accuracy**: 90%+ precision in business rule identification\n- **User Adoption**: Integration with existing development workflows\n- **Quality Improvement**: Measurable reduction in production defects\n\n## Next Steps\n1. Begin Phase 1 implementation with enhanced parser\n2. Set up comprehensive test suite with real COBOL codebases\n3. Implement CI/CD pipeline for quality assurance\n4. Create user feedback loop for continuous improvement","size_bytes":7755},"server/business-rule-workbench.ts":{"content":"import { storage } from \"./storage\";\nimport type { \n  BusinessRuleCandidate, \n  InsertBusinessRuleCandidate,\n  Program \n} from \"@shared/schema\";\n\nexport interface RuleValidationWorkbench {\n  candidates: EnhancedRuleCandidate[];\n  validationSession: ValidationSession;\n  recommendations: RuleRecommendation[];\n  clusters: RuleCluster[];\n}\n\nexport interface EnhancedRuleCandidate extends BusinessRuleCandidate {\n  codeContext: CodeContext;\n  relatedCandidates: string[]; // IDs of related candidates\n  validationHistory: ValidationEvent[];\n  businessContext?: BusinessContext;\n}\n\nexport interface CodeContext {\n  sourceLines: string[];\n  startLine: number;\n  endLine: number;\n  paragraph?: string;\n  section?: string;\n  precedingContext: string[];\n  followingContext: string[];\n  controlFlowPath: string[];\n}\n\nexport interface ValidationEvent {\n  action: 'confirmed' | 'rejected' | 'modified' | 'merged' | 'split';\n  userId: string;\n  timestamp: Date;\n  reason: string;\n  previousState?: Partial<BusinessRuleCandidate>;\n  changes?: Record<string, any>;\n}\n\nexport interface BusinessContext {\n  domain: string;\n  process: string;\n  stakeholders: string[];\n  businessImpact: 'high' | 'medium' | 'low';\n  frequency: 'always' | 'often' | 'sometimes' | 'rarely';\n  exceptions: string[];\n}\n\nexport interface ValidationSession {\n  id: string;\n  userId: string;\n  startTime: Date;\n  endTime?: Date;\n  candidatesReviewed: number;\n  candidatesConfirmed: number;\n  candidatesRejected: number;\n  notes: string[];\n}\n\nexport interface RuleRecommendation {\n  type: 'merge' | 'split' | 'refine' | 'investigate';\n  candidateIds: string[];\n  reason: string;\n  confidence: number;\n  suggestedAction: string;\n}\n\nexport interface RuleCluster {\n  id: string;\n  name: string;\n  description: string;\n  candidates: string[];\n  commonPattern: string;\n  businessDomain: string;\n  confidence: number;\n}\n\nexport interface RuleCatalog {\n  confirmedRules: ConfirmedBusinessRule[];\n  categories: RuleCategory[];\n  relationships: RuleRelationship[];\n  coverage: CoverageMetrics;\n}\n\nexport interface ConfirmedBusinessRule {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  businessDomain: string;\n  formalDefinition: string;\n  conditions: string[];\n  actions: string[];\n  exceptions: string[];\n  sourcePrograms: number[];\n  codeReferences: CodeReference[];\n  businessStakeholder: string;\n  lastReviewed: Date;\n  version: number;\n  status: 'active' | 'deprecated' | 'draft';\n}\n\nexport interface CodeReference {\n  programId: number;\n  programName: string;\n  location: {\n    line: number;\n    paragraph?: string;\n    section?: string;\n  };\n  codeSlice: string;\n  explanation: string;\n}\n\nexport interface RuleCategory {\n  id: string;\n  name: string;\n  description: string;\n  parent?: string;\n  ruleCount: number;\n}\n\nexport interface RuleRelationship {\n  fromRuleId: string;\n  toRuleId: string;\n  type: 'depends-on' | 'conflicts-with' | 'complements' | 'overrides';\n  description: string;\n}\n\nexport interface CoverageMetrics {\n  totalPrograms: number;\n  programsWithRules: number;\n  averageRulesPerProgram: number;\n  coveragePercentage: number;\n  uncoveredPrograms: number[];\n}\n\nexport class BusinessRuleWorkbench {\n  /**\n   * Create a validation workbench for a specific program\n   */\n  async createWorkbench(programId: number, userId: string): Promise<RuleValidationWorkbench> {\n    const program = await storage.getProgram(programId);\n    if (!program) {\n      throw new Error(`Program with id ${programId} not found`);\n    }\n\n    // Get all rule candidates for this program\n    const candidates = await storage.getBusinessRuleCandidatesByProgram(programId);\n    \n    // Enhance candidates with additional context\n    const enhancedCandidates = await this.enhanceCandidates(candidates, program);\n    \n    // Create validation session\n    const validationSession: ValidationSession = {\n      id: this.generateSessionId(),\n      userId,\n      startTime: new Date(),\n      candidatesReviewed: 0,\n      candidatesConfirmed: 0,\n      candidatesRejected: 0,\n      notes: []\n    };\n\n    // Generate recommendations\n    const recommendations = await this.generateRecommendations(enhancedCandidates);\n    \n    // Create rule clusters\n    const clusters = await this.clusterRules(enhancedCandidates);\n\n    return {\n      candidates: enhancedCandidates,\n      validationSession,\n      recommendations,\n      clusters\n    };\n  }\n\n  /**\n   * Validate a business rule candidate\n   */\n  async validateCandidate(\n    candidateId: string,\n    action: ValidationEvent['action'],\n    userId: string,\n    reason: string,\n    modifications?: Partial<BusinessRuleCandidate>\n  ): Promise<EnhancedRuleCandidate> {\n    const candidate = await storage.getBusinessRuleCandidate(candidateId);\n    if (!candidate) {\n      throw new Error(`Candidate with id ${candidateId} not found`);\n    }\n\n    // Record validation event\n    const validationEvent: ValidationEvent = {\n      action,\n      userId,\n      timestamp: new Date(),\n      reason,\n      previousState: { ...candidate },\n      changes: modifications\n    };\n\n    // Update candidate based on action\n    let updatedCandidate = candidate;\n    \n    switch (action) {\n      case 'confirmed':\n        updatedCandidate = await this.confirmCandidate(candidate, userId);\n        break;\n      case 'rejected':\n        updatedCandidate = await this.rejectCandidate(candidate, userId, reason);\n        break;\n      case 'modified':\n        if (modifications) {\n          updatedCandidate = await this.modifyCandidate(candidate, modifications, userId);\n        }\n        break;\n      case 'merged':\n        // Handle merging with other candidates\n        break;\n      case 'split':\n        // Handle splitting into multiple candidates\n        break;\n    }\n\n    // Add validation event to history\n    const enhancedCandidate = await this.getEnhancedCandidate(updatedCandidate.id);\n    enhancedCandidate.validationHistory.push(validationEvent);\n\n    return enhancedCandidate;\n  }\n\n  /**\n   * Get the business rule catalog\n   */\n  async getRuleCatalog(programId?: number): Promise<RuleCatalog> {\n    const confirmedRules = await this.getConfirmedRules(programId);\n    const categories = await this.getRuleCategories();\n    const relationships = await this.getRuleRelationships();\n    const coverage = await this.calculateCoverage();\n\n    return {\n      confirmedRules,\n      categories,\n      relationships,\n      coverage\n    };\n  }\n\n  /**\n   * Search rules by various criteria\n   */\n  async searchRules(criteria: {\n    text?: string;\n    category?: string;\n    businessDomain?: string;\n    programId?: number;\n    stakeholder?: string;\n  }): Promise<ConfirmedBusinessRule[]> {\n    // Implementation for searching confirmed business rules\n    return [];\n  }\n\n  /**\n   * Export rules for external systems\n   */\n  async exportRules(format: 'json' | 'xml' | 'csv' | 'business-glossary', filter?: any): Promise<string> {\n    const rules = await this.getConfirmedRules();\n    \n    switch (format) {\n      case 'json':\n        return JSON.stringify(rules, null, 2);\n      case 'xml':\n        return this.convertToXML(rules);\n      case 'csv':\n        return this.convertToCSV(rules);\n      case 'business-glossary':\n        return this.generateBusinessGlossary(rules);\n      default:\n        throw new Error(`Unsupported export format: ${format}`);\n    }\n  }\n\n  /**\n   * Generate rule recommendations based on patterns\n   */\n  private async generateRecommendations(candidates: EnhancedRuleCandidate[]): Promise<RuleRecommendation[]> {\n    const recommendations: RuleRecommendation[] = [];\n\n    // Look for merge opportunities\n    const mergeOpportunities = this.findMergeOpportunities(candidates);\n    recommendations.push(...mergeOpportunities);\n\n    // Look for split opportunities\n    const splitOpportunities = this.findSplitOpportunities(candidates);\n    recommendations.push(...splitOpportunities);\n\n    // Look for refinement opportunities\n    const refineOpportunities = this.findRefinementOpportunities(candidates);\n    recommendations.push(...refineOpportunities);\n\n    return recommendations;\n  }\n\n  /**\n   * Cluster similar business rules\n   */\n  private async clusterRules(candidates: EnhancedRuleCandidate[]): Promise<RuleCluster[]> {\n    const clusters: RuleCluster[] = [];\n\n    // Group by similar patterns\n    const patternGroups = this.groupByPatterns(candidates);\n    \n    for (const [pattern, groupCandidates] of patternGroups) {\n      clusters.push({\n        id: this.generateClusterId(),\n        name: `Pattern: ${pattern}`,\n        description: `Rules following the ${pattern} pattern`,\n        candidates: groupCandidates.map(c => c.id),\n        commonPattern: pattern,\n        businessDomain: this.inferBusinessDomain(groupCandidates),\n        confidence: this.calculateClusterConfidence(groupCandidates)\n      });\n    }\n\n    return clusters;\n  }\n\n  /**\n   * Enhance candidates with additional context\n   */\n  private async enhanceCandidates(\n    candidates: BusinessRuleCandidate[], \n    program: Program\n  ): Promise<EnhancedRuleCandidate[]> {\n    const enhanced: EnhancedRuleCandidate[] = [];\n\n    for (const candidate of candidates) {\n      const codeContext = this.extractCodeContext(candidate, program);\n      const relatedCandidates = this.findRelatedCandidates(candidate, candidates);\n      const validationHistory = await this.getValidationHistory(candidate.id);\n      const businessContext = await this.inferBusinessContext(candidate, program);\n\n      enhanced.push({\n        ...candidate,\n        codeContext,\n        relatedCandidates,\n        validationHistory,\n        businessContext\n      });\n    }\n\n    return enhanced;\n  }\n\n  /**\n   * Extract code context around a business rule\n   */\n  private extractCodeContext(candidate: BusinessRuleCandidate, program: Program): CodeContext {\n    const sourceLines = program.sourceCode.split('\\n');\n    const candidateLine = typeof candidate.location === 'object' ? candidate.location.line : 0;\n    \n    const contextSize = 5;\n    const startLine = Math.max(0, candidateLine - contextSize);\n    const endLine = Math.min(sourceLines.length - 1, candidateLine + contextSize);\n    \n    return {\n      sourceLines: sourceLines.slice(startLine, endLine + 1),\n      startLine,\n      endLine,\n      paragraph: typeof candidate.location === 'object' ? candidate.location.paragraph : undefined,\n      precedingContext: sourceLines.slice(Math.max(0, startLine - 3), startLine),\n      followingContext: sourceLines.slice(endLine + 1, Math.min(sourceLines.length, endLine + 4)),\n      controlFlowPath: [] // Would be populated from CFG analysis\n    };\n  }\n\n  /**\n   * Find related business rule candidates\n   */\n  private findRelatedCandidates(\n    candidate: BusinessRuleCandidate, \n    allCandidates: BusinessRuleCandidate[]\n  ): string[] {\n    const related: string[] = [];\n\n    for (const other of allCandidates) {\n      if (other.id === candidate.id) continue;\n\n      // Check for variable overlap\n      const variableOverlap = this.calculateVariableOverlap(candidate.variables, other.variables);\n      \n      // Check for location proximity\n      const locationProximity = this.calculateLocationProximity(candidate.location, other.location);\n      \n      // Check for condition similarity\n      const conditionSimilarity = this.calculateConditionSimilarity(candidate.conditions, other.conditions);\n\n      if (variableOverlap > 0.3 || locationProximity < 10 || conditionSimilarity > 0.5) {\n        related.push(other.id);\n      }\n    }\n\n    return related;\n  }\n\n  /**\n   * Confirm a business rule candidate\n   */\n  private async confirmCandidate(candidate: BusinessRuleCandidate, userId: string): Promise<BusinessRuleCandidate> {\n    const confirmed = await storage.updateBusinessRuleCandidate(candidate.id, {\n      status: 'confirmed',\n      reviewedBy: userId,\n      reviewedAt: new Date(),\n      confidence: Math.min(100, candidate.confidence + 20) // Boost confidence\n    });\n\n    // Create entry in confirmed rules catalog\n    await this.addToRuleCatalog(confirmed, userId);\n\n    return confirmed;\n  }\n\n  /**\n   * Reject a business rule candidate\n   */\n  private async rejectCandidate(\n    candidate: BusinessRuleCandidate, \n    userId: string, \n    reason: string\n  ): Promise<BusinessRuleCandidate> {\n    return await storage.updateBusinessRuleCandidate(candidate.id, {\n      status: 'rejected',\n      reviewedBy: userId,\n      reviewedAt: new Date(),\n      confidence: 0\n    });\n  }\n\n  /**\n   * Modify a business rule candidate\n   */\n  private async modifyCandidate(\n    candidate: BusinessRuleCandidate,\n    modifications: Partial<BusinessRuleCandidate>,\n    userId: string\n  ): Promise<BusinessRuleCandidate> {\n    return await storage.updateBusinessRuleCandidate(candidate.id, {\n      ...modifications,\n      reviewedBy: userId,\n      reviewedAt: new Date()\n    });\n  }\n\n  // Helper methods\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private generateClusterId(): string {\n    return `cluster_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async getEnhancedCandidate(candidateId: string): Promise<EnhancedRuleCandidate> {\n    // Implementation to get enhanced candidate\n    throw new Error('Not implemented');\n  }\n\n  private async getValidationHistory(candidateId: string): Promise<ValidationEvent[]> {\n    // Implementation to get validation history\n    return [];\n  }\n\n  private async inferBusinessContext(candidate: BusinessRuleCandidate, program: Program): Promise<BusinessContext> {\n    // Implementation to infer business context\n    return {\n      domain: 'Unknown',\n      process: 'Unknown',\n      stakeholders: [],\n      businessImpact: 'medium',\n      frequency: 'often',\n      exceptions: []\n    };\n  }\n\n  private findMergeOpportunities(candidates: EnhancedRuleCandidate[]): RuleRecommendation[] {\n    // Implementation to find merge opportunities\n    return [];\n  }\n\n  private findSplitOpportunities(candidates: EnhancedRuleCandidate[]): RuleRecommendation[] {\n    // Implementation to find split opportunities\n    return [];\n  }\n\n  private findRefinementOpportunities(candidates: EnhancedRuleCandidate[]): RuleRecommendation[] {\n    // Implementation to find refinement opportunities\n    return [];\n  }\n\n  private groupByPatterns(candidates: EnhancedRuleCandidate[]): Map<string, EnhancedRuleCandidate[]> {\n    // Implementation to group by patterns\n    return new Map();\n  }\n\n  private inferBusinessDomain(candidates: EnhancedRuleCandidate[]): string {\n    // Implementation to infer business domain\n    return 'Unknown';\n  }\n\n  private calculateClusterConfidence(candidates: EnhancedRuleCandidate[]): number {\n    // Implementation to calculate cluster confidence\n    return 0.5;\n  }\n\n  private calculateVariableOverlap(vars1: string[], vars2: string[]): number {\n    const set1 = new Set(vars1);\n    const set2 = new Set(vars2);\n    const intersection = new Set([...set1].filter(x => set2.has(x)));\n    const union = new Set([...set1, ...set2]);\n    return intersection.size / union.size;\n  }\n\n  private calculateLocationProximity(loc1: any, loc2: any): number {\n    // Implementation to calculate location proximity\n    return 0;\n  }\n\n  private calculateConditionSimilarity(cond1: string[], cond2: string[]): number {\n    // Implementation to calculate condition similarity\n    return 0;\n  }\n\n  private async addToRuleCatalog(candidate: BusinessRuleCandidate, userId: string): Promise<void> {\n    // Implementation to add to rule catalog\n  }\n\n  private async getConfirmedRules(programId?: number): Promise<ConfirmedBusinessRule[]> {\n    // Implementation to get confirmed rules\n    return [];\n  }\n\n  private async getRuleCategories(): Promise<RuleCategory[]> {\n    // Implementation to get rule categories\n    return [];\n  }\n\n  private async getRuleRelationships(): Promise<RuleRelationship[]> {\n    // Implementation to get rule relationships\n    return [];\n  }\n\n  private async calculateCoverage(): Promise<CoverageMetrics> {\n    // Implementation to calculate coverage\n    return {\n      totalPrograms: 0,\n      programsWithRules: 0,\n      averageRulesPerProgram: 0,\n      coveragePercentage: 0,\n      uncoveredPrograms: []\n    };\n  }\n\n  private convertToXML(rules: ConfirmedBusinessRule[]): string {\n    // Implementation to convert to XML\n    return '';\n  }\n\n  private convertToCSV(rules: ConfirmedBusinessRule[]): string {\n    // Implementation to convert to CSV\n    return '';\n  }\n\n  private generateBusinessGlossary(rules: ConfirmedBusinessRule[]): string {\n    // Implementation to generate business glossary\n    return '';\n  }\n}\n\n// Export singleton instance\nexport const businessRuleWorkbench = new BusinessRuleWorkbench();","size_bytes":16741},"server/enhanced-cobol-parser.ts":{"content":"import { storage } from \"./storage\";\nimport type { InsertDependency } from \"@shared/schema\";\n\n// Enhanced AST node types\nexport interface ASTNode {\n  type: string;\n  value?: string;\n  children: ASTNode[];\n  location: {\n    line: number;\n    column: number;\n    file?: string;\n  };\n  metadata?: Record<string, any>;\n}\n\nexport interface ControlFlowNode {\n  id: string;\n  type: 'statement' | 'condition' | 'loop' | 'call' | 'return' | 'entry' | 'exit';\n  statement?: string;\n  condition?: string;\n  location: {\n    line: number;\n    paragraph?: string;\n    section?: string;\n  };\n  predecessors: string[];\n  successors: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface ControlFlowGraph {\n  nodes: Map<string, ControlFlowNode>;\n  entryNode: string;\n  exitNodes: string[];\n  programId: number;\n}\n\nexport interface DataFlow {\n  variable: string;\n  type: 'definition' | 'use' | 'modification';\n  location: {\n    line: number;\n    paragraph?: string;\n  };\n  scope: string;\n}\n\nexport interface ParsedCOBOLProgram {\n  ast: ASTNode;\n  cfg: ControlFlowGraph;\n  dataFlows: DataFlow[];\n  dependencies: ProgramDependency[];\n  copybooks: CopybookReference[];\n  metrics: CodeMetrics;\n  businessRules: BusinessRuleCandidate[];\n  qualityIssues: QualityIssue[];\n}\n\nexport interface ProgramDependency {\n  type: 'call' | 'copy' | 'include' | 'file-io' | 'database' | 'screen';\n  target: string;\n  location: {\n    line: number;\n    paragraph?: string;\n  };\n  direction: 'inbound' | 'outbound';\n}\n\nexport interface CopybookReference {\n  name: string;\n  type: 'copy' | 'include';\n  library?: string;\n  location: {\n    line: number;\n    paragraph?: string;\n  };\n  resolved: boolean;\n  content?: string;\n}\n\nexport interface CodeMetrics {\n  linesOfCode: number;\n  cyclomaticComplexity: number;\n  cognitiveComplexity: number;\n  depthOfNesting: number;\n  numberOfParagraphs: number;\n  numberOfSections: number;\n  halsteadMetrics: {\n    vocabulary: number;\n    length: number;\n    difficulty: number;\n    effort: number;\n  };\n}\n\nexport interface BusinessRuleCandidate {\n  id: string;\n  type: 'condition' | 'calculation' | 'validation' | 'decision';\n  description: string;\n  confidence: number; // 0-1\n  location: {\n    line: number;\n    paragraph?: string;\n  };\n  variables: string[];\n  conditions: string[];\n  actions: string[];\n  evidence: string[]; // Code snippets that support this rule\n}\n\nexport interface QualityIssue {\n  id: string;\n  rule: string;\n  severity: 'critical' | 'major' | 'minor' | 'info';\n  category: 'bug' | 'vulnerability' | 'smell' | 'performance';\n  message: string;\n  location: {\n    line: number;\n    column?: number;\n    paragraph?: string;\n  };\n  suggestion?: string;\n}\n\n// COBOL Dialect support\nexport enum COBOLDialect {\n  IBM_ENTERPRISE = 'ibm-enterprise',\n  MICRO_FOCUS = 'micro-focus',\n  ACUCOBOL = 'acucobol',\n  GNU_COBOL = 'gnu-cobol',\n  FUJITSU = 'fujitsu',\n  UNISYS = 'unisys'\n}\n\nexport class EnhancedCOBOLParser {\n  private dialect: COBOLDialect = COBOLDialect.IBM_ENTERPRISE;\n  private sourceLines: string[] = [];\n  private currentLine: number = 0;\n  private ast: ASTNode | null = null;\n  private cfg: ControlFlowGraph | null = null;\n  private qualityRules: QualityRule[] = [];\n\n  constructor(dialect: COBOLDialect = COBOLDialect.IBM_ENTERPRISE) {\n    this.dialect = dialect;\n    this.initializeQualityRules();\n  }\n\n  /**\n   * Main parsing method that produces comprehensive analysis\n   */\n  async parseProgram(sourceCode: string, filename: string = ''): Promise<ParsedCOBOLProgram> {\n    this.sourceLines = sourceCode.split('\\n');\n    this.currentLine = 0;\n\n    // Build Abstract Syntax Tree\n    this.ast = this.buildAST();\n\n    // Generate Control Flow Graph\n    this.cfg = this.generateCFG(this.ast);\n\n    // Perform data flow analysis\n    const dataFlows = this.analyzeDataFlow(this.ast);\n\n    // Extract dependencies\n    const dependencies = this.extractDependencies(this.ast);\n\n    // Resolve copybooks\n    const copybooks = await this.resolveCopybooks(this.ast);\n\n    // Calculate metrics\n    const metrics = this.calculateMetrics(this.ast, this.cfg);\n\n    // Extract business rule candidates\n    const businessRules = this.extractBusinessRuleCandidates(this.ast, this.cfg);\n\n    // Run quality analysis\n    const qualityIssues = this.runQualityAnalysis(this.ast);\n\n    return {\n      ast: this.ast,\n      cfg: this.cfg,\n      dataFlows,\n      dependencies,\n      copybooks,\n      metrics,\n      businessRules,\n      qualityIssues\n    };\n  }\n\n  /**\n   * Build Abstract Syntax Tree from COBOL source\n   */\n  private buildAST(): ASTNode {\n    const root: ASTNode = {\n      type: 'program',\n      children: [],\n      location: { line: 1, column: 1 }\n    };\n\n    // Parse each division\n    root.children.push(this.parseIdentificationDivision());\n    root.children.push(this.parseEnvironmentDivision());\n    root.children.push(this.parseDataDivision());\n    root.children.push(this.parseProcedureDivision());\n\n    return root;\n  }\n\n  /**\n   * Generate Control Flow Graph from AST\n   */\n  private generateCFG(ast: ASTNode): ControlFlowGraph {\n    const cfg: ControlFlowGraph = {\n      nodes: new Map(),\n      entryNode: 'entry',\n      exitNodes: [],\n      programId: 0 // Will be set by caller\n    };\n\n    // Create entry node\n    cfg.nodes.set('entry', {\n      id: 'entry',\n      type: 'entry',\n      statement: 'Program Start',\n      location: { line: 1 },\n      predecessors: [],\n      successors: []\n    });\n\n    // Process procedure division to build CFG\n    const procedureDiv = ast.children.find(child => child.type === 'procedure-division');\n    if (procedureDiv) {\n      this.buildCFGFromProcedure(procedureDiv, cfg);\n    }\n\n    return cfg;\n  }\n\n  /**\n   * Analyze data flow through the program\n   */\n  private analyzeDataFlow(ast: ASTNode): DataFlow[] {\n    const dataFlows: DataFlow[] = [];\n    \n    // Traverse AST to find variable definitions and uses\n    this.traverseForDataFlow(ast, dataFlows);\n    \n    return dataFlows;\n  }\n\n  /**\n   * Extract program dependencies (calls, copies, file I/O)\n   */\n  private extractDependencies(ast: ASTNode): ProgramDependency[] {\n    const dependencies: ProgramDependency[] = [];\n    \n    // Find CALL statements\n    this.findCalls(ast, dependencies);\n    \n    // Find COPY statements\n    this.findCopyStatements(ast, dependencies);\n    \n    // Find file I/O operations\n    this.findFileOperations(ast, dependencies);\n    \n    // Find database operations\n    this.findDatabaseOperations(ast, dependencies);\n    \n    return dependencies;\n  }\n\n  /**\n   * Resolve copybook references\n   */\n  private async resolveCopybooks(ast: ASTNode): Promise<CopybookReference[]> {\n    const copybooks: CopybookReference[] = [];\n    \n    // Extract copybook references from AST\n    this.findCopybookReferences(ast, copybooks);\n    \n    // Attempt to resolve each copybook\n    for (const copybook of copybooks) {\n      try {\n        // In a real implementation, this would look up copybooks in libraries\n        copybook.resolved = false; // Placeholder\n      } catch (error) {\n        copybook.resolved = false;\n      }\n    }\n    \n    return copybooks;\n  }\n\n  /**\n   * Calculate code metrics\n   */\n  private calculateMetrics(ast: ASTNode, cfg: ControlFlowGraph): CodeMetrics {\n    const linesOfCode = this.sourceLines.filter(line => \n      line.trim().length > 0 && !line.trim().startsWith('*')\n    ).length;\n\n    const cyclomaticComplexity = this.calculateCyclomaticComplexity(cfg);\n    const cognitiveComplexity = this.calculateCognitiveComplexity(ast);\n    const depthOfNesting = this.calculateNestingDepth(ast);\n    const numberOfParagraphs = this.countElements(ast, 'paragraph');\n    const numberOfSections = this.countElements(ast, 'section');\n    const halsteadMetrics = this.calculateHalsteadMetrics(ast);\n\n    return {\n      linesOfCode,\n      cyclomaticComplexity,\n      cognitiveComplexity,\n      depthOfNesting,\n      numberOfParagraphs,\n      numberOfSections,\n      halsteadMetrics\n    };\n  }\n\n  /**\n   * Extract business rule candidates using heuristics\n   */\n  private extractBusinessRuleCandidates(ast: ASTNode, cfg: ControlFlowGraph): BusinessRuleCandidate[] {\n    const candidates: BusinessRuleCandidate[] = [];\n    \n    // Find conditional statements\n    this.findConditionalRules(ast, candidates);\n    \n    // Find calculation patterns\n    this.findCalculationRules(ast, candidates);\n    \n    // Find validation patterns\n    this.findValidationRules(ast, candidates);\n    \n    // Score candidates by confidence\n    this.scoreBusinessRuleCandidates(candidates, cfg);\n    \n    return candidates.sort((a, b) => b.confidence - a.confidence);\n  }\n\n  /**\n   * Run quality analysis using predefined rules\n   */\n  private runQualityAnalysis(ast: ASTNode): QualityIssue[] {\n    const issues: QualityIssue[] = [];\n    \n    for (const rule of this.qualityRules) {\n      const ruleIssues = rule.check(ast, this.sourceLines);\n      issues.push(...ruleIssues);\n    }\n    \n    return issues;\n  }\n\n  // Helper methods for parsing specific divisions\n  private parseIdentificationDivision(): ASTNode {\n    const node: ASTNode = {\n      type: 'identification-division',\n      children: [],\n      location: { line: this.currentLine, column: 1 }\n    };\n\n    // Find IDENTIFICATION DIVISION\n    while (this.currentLine < this.sourceLines.length) {\n      const line = this.sourceLines[this.currentLine].trim();\n      if (line.match(/IDENTIFICATION\\s+DIVISION/i)) {\n        break;\n      }\n      this.currentLine++;\n    }\n\n    // Parse identification division content\n    while (this.currentLine < this.sourceLines.length) {\n      const line = this.sourceLines[this.currentLine].trim();\n      \n      if (line.match(/ENVIRONMENT\\s+DIVISION/i) || \n          line.match(/DATA\\s+DIVISION/i) || \n          line.match(/PROCEDURE\\s+DIVISION/i)) {\n        break;\n      }\n      \n      if (line.match(/PROGRAM-ID\\.\\s+([A-Z0-9-]+)/i)) {\n        const match = line.match(/PROGRAM-ID\\.\\s+([A-Z0-9-]+)/i);\n        node.children.push({\n          type: 'program-id',\n          value: match ? match[1] : 'UNKNOWN',\n          children: [],\n          location: { line: this.currentLine + 1, column: 1 }\n        });\n      }\n      \n      this.currentLine++;\n    }\n\n    return node;\n  }\n\n  private parseEnvironmentDivision(): ASTNode {\n    // Implementation for environment division parsing\n    return {\n      type: 'environment-division',\n      children: [],\n      location: { line: this.currentLine, column: 1 }\n    };\n  }\n\n  private parseDataDivision(): ASTNode {\n    // Implementation for data division parsing\n    return {\n      type: 'data-division',\n      children: [],\n      location: { line: this.currentLine, column: 1 }\n    };\n  }\n\n  private parseProcedureDivision(): ASTNode {\n    // Implementation for procedure division parsing\n    return {\n      type: 'procedure-division',\n      children: [],\n      location: { line: this.currentLine, column: 1 }\n    };\n  }\n\n  // Helper methods for CFG construction\n  private buildCFGFromProcedure(procedureDiv: ASTNode, cfg: ControlFlowGraph): void {\n    // Implementation for building CFG from procedure division\n  }\n\n  // Helper methods for data flow analysis\n  private traverseForDataFlow(node: ASTNode, dataFlows: DataFlow[]): void {\n    // Implementation for traversing AST to find data flows\n  }\n\n  // Helper methods for dependency extraction\n  private findCalls(ast: ASTNode, dependencies: ProgramDependency[]): void {\n    // Implementation for finding CALL statements\n  }\n\n  private findCopyStatements(ast: ASTNode, dependencies: ProgramDependency[]): void {\n    // Implementation for finding COPY statements\n  }\n\n  private findFileOperations(ast: ASTNode, dependencies: ProgramDependency[]): void {\n    // Implementation for finding file I/O operations\n  }\n\n  private findDatabaseOperations(ast: ASTNode, dependencies: ProgramDependency[]): void {\n    // Implementation for finding database operations\n  }\n\n  // Helper methods for copybook resolution\n  private findCopybookReferences(ast: ASTNode, copybooks: CopybookReference[]): void {\n    // Implementation for finding copybook references\n  }\n\n  // Helper methods for metrics calculation\n  private calculateCyclomaticComplexity(cfg: ControlFlowGraph): number {\n    // McCabe's cyclomatic complexity: M = E - N + 2P\n    const edges = this.countCFGEdges(cfg);\n    const nodes = cfg.nodes.size;\n    const components = 1; // Assuming single connected component\n    return edges - nodes + 2 * components;\n  }\n\n  private calculateCognitiveComplexity(ast: ASTNode): number {\n    // Implementation for cognitive complexity calculation\n    return 0; // Placeholder\n  }\n\n  private calculateNestingDepth(ast: ASTNode): number {\n    // Implementation for nesting depth calculation\n    return 0; // Placeholder\n  }\n\n  private countElements(ast: ASTNode, elementType: string): number {\n    // Implementation for counting specific element types\n    return 0; // Placeholder\n  }\n\n  private calculateHalsteadMetrics(ast: ASTNode): CodeMetrics['halsteadMetrics'] {\n    // Implementation for Halstead metrics\n    return {\n      vocabulary: 0,\n      length: 0,\n      difficulty: 0,\n      effort: 0\n    };\n  }\n\n  private countCFGEdges(cfg: ControlFlowGraph): number {\n    let edgeCount = 0;\n    for (const node of cfg.nodes.values()) {\n      edgeCount += node.successors.length;\n    }\n    return edgeCount;\n  }\n\n  // Helper methods for business rule extraction\n  private findConditionalRules(ast: ASTNode, candidates: BusinessRuleCandidate[]): void {\n    // Implementation for finding conditional business rules\n  }\n\n  private findCalculationRules(ast: ASTNode, candidates: BusinessRuleCandidate[]): void {\n    // Implementation for finding calculation rules\n  }\n\n  private findValidationRules(ast: ASTNode, candidates: BusinessRuleCandidate[]): void {\n    // Implementation for finding validation rules\n  }\n\n  private scoreBusinessRuleCandidates(candidates: BusinessRuleCandidate[], cfg: ControlFlowGraph): void {\n    // Implementation for scoring business rule candidates\n  }\n\n  // Quality rules initialization\n  private initializeQualityRules(): void {\n    this.qualityRules = [\n      new DeadCodeRule(),\n      new ComplexityRule(),\n      new NamingConventionRule(),\n      new PerformanceRule(),\n      new SecurityRule()\n    ];\n  }\n}\n\n// Quality rule interface and implementations\ninterface QualityRule {\n  name: string;\n  severity: QualityIssue['severity'];\n  category: QualityIssue['category'];\n  check(ast: ASTNode, sourceLines: string[]): QualityIssue[];\n}\n\nclass DeadCodeRule implements QualityRule {\n  name = 'dead-code';\n  severity: QualityIssue['severity'] = 'major';\n  category: QualityIssue['category'] = 'smell';\n\n  check(ast: ASTNode, sourceLines: string[]): QualityIssue[] {\n    // Implementation for dead code detection\n    return [];\n  }\n}\n\nclass ComplexityRule implements QualityRule {\n  name = 'complexity';\n  severity: QualityIssue['severity'] = 'major';\n  category: QualityIssue['category'] = 'smell';\n\n  check(ast: ASTNode, sourceLines: string[]): QualityIssue[] {\n    // Implementation for complexity checking\n    return [];\n  }\n}\n\nclass NamingConventionRule implements QualityRule {\n  name = 'naming-convention';\n  severity: QualityIssue['severity'] = 'minor';\n  category: QualityIssue['category'] = 'smell';\n\n  check(ast: ASTNode, sourceLines: string[]): QualityIssue[] {\n    // Implementation for naming convention checking\n    return [];\n  }\n}\n\nclass PerformanceRule implements QualityRule {\n  name = 'performance';\n  severity: QualityIssue['severity'] = 'major';\n  category: QualityIssue['category'] = 'performance';\n\n  check(ast: ASTNode, sourceLines: string[]): QualityIssue[] {\n    // Implementation for performance issue detection\n    return [];\n  }\n}\n\nclass SecurityRule implements QualityRule {\n  name = 'security';\n  severity: QualityIssue['severity'] = 'critical';\n  category: QualityIssue['category'] = 'vulnerability';\n\n  check(ast: ASTNode, sourceLines: string[]): QualityIssue[] {\n    // Implementation for security vulnerability detection\n    return [];\n  }\n}\n\n// Export the enhanced parser\nexport { EnhancedCOBOLParser };","size_bytes":16091},"server/impact-analysis-engine.ts":{"content":"import { storage } from \"./storage\";\nimport type { \n  Program, \n  CodeFile, \n  Dependency, \n  BusinessRuleCandidate,\n  QualityIssue \n} from \"@shared/schema\";\n\nexport interface ImpactAnalysisResult {\n  sourceItem: {\n    type: 'program' | 'copybook' | 'dataset' | 'field';\n    id: string;\n    name: string;\n  };\n  impactedItems: ImpactedItem[];\n  analysisMetrics: {\n    totalImpacted: number;\n    highRiskChanges: number;\n    estimatedTestingEffort: number; // in hours\n    recommendedApproach: string;\n  };\n  changeRippleEffect: ChangeRipple[];\n}\n\nexport interface ImpactedItem {\n  type: 'program' | 'copybook' | 'job' | 'dataset' | 'screen' | 'report';\n  id: string;\n  name: string;\n  relationship: string;\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  changeType: 'direct' | 'indirect' | 'cascading';\n  location?: {\n    line?: number;\n    paragraph?: string;\n    section?: string;\n  };\n  description: string;\n  recommendation: string;\n}\n\nexport interface ChangeRipple {\n  level: number; // 1 = direct, 2 = indirect, etc.\n  items: ImpactedItem[];\n  description: string;\n}\n\nexport interface FieldImpactAnalysis {\n  field: {\n    name: string;\n    program: string;\n    copybook?: string;\n  };\n  usages: FieldUsage[];\n  modifications: FieldModification[];\n  propagation: DataPropagation[];\n}\n\nexport interface FieldUsage {\n  program: string;\n  type: 'read' | 'write' | 'compute' | 'compare' | 'move';\n  location: {\n    line: number;\n    paragraph?: string;\n  };\n  context: string;\n}\n\nexport interface FieldModification {\n  program: string;\n  modificationType: 'structure' | 'format' | 'validation' | 'calculation';\n  impact: 'breaking' | 'compatible' | 'enhancement';\n  location: {\n    line: number;\n    paragraph?: string;\n  };\n}\n\nexport interface DataPropagation {\n  sourceProgram: string;\n  targetProgram: string;\n  mechanism: 'file' | 'database' | 'parameter' | 'global';\n  transformations: string[];\n}\n\nexport class ImpactAnalysisEngine {\n  private dependencyGraph: Map<string, string[]> = new Map();\n  private reverseDependencyGraph: Map<string, string[]> = new Map();\n  private copybookUsages: Map<string, string[]> = new Map();\n  private fieldUsages: Map<string, FieldUsage[]> = new Map();\n\n  constructor() {\n    this.initializeDependencyGraphs();\n  }\n\n  /**\n   * Analyze impact of changing a specific program\n   */\n  async analyzeProgramImpact(programId: number): Promise<ImpactAnalysisResult> {\n    const program = await storage.getProgram(programId);\n    if (!program) {\n      throw new Error(`Program with id ${programId} not found`);\n    }\n\n    const impactedItems: ImpactedItem[] = [];\n    \n    // Find direct dependencies\n    const directDependencies = await this.findDirectDependencies(programId);\n    impactedItems.push(...directDependencies);\n\n    // Find indirect dependencies (ripple effects)\n    const indirectDependencies = await this.findIndirectDependencies(programId, 3); // 3 levels deep\n    impactedItems.push(...indirectDependencies);\n\n    // Analyze copybook dependencies\n    const copybookImpacts = await this.analyzeCopybookImpacts(programId);\n    impactedItems.push(...copybookImpacts);\n\n    // Analyze data flow impacts\n    const dataFlowImpacts = await this.analyzeDataFlowImpacts(programId);\n    impactedItems.push(...dataFlowImpacts);\n\n    // Calculate change ripple effects\n    const changeRippleEffect = this.calculateChangeRipple(impactedItems);\n\n    // Calculate analysis metrics\n    const analysisMetrics = this.calculateAnalysisMetrics(impactedItems);\n\n    return {\n      sourceItem: {\n        type: 'program',\n        id: programId.toString(),\n        name: program.name\n      },\n      impactedItems,\n      analysisMetrics,\n      changeRippleEffect\n    };\n  }\n\n  /**\n   * Analyze impact of changing a specific copybook\n   */\n  async analyzeCopybookImpact(copybookName: string): Promise<ImpactAnalysisResult> {\n    const impactedItems: ImpactedItem[] = [];\n    \n    // Find all programs using this copybook\n    const usingPrograms = await this.findProgramsUsingCopybook(copybookName);\n    \n    for (const programId of usingPrograms) {\n      const program = await storage.getProgram(programId);\n      if (program) {\n        impactedItems.push({\n          type: 'program',\n          id: programId.toString(),\n          name: program.name,\n          relationship: 'includes copybook',\n          severity: 'high',\n          changeType: 'direct',\n          description: `Program directly includes copybook ${copybookName}`,\n          recommendation: 'Review and test all copybook references'\n        });\n\n        // Find cascading impacts from these programs\n        const cascadingImpacts = await this.findIndirectDependencies(programId, 2);\n        impactedItems.push(...cascadingImpacts.map(item => ({\n          ...item,\n          changeType: 'cascading' as const\n        })));\n      }\n    }\n\n    const analysisMetrics = this.calculateAnalysisMetrics(impactedItems);\n    const changeRippleEffect = this.calculateChangeRipple(impactedItems);\n\n    return {\n      sourceItem: {\n        type: 'copybook',\n        id: copybookName,\n        name: copybookName\n      },\n      impactedItems,\n      analysisMetrics,\n      changeRippleEffect\n    };\n  }\n\n  /**\n   * Analyze impact of changing a specific field\n   */\n  async analyzeFieldImpact(fieldName: string, programId?: number): Promise<FieldImpactAnalysis> {\n    const usages: FieldUsage[] = [];\n    const modifications: FieldModification[] = [];\n    const propagation: DataPropagation[] = [];\n\n    // Find all usages of this field across programs\n    const allPrograms = await storage.getAllPrograms();\n    \n    for (const program of allPrograms) {\n      if (programId && program.id !== programId) continue;\n      \n      const fieldUsagesInProgram = this.extractFieldUsages(program, fieldName);\n      usages.push(...fieldUsagesInProgram);\n\n      const fieldModifications = this.extractFieldModifications(program, fieldName);\n      modifications.push(...fieldModifications);\n    }\n\n    // Trace data propagation\n    const dataPropagation = await this.traceDataPropagation(fieldName);\n    propagation.push(...dataPropagation);\n\n    const program = programId ? await storage.getProgram(programId) : null;\n    \n    return {\n      field: {\n        name: fieldName,\n        program: program?.name || 'Unknown',\n        copybook: await this.findFieldCopybook(fieldName)\n      },\n      usages,\n      modifications,\n      propagation\n    };\n  }\n\n  /**\n   * Get instant impact analysis for quick queries\n   */\n  async getInstantImpact(\n    sourceType: 'program' | 'copybook' | 'field',\n    sourceId: string\n  ): Promise<{ \n    directImpacts: number; \n    indirectImpacts: number; \n    riskLevel: 'low' | 'medium' | 'high' | 'critical';\n    summary: string;\n  }> {\n    // Check cache first\n    const cached = await this.getCachedImpact(sourceType, sourceId);\n    if (cached && !this.isCacheExpired(cached)) {\n      return this.summarizeImpact(cached);\n    }\n\n    // Perform quick analysis\n    let directImpacts = 0;\n    let indirectImpacts = 0;\n\n    switch (sourceType) {\n      case 'program':\n        const programDeps = await this.findDirectDependencies(parseInt(sourceId));\n        directImpacts = programDeps.length;\n        indirectImpacts = await this.estimateIndirectImpacts(parseInt(sourceId));\n        break;\n        \n      case 'copybook':\n        const copybookUsages = await this.findProgramsUsingCopybook(sourceId);\n        directImpacts = copybookUsages.length;\n        indirectImpacts = await this.estimateCopybookIndirectImpacts(sourceId);\n        break;\n        \n      case 'field':\n        const fieldUsages = await this.countFieldUsages(sourceId);\n        directImpacts = fieldUsages.direct;\n        indirectImpacts = fieldUsages.indirect;\n        break;\n    }\n\n    const riskLevel = this.calculateRiskLevel(directImpacts, indirectImpacts);\n    const summary = this.generateImpactSummary(sourceType, sourceId, directImpacts, indirectImpacts);\n\n    return {\n      directImpacts,\n      indirectImpacts,\n      riskLevel,\n      summary\n    };\n  }\n\n  // Private helper methods\n  private async initializeDependencyGraphs(): Promise<void> {\n    // Initialize dependency graphs for fast lookups\n    const dependencies = await storage.getAllDependencies();\n    \n    for (const dep of dependencies) {\n      const fromId = dep.fromProgramId.toString();\n      const toId = dep.toProgramId.toString();\n      \n      // Forward graph\n      if (!this.dependencyGraph.has(fromId)) {\n        this.dependencyGraph.set(fromId, []);\n      }\n      this.dependencyGraph.get(fromId)!.push(toId);\n      \n      // Reverse graph\n      if (!this.reverseDependencyGraph.has(toId)) {\n        this.reverseDependencyGraph.set(toId, []);\n      }\n      this.reverseDependencyGraph.get(toId)!.push(fromId);\n    }\n  }\n\n  private async findDirectDependencies(programId: number): Promise<ImpactedItem[]> {\n    const dependencies = await storage.getDependenciesByProgram(programId);\n    const impactedItems: ImpactedItem[] = [];\n\n    for (const dep of dependencies) {\n      const targetProgram = await storage.getProgram(dep.toProgramId);\n      if (targetProgram) {\n        impactedItems.push({\n          type: 'program',\n          id: dep.toProgramId.toString(),\n          name: targetProgram.name,\n          relationship: dep.type,\n          severity: this.calculateSeverity(dep.type, dep.strength),\n          changeType: 'direct',\n          location: dep.metadata?.lineNumbers ? {\n            line: dep.metadata.lineNumbers[0]\n          } : undefined,\n          description: `Direct ${dep.type} dependency`,\n          recommendation: `Review ${dep.type} interface and test integration`\n        });\n      }\n    }\n\n    return impactedItems;\n  }\n\n  private async findIndirectDependencies(programId: number, maxDepth: number): Promise<ImpactedItem[]> {\n    const visited = new Set<string>();\n    const impactedItems: ImpactedItem[] = [];\n    \n    const traverse = async (currentId: string, depth: number) => {\n      if (depth >= maxDepth || visited.has(currentId)) return;\n      visited.add(currentId);\n\n      const dependencies = this.dependencyGraph.get(currentId) || [];\n      \n      for (const depId of dependencies) {\n        const program = await storage.getProgram(parseInt(depId));\n        if (program) {\n          impactedItems.push({\n            type: 'program',\n            id: depId,\n            name: program.name,\n            relationship: `indirect (level ${depth + 1})`,\n            severity: depth === 0 ? 'medium' : 'low',\n            changeType: 'indirect',\n            description: `Indirect dependency at level ${depth + 1}`,\n            recommendation: 'Monitor for potential impacts'\n          });\n          \n          await traverse(depId, depth + 1);\n        }\n      }\n    };\n\n    await traverse(programId.toString(), 0);\n    return impactedItems;\n  }\n\n  private async analyzeCopybookImpacts(programId: number): Promise<ImpactedItem[]> {\n    // Implementation for copybook impact analysis\n    return [];\n  }\n\n  private async analyzeDataFlowImpacts(programId: number): Promise<ImpactedItem[]> {\n    // Implementation for data flow impact analysis\n    return [];\n  }\n\n  private calculateChangeRipple(impactedItems: ImpactedItem[]): ChangeRipple[] {\n    const ripples: ChangeRipple[] = [];\n    \n    // Group items by change type\n    const directItems = impactedItems.filter(item => item.changeType === 'direct');\n    const indirectItems = impactedItems.filter(item => item.changeType === 'indirect');\n    const cascadingItems = impactedItems.filter(item => item.changeType === 'cascading');\n\n    if (directItems.length > 0) {\n      ripples.push({\n        level: 1,\n        items: directItems,\n        description: `${directItems.length} items directly affected`\n      });\n    }\n\n    if (indirectItems.length > 0) {\n      ripples.push({\n        level: 2,\n        items: indirectItems,\n        description: `${indirectItems.length} items indirectly affected`\n      });\n    }\n\n    if (cascadingItems.length > 0) {\n      ripples.push({\n        level: 3,\n        items: cascadingItems,\n        description: `${cascadingItems.length} items affected by cascading changes`\n      });\n    }\n\n    return ripples;\n  }\n\n  private calculateAnalysisMetrics(impactedItems: ImpactedItem[]) {\n    const totalImpacted = impactedItems.length;\n    const highRiskChanges = impactedItems.filter(item => \n      item.severity === 'critical' || item.severity === 'high'\n    ).length;\n    \n    // Estimate testing effort based on impact complexity\n    const estimatedTestingEffort = this.estimateTestingEffort(impactedItems);\n    \n    const recommendedApproach = this.getRecommendedApproach(totalImpacted, highRiskChanges);\n\n    return {\n      totalImpacted,\n      highRiskChanges,\n      estimatedTestingEffort,\n      recommendedApproach\n    };\n  }\n\n  private async findProgramsUsingCopybook(copybookName: string): Promise<number[]> {\n    // Implementation to find programs using a specific copybook\n    return [];\n  }\n\n  private extractFieldUsages(program: Program, fieldName: string): FieldUsage[] {\n    // Implementation to extract field usages from program source\n    return [];\n  }\n\n  private extractFieldModifications(program: Program, fieldName: string): FieldModification[] {\n    // Implementation to extract field modifications from program source\n    return [];\n  }\n\n  private async traceDataPropagation(fieldName: string): Promise<DataPropagation[]> {\n    // Implementation to trace data propagation\n    return [];\n  }\n\n  private async findFieldCopybook(fieldName: string): Promise<string | undefined> {\n    // Implementation to find which copybook defines a field\n    return undefined;\n  }\n\n  private calculateSeverity(depType: string, strength?: string): ImpactedItem['severity'] {\n    if (depType === 'calls' && strength === 'strong') return 'high';\n    if (depType === 'file-io') return 'medium';\n    if (depType === 'database') return 'high';\n    return 'medium';\n  }\n\n  private estimateTestingEffort(impactedItems: ImpactedItem[]): number {\n    // Base effort + complexity multipliers\n    let baseEffort = 2; // hours\n    let complexityMultiplier = 1;\n\n    impactedItems.forEach(item => {\n      switch (item.severity) {\n        case 'critical': complexityMultiplier += 3; break;\n        case 'high': complexityMultiplier += 2; break;\n        case 'medium': complexityMultiplier += 1; break;\n        case 'low': complexityMultiplier += 0.5; break;\n      }\n    });\n\n    return Math.ceil(baseEffort * complexityMultiplier);\n  }\n\n  private getRecommendedApproach(totalImpacted: number, highRiskChanges: number): string {\n    if (highRiskChanges > 5) {\n      return 'Phased rollout with extensive testing';\n    } else if (totalImpacted > 10) {\n      return 'Coordinated deployment with regression testing';\n    } else if (totalImpacted > 3) {\n      return 'Standard testing with impact verification';\n    } else {\n      return 'Standard deployment process';\n    }\n  }\n\n  private async getCachedImpact(sourceType: string, sourceId: string): Promise<any> {\n    // Implementation to get cached impact analysis\n    return null;\n  }\n\n  private isCacheExpired(cached: any): boolean {\n    // Implementation to check if cache is expired\n    return true;\n  }\n\n  private summarizeImpact(cached: any): any {\n    // Implementation to summarize cached impact\n    return {};\n  }\n\n  private async estimateIndirectImpacts(programId: number): Promise<number> {\n    // Quick estimation without full analysis\n    const directDeps = this.dependencyGraph.get(programId.toString()) || [];\n    return directDeps.length * 2; // Rough estimate\n  }\n\n  private async estimateCopybookIndirectImpacts(copybookName: string): Promise<number> {\n    // Quick estimation for copybook impacts\n    return 0;\n  }\n\n  private async countFieldUsages(fieldName: string): Promise<{ direct: number; indirect: number }> {\n    // Quick count of field usages\n    return { direct: 0, indirect: 0 };\n  }\n\n  private calculateRiskLevel(direct: number, indirect: number): 'low' | 'medium' | 'high' | 'critical' {\n    const total = direct + indirect;\n    if (total > 20 || direct > 10) return 'critical';\n    if (total > 10 || direct > 5) return 'high';\n    if (total > 3 || direct > 2) return 'medium';\n    return 'low';\n  }\n\n  private generateImpactSummary(sourceType: string, sourceId: string, direct: number, indirect: number): string {\n    return `${sourceType} ${sourceId} affects ${direct} items directly and ${indirect} items indirectly`;\n  }\n\n  private async getAllDependencies(): Promise<Dependency[]> {\n    // This would be a new method needed in storage\n    return [];\n  }\n}\n\n// Export singleton instance\nexport const impactAnalysisEngine = new ImpactAnalysisEngine();","size_bytes":16692}}}